[
  {
    "text_1": "Optimizing join in vertica",
    "text_2": "SELECT a.online_page_key \nFROM   online_sales.online_sales_fact a \n       JOIN (SELECT * \n             FROM   online_sales.online_page_dimension \n             WHERE  page_type = 'quarterly') b \n         ON b.online_page_key = a.online_page_key;\n",
    "label": 1
  },
  {
    "text_1": "Informix DB - SQL Group By Year, Month, Week, Day, Hour",
    "text_2": "SELECT contest_id, YEAR(submission_date) AS submission_period, COUNT(*),\n       \"Y\" AS sub_type\n  FROM submissions\n  GROUP BY 1, 2\nUNION ALL\nSELECT contest_id, MONTH(submission_date) AS submission_period, COUNT(*),\n       \"M\" AS sub_type\n  FROM submissions\n  GROUP BY 1, 2\nUNION ALL\nSELECT contest_id, DAY(submission_date) AS submission_period, COUNT(*),\n       \"D\" AS sub_type\n  FROM submissions\n  GROUP BY 1, 2\nORDER BY 1, 4, 2\n",
    "label": 1
  },
  {
    "text_1": "Performance for delete query in sql",
    "text_2": "List<int> myIDs = GetIDs(); //20,000\nvar inList = myIDs.Distinct(); //5,000 distinct IDs\n//pass inList to SQL\n",
    "label": 1
  },
  {
    "text_1": "How to copy in field if query returns it blank?",
    "text_2": "select * from (\n    select a.out_num,\n        a.timestamp,\n        a.equip_name,\n        a.event_type,\n        a.comments,\n        coalesce(b.name,\n            first_value(b.name)\n                over (partition by a.out_num\n                    order by b.name nulls last)) as name\n    from tablea a\n    left outer join tableb b on a.feed_id = b.id\n    where a.out_num = '12345'\n    and a.event_type in ('CAUSE', 'STATUS', 'XYZ')\n)\nwhere event_type in ('CAUSE', 'STATUS');\n\n   OUT_NUM TIMESTAMP          EQUIP_NAME EVENT_TYPE COMMENTS   NAME     \n---------- ------------------ ---------- ---------- ---------- ----------\n     12345 02/11/2013 11:03              STATUS     BOOKS      LION       \n     12345 02/11/2013 11:13              STATUS     BOOKS      LION       \n     12345 02/11/2013 11:13              STATUS     BOOKS      LION       \n     12345 02/11/2013 11:13              CAUSE      APPLE      LION       \n     12345 02/11/2013 11:13              CAUSE      APPLE      LION       \n     12345 02/11/2013 11:13              CAUSE      APPLE      LION       \n",
    "label": 1
  },
  {
    "text_1": "Selecting arrays in nicely printed format in SQL",
    "text_2": "{{0,0,0}}\n{{1,1,1}}\n{{2,2,2}}\n",
    "label": 1
  },
  {
    "text_1": "SQL: Get records that satisfy conditions coming from multiple records",
    "text_2": "SELECT  CustomerID\nFROM    CustomerList\nWHERE   ProductID IN ('A', 'B')\nGROUP   BY CustomerID\nHAVING  COUNT(*) = 2\n",
    "label": 1
  },
  {
    "text_1": "get distinct records without NOT IN query",
    "text_2": "SELECT CONCAT(u.email, CONCAT('@', d.name))\nFROM \n    user u\n    JOIN domain d\n    ON u.domain_id = d.domain_id\n    LEFT JOIN admin a\n    ON u.id = a.id AND u.domain_id = a.domain_id\nWHERE \n    a.id IS NULL\n",
    "label": 1
  },
  {
    "text_1": "The Mysql command line doesn't launch",
    "text_2": "select * from tablename limit 1;\n",
    "label": 1
  },
  {
    "text_1": "Accessing SELECT's computed values in WHERE clause",
    "text_2": "SELECT * FROM lorem;\n+-------+\n| ipsum |\n+-------+\n|    33 |\n|    41 |\n+-------+\n",
    "label": 1
  },
  {
    "text_1": "How to do calculations on json data in Postgres",
    "text_2": "SELECT d.sum_conversions\nFROM   report r\nLEFT   JOIN LATERAL (\n   SELECT sum((value->>'conversions')::int) AS sum_conversions\n   FROM   jsonb_array_elements(r.data)\n   ) d ON true\nWHERE  r.report_id = 12345;  -- enter report_id here\n",
    "label": 1
  },
  {
    "text_1": "Joining in ms access",
    "text_2": "select PS.Event_ID, PS.Event_Type, PS.Event_Incharge, PS.Event_Date, PA.Customer_ID\nfrom (Product_AMC PA\ninner join Payment_Schedule PS on (PS.Event_Type='AMC' and PS.Event_ID=PA.AMC_ID))\nwhere PA.Customer_ID = 'ABC'\nunion all\nselect PS.Event_ID, PS.Event_Type, PS.Event_Incharge, PS.Event_Date, IO.Customer_ID\nfrom (Item_Order IO\ninner join Payment_Schedule PS on (PS.Event_Type='Order' and PS.Event_ID=IO.Order_ID))\nwhere IO.Customer_ID = 'ABC'\n",
    "label": 1
  },
  {
    "text_1": "Mysql Query return Null in mysql 5.6.12 but runs on mysql 5.5.8",
    "text_2": "SELECT DATE_ADD( NOW(), INTERVAL ROUND( SEC_TO_TIME( TIMESTAMPDIFF(SECOND, NOW(), \"2013-11-13 15:13:00\" ) / 2 ) ) HOUR_SECOND );\n",
    "label": 1
  },
  {
    "text_1": "Creating table with the same columns as in a csv",
    "text_2": "create proc createtable\n@path nvarchar(50)\nas\nbegin\ndeclare @execSQL nvarchar(1000)\ndeclare @tempstr varchar(1000)\ndeclare @col varchar(1000)\ndeclare @table nvarchar(1000)\n\n-- Create a temp table to with one column to hold the first row of the csv file\n\n  CREATE TABLE #tbl (line VARCHAR(1000))\n   SET @execSQL = \n        'BULK INSERT #tbl  \n        FROM ''' + @path + '''  \n        WITH (  \n                 FIELDTERMINATOR =''\\n'',\n                 FIRSTROW = 1,  \n                 ROWTERMINATOR = ''\\n'',\n                 LASTROW = 1 \n              )         \n       ' \n\n   EXEC sp_executesql @stmt=@execSQL \n\n   SET @col = ''\n   SET @tempstr = (SELECT TOP 1 RTRIM(REPLACE(Line, CHAR(9), ',')) FROM #tbl)\n   DROP TABLE #tbl\n   WHILE CHARINDEX(',',@tempstr) > 0\n    BEGIN           \n\n       SET @col=@col + LTRIM(RTRIM(SUBSTRING(@tempstr, 1, CHARINDEX(',',@tempstr)-1))) + ' varchar(100),'     \n\n       SET @tempstr = SUBSTRING(@tempstr, CHARINDEX(',',@tempstr)+1, len(@tempstr)) \n    END\n    SET @col = @col + @tempstr + ' varchar(100)'\n\n   if object_id('temptable') is not null\n   drop table temptable\n\n   SET @table = 'create table temptable (' + @col + ')'\n\n   EXEC sp_executesql @stmt=@table\n\n-- Load data from csv\n   SET @execSQL = \n        'BULK INSERT temptable\n        FROM ''' + @path + '''  \n        WITH (  \n                 FIELDTERMINATOR ='','',\n                 FIRSTROW = 2,  \n                 ROWTERMINATOR = ''\\n''              \n              )         \n       '  \n\n   EXEC sp_executesql @stmt=@execSQL \n\nend\n",
    "label": 1
  },
  {
    "text_1": "Many to many query",
    "text_2": "SELECT Products.name\nFROM Products\nWHERE NOT EXISTS (\n  SELECT id\n  FROM Sections\n  WHERE name IN ('new','car')\n  AND NOT EXISTS (\n    SELECT *\n    FROM Products_sections\n    WHERE Products_sections.section_id = Sections.id\n    AND Products_sections.product_id = Products.id\n  )\n)\n",
    "label": 1
  },
  {
    "text_1": "How to merge this two query statement into one query statement",
    "text_2": "SELECT * \nFROM instalmentsdetails as inds\nINNER JOIN (\n    SELECT max(`receiptNo`) as `maxreceiptNo` \n    FROM instalmentsdetails\n) as maxt\nWHERE inds.instalmentName='Third Installment' AND inds.studentFeeId='1'\n",
    "label": 1
  },
  {
    "text_1": "how to get last weeek dates from today to last 7 days date",
    "text_2": "    select Registereddate, orgid\n    from your_table\n    where Registereddate > DATEADD(day, -7, CONVERT(datetime, CONVERT(char(10), GETDATE(), \n101)))\n\nand DATEPART(week, Registereddate) = DATEPART(week, GETDATE())\n",
    "label": 1
  },
  {
    "text_1": "Suggestions to modify pivot query in SQL Server to get desired output",
    "text_2": "insert into Destination values\n\n('CZ_0',    'PFC', 2717.64,   1),\n('CZ_0',    'WFC', 3218.22,   2),\n('CZ_0',    'OFC', 3971.14,   3),\n('CZ_0',    'FFC', 4226.69,   4),\n('CZ_10001','FFC', 64.13,     1),\n('CZ_10001','OFC', 564.11,    2),\n('CZ_10001','WFC', 2511.03,   3),\n('CZ_10001','PFC', 2867.75,   4)\n",
    "label": 1
  },
  {
    "text_1": "SQL how to select unique one-to-one pairings",
    "text_2": "WITH cte AS\n  ( SELECT\n        id, person, spouse, \n        ROW_NUMBER() OVER( PARTITION BY person, spouse \n                           ORDER BY id )\n           AS rn\n    FROM\n        people\n  ) \nSELECT\n    p.id AS id1,\n    q.id AS id2 \nFROM\n  cte AS p\n  JOIN cte AS q ON\n    p.person = q.spouse AND \n    q.person = p.spouse AND\n    p.rn = q.rn AND\n    p.id < q.id ;\n",
    "label": 1
  },
  {
    "text_1": "Sql cast to float without scientific notation",
    "text_2": "declare @value float = 0.000050\nselect str(@value,12,6)\n",
    "label": 1
  },
  {
    "text_1": "mySQL order by clause weird problem",
    "text_2": "SELECT * \n  FROM customers \n ORDER BY CAST(SUBSTRING_INDEX(CUST, '.', -1) AS SIGNED) DESC\n",
    "label": 1
  },
  {
    "text_1": "sql database - each row in a table with extra data in different tables",
    "text_2": "car_id, color, size, num_wheels\n",
    "label": 1
  },
  {
    "text_1": "SQL Get Last Occurrence of Field Against Each Row",
    "text_2": "SELECT\n   D.DocumentID,\n   D.Reference,\n   LastDocumentID = (\n      SELECT TOP 1 R.DocumentID\n      FROM dbo.Documents R\n      WHERE\n         D.Reference = R.Reference\n         AND R.DocumentID < D.DocumentID\n      ORDER BY R.DocumentID DESC\n   )\nFROM\n   dbo.Documents D\n;\n",
    "label": 1
  },
  {
    "text_1": "SQL bitwise query to pull multiple days of events, while obeying other \"filters\"",
    "text_2": "   (FreqType = 8 \n       AND ( (FreqInterval & 2) = 2 OR (FreqInterval & 4) = 4) )\n   )\n",
    "label": 1
  },
  {
    "text_1": "Select 3 by 3 sql",
    "text_2": "select * from table where table_id % 3 = 0\n",
    "label": 1
  },
  {
    "text_1": "oracle specific column accepts a specific format of character",
    "text_2": "CHECK (regexp_like(myCol,'^[[:digit:]]+$'))\n",
    "label": 1
  },
  {
    "text_1": "Why do I need two copies of a table in SQL?",
    "text_2": "    select E1.SNUM\n      from ENROLLED E1 \ninner join ENROLLED E2 on E1.SNUM = E2.SNUM\ninner join CLASS C1 on E1.CNAME = C1.NAME\ninner join CLASS C2 on E2.CNAME = C2.NAME\n     where E1.CNAME <> E2.CNAME\n       and C1.MEETS_AT = C2.MEETS_AT\n",
    "label": 1
  },
  {
    "text_1": "Indexes, EXPLAIN PLAN, and record access in Oracle SQL",
    "text_2": "SELECT COUNT(*), COUNT(DISTINCT( Occupation ))\nFROM EMPLOYEE;\n",
    "label": 1
  },
  {
    "text_1": "Mine Reporting based on one field and the presence of two values",
    "text_2": "SELECT COUNT(*) AS Transfers\nFROM CallRecordsAgents \nWHERE Agent2 = \"Bob\"\n",
    "label": 1
  },
  {
    "text_1": "How to Return Data Where Null means Zero?",
    "text_2": "create table Chapters (Chapter int);\ninsert Chapters values (1);\ninsert Chapters values (2);\ninsert Chapters values (3);\n\ncreate table Words (Word varchar(50));\ninsert into Words values ('dog');\ninsert into Words values ('cat');\n\ncreate table Chapters_Words (Word varchar(50), Chapter int, [Count] int);\ninsert into Chapters_Words values ('dog', 1, 3);\ninsert into Chapters_Words values ('dog', 2, 7);\ninsert into Chapters_Words values ('dog', 3, 1);\ninsert into Chapters_Words values ('cat', 2, 4);\n\nselect\n    f.Word, \n    f.Chapter, \n    isnull(w.[Count], 0) [Count]\nfrom\n    Chapters_Words w\n    right join (\n        select w.Word, c.Chapter\n        from Chapters c\n        cross join Words w\n    ) f on f.Chapter = w.Chapter and f.Word = w.Word\n",
    "label": 1
  },
  {
    "text_1": "How to analyse the oracle statspack which is in the html format?",
    "text_2": "bytes received via SQL*Net from c        166,752,176      114,213.8      7,267.2\nbytes sent via SQL*Net to client         282,458,320      193,464.6     12,309.7\n",
    "label": 1
  },
  {
    "text_1": "What is a Covered Index?",
    "text_2": "SELECT *\nFROM tablename\nWHERE criteria\n",
    "label": 1
  },
  {
    "text_1": "SQL meta-related queries",
    "text_2": "mt1.`key` = 'hide'\n",
    "label": 1
  },
  {
    "text_1": "T-SQL code to get a DateTime contain only Month and Year from any DateTime",
    "text_2": "SELECT\n   COUNT(*) as CountOF\n    ,dateadd(month,datediff(m,0,EventTime),0)\n    FROM [Event]\n    GROUP BY dateadd(month,datediff(m,0,EventTime),0)\n    ORDER BY 2\n",
    "label": 1
  },
  {
    "text_1": "SQL get AVG from COL1, Where COL2 = 0",
    "text_2": "SELECT AVG( size ) \nFROM results\nWHERE material <> 0 AND size <= 1000;\n",
    "label": 1
  },
  {
    "text_1": "Two Digit date format in SQL",
    "text_2": "concat(Name, ....) AS ...\n",
    "label": 1
  },
  {
    "text_1": "db2 V9.1 deadlocks",
    "text_2": "select * from sysibmadm.locks_held\nselect * from sysibmadm.lockwaits\n",
    "label": 1
  },
  {
    "text_1": "Oracle: Dynamic query with IN clause using cursor",
    "text_2": "CREATE TYPE pr AS OBJECT\n           (pr  NUMBER);\n/\nCREATE TYPE prList AS TABLE OF pr;\n/\n\ndeclare\n  myPrList prList := prList ();\n  cursor lc is \n    select * \n      from (select a.*\n              from yourtable a\n                   TABLE(CAST(myPrList as prList)) my_list\n             where \n                   a.pr = my_list.pr\n             order by a.pr desc) ;\n  rec lc%ROWTYPE;\n\nBEGIN \n  /*Populate the Nested Table, with whatever collection you have */\n  myPrList := prList ( pr(91),\n                       pr(80));\n  /*\n     Sample code: for populating from your TABLE OF NUMBER type \n\n     FOR I IN 1..your_input_array.COUNT\n     LOOP\n          myPrList.EXTEND;\n          myPrList(I) := pr(your_input_array(I));\n     END LOOP;\n  */\n  open lc;\n  loop \n    FETCH lc into rec;\n    exit when lc%NOTFOUND; -- Your Exit WHEN condition should be checked afte FETCH iyself!\n    dbms_output.put_line(rec.pr);\n  end loop;\n  close lc;\nEND;\n/\n",
    "label": 1
  },
  {
    "text_1": "How to normalize a SQL Database",
    "text_2": "CREATE TABLE tbl_Date\n(\nDateID int PRIMARY KEY IDENTITY(1,1)\n ,DateValue datetime\n)\n\nINSERT INTO tbl_Date (DateValue)\nSELECT DISTINCT Date\nFROM tbl_Data\nWHERE Date NOT IN (SELECT DISTINCT DateValue FROM tbl_Date)\n",
    "label": 1
  },
  {
    "text_1": "MySQL ORDER BY grouped fields",
    "text_2": "SELECT * FROM tableA \nORDER BY CASE WHEN sector IN ('1&2', '1', 'unknown') THEN 1 \n              WHEN sector = '2' THEN 2 \n              WHEN sector = '3' THEN 3 ELSE 4 \n         END \n",
    "label": 1
  },
  {
    "text_1": "Subtracting timestamp in oracle returning weird data",
    "text_2": "with dates as (\n   select timestamp '2012-04-27 09:00:00' as col1,\n          timestamp '2012-04-26 17:35:00' as col2\n   from dual\n)\nselect col1 - col2 as ts_difference,\n       cast(col1 as date) - cast(col2 as date) as dt_difference\nfrom dates;\n",
    "label": 1
  },
  {
    "text_1": "get one stored procedure value in to result of another stored procedure",
    "text_2": " ALTER procedure [dbo].[Keylocation] @Carid nvarchar(50) as begin \n SET NOCOUNT ON; \n SELECT \n          t.Status,k.HBarcode,\n          te.UniqueName,\n       COALESCE(e.Ename, e1.Ename) AS EName FROM    Transaction_tbl t\n          left JOIN UserMaster_tbl u\n              ON u.uid = t.PAICID\n               left join EmployeeMaster_tbl e on e.ECode=u.Ecode\n              AND t.Status = 0\n          LEFT JOIN EmployeeMaster_tbl e1\n              ON e1.ECode = t.ECode\n              AND t.Status = 1 or e1.Ecode=t.DelEcode and t.Status=4\n              left Join KHanger_tbl k\n              on t.transactID=k.transactid\n              and t.Status in(2,3)\n              left JOIN Terminals_tbl te ON k.tid = te.tid  \n         **Inner Join FetchKEY F on F.TbarCode = k.HBarcode**      \n  WHERE   t.TBarcode = @Carid \nend\n",
    "label": 1
  },
  {
    "text_1": "How do I get the number of inserts/updates occuring in an Oracle database?",
    "text_2": "ALTER TABLE table_name\n  MONITORING;\n",
    "label": 1
  },
  {
    "text_1": "MySQL count rows in one table based on dates in another table",
    "text_2": "SELECT c.Id, c.EventFrom, c.EventTo, COUNT(e.ID)\nFROM CUSTOMERS c\nLEFT JOIN EVENTS e ON e.ID = c.ID AND \n                      e.EventDate BETWEEN c.EventFrom AND c.EventTo\nGROUP BY c.Id, c.EventFrom, c.EventTo\n",
    "label": 1
  },
  {
    "text_1": "Would a partial index be used on a query?",
    "text_2": "Seq Scan on orders (cost=0.00..195.00 rows=1 width=8) Filter: ((id = 123) AND (created_at = '2014-10-12'::date))\n",
    "label": 1
  },
  {
    "text_1": "Multiple queries in one statement",
    "text_2": "select \n    (select count(*) as REDEEMTOTALUSED \n     from voucher \n     where campaign_id='123' and redeemcount>0) AS REDEEMTOTALUSED ,\n    (select count(*) as REDEEMTOTALUNUSED \n     from voucher \n     where campaign_id='123' and redeemcount=0) AS REDEEMTOTALUNUSED \n",
    "label": 1
  },
  {
    "text_1": "update statement not executing",
    "text_2": "itemid  itemCode   itemCheckDigit   itemSuffx    itemImageFileName\n1       abc        X                cba          f00.bar\n2       ac         NULL             ca           f01.bar\n3       ab         x                NULL         f02.bar\n4       a          NULL             NULL         f03.bar\n5       NULL       X                cba          f04.bar\n6       NULL       NULL             ca           f05.bar\n7       NULL       x                NULL         f06.bar\n8       NULL       NULL             NULL         f07.bar.updated\n",
    "label": 1
  },
  {
    "text_1": "Combine multiple fields with condition",
    "text_2": "SELECT Nz(field_1, '') & Nz(field_2, '') & Nz(field_3, '') AS combined\n",
    "label": 1
  },
  {
    "text_1": "how do i shorten this SQL?",
    "text_2": "INSERT \nWHEN (0=(SELECT COUNT(id) FROM LIST WHERE JCODE=8 AND KCODE=01 AND LCODE=2011)) \nINTO LIST (field1, field2, field3, STS, field4, field5, NO, field6) \nSELECT field1, field2, field3, null, field4, field5, 1, field6 \n    FROM LIST@LNDB \n    WHERE JCODE=8 AND KCODE=01 AND LCODE=2011 \n    AND ban IN (SELECT BAN FROM billing_account)\n",
    "label": 1
  },
  {
    "text_1": "SQL server 'like' against a float field produces inconsistent results",
    "text_2": "Value         Output\n0 (default)   A maximum of 6 digits. Use in scientific notation, when appropriate.\n1             Always 8 digits. Always use in scientific notation.\n2             Always 16 digits. Always use in scientific notation.\n",
    "label": 1
  },
  {
    "text_1": "SQL Server Indexing Doubts",
    "text_2": "SELECT something, something_else FROM sometable t1 WHERE akey = 'some value'\n",
    "label": 1
  },
  {
    "text_1": "Is there ever a case in SQL where a subquery is more efficient than a join?",
    "text_2": "SELECT a.*\n    FROM TableA a\n    WHERE NOT EXISTS(SELECT NULL FROM TableB b WHERE b.parent_id = a.id)\n",
    "label": 1
  },
  {
    "text_1": "Recursive CTE query generate product or page hierarchy",
    "text_2": "ParentRoot = CASE WHEN cte.ParentRoot <> 'None' THEN c.PageName + '/' + cte.ParentRoot ELSE c.PageName END,\n",
    "label": 1
  },
  {
    "text_1": "Decide if an employee is new or leavingemployee",
    "text_2": "SELECT EmployeeID, LocationID, Min(StartDate) \n  FROM Contracts\n WHERE Startdate <= @Enddate\n   AND Enddate >= @Startdate\nGROUP BY EmployeeID, LocationID\nHAVING Min(StartDate) between @Startdate and @Enddate\n",
    "label": 1
  },
  {
    "text_1": "SQL Between Begins With",
    "text_2": "DECLARE @testtable AS TABLE (word varchar(20))\n\nINSERT INTO @testtable VALUES ('ly')\nINSERT INTO @testtable VALUES ('Ly')\nINSERT INTO @testtable VALUES ('Zoo')\nINSERT INTO @testtable VALUES ('r')\nINSERT INTO @testtable VALUES ('traci')\n\nDECLARE @minword varchar(20)\nDECLARE @maxword varchar(20)\n\nSET @minword='ly'\nSET @maxword='zol'\n\nSELECT word, LEFT(word,LEN(@minword)), LEFT(word,LEN(@maxword)), @minword, @maxword\nFROM @testtable \nWHERE LEFT(word,LEN(@minword))>=@minword\nAND  LEFT(word,LEN(@maxword))<=@maxword\n",
    "label": 1
  },
  {
    "text_1": "How can I combine ANDs and ORs in my SQL statement",
    "text_2": "SELECT * FROM `table` WHERE type IN (3, 4, 5) AND table.deleted = 1;\n",
    "label": 1
  },
  {
    "text_1": "Inserting to one table, insert the ID to second table",
    "text_2": "create trigger Foo_Insert on Foo after insert\nas\nbegin\n    set nocount on\n    insert Bar(fooid)\n    select id from inserted\nend\ngo\ninsert Foo (Name)\nvalues ('abc');\n",
    "label": 1
  },
  {
    "text_1": "SQL Query, Need help using \"contains\" and \"does not contain\"",
    "text_2": " marketprovider_1 marketprovider_2 marketprovider_3 marketprovider_4 marketprovider_5 \n ---------------- ---------------- ---------------- ---------------- ----------------\n data tv coffee   NULL             NULL             NULL             NULL \n data             phone            tv               NULL             NULL \n data             tv               NULL             NULL             NULL \n tv               tv               tv               NULL             NULL\n data             netflix          net              NULL             NULL \n mountain dew     phone            uverse           cable            netflix\n amazon           hulu             no uverse        wifi             roku\n",
    "label": 1
  },
  {
    "text_1": "Time difference in hours and seconds over a partition window in Teradata (Sessionizing Records)",
    "text_2": "REPLACE FUNCTION TimeStamp_Diff_Seconds\n(\n   ts1 TIMESTAMP(6)\n  ,ts2 TIMESTAMP(6)\n)\nRETURNS DECIMAL(18,6)\nLANGUAGE SQL\nCONTAINS SQL\nRETURNS NULL ON NULL INPUT\nDETERMINISTIC\nSQL SECURITY DEFINER\nCOLLATION INVOKER\nINLINE TYPE 1\nRETURN\n(CAST((CAST(ts2 AS DATE)- CAST(ts1 AS DATE)) AS DECIMAL(18,6)) * 60*60*24)\n      + ((EXTRACT(  HOUR FROM ts2) - EXTRACT(  HOUR FROM ts1)) * 60*60)\n      + ((EXTRACT(MINUTE FROM ts2) - EXTRACT(MINUTE FROM ts1)) * 60)\n      +  (EXTRACT(SECOND FROM ts2) - EXTRACT(SECOND FROM ts1))\n;\n",
    "label": 1
  },
  {
    "text_1": "MySQL - Make one record out of a column",
    "text_2": "select t1.id,\n  max(case when t2.name = 'email' then data end) Email,\n  max(case when t2.name= 'FirstName' then data end) Firstname,\n  max(case when t2.name= 'LastName' then data end) Lastname,\n  max(case when t2.name= 'phone' then data end) Phone\nfrom yourtable t1\ninner join component t2\n  on t1.component_id = t2.id \ngroup by t1.id;\n",
    "label": 1
  },
  {
    "text_1": "How to design a database table to enforce non-duplicate Unique Key records",
    "text_2": "insert into dbo.ABC (Col1,Col2)\nselect 1,3\n",
    "label": 1
  },
  {
    "text_1": "Store and retrieve user favorites in mysql",
    "text_2": "|  ID  |   MODEL   |  USERNAME  |\n|   3  |  FERRARI  |   KEVIN    |\n|   3  |  FERRARI  |    PAUL    |\n",
    "label": 1
  },
  {
    "text_1": "Split the Quarter data in a table into monthly SQL server",
    "text_2": "create function quarter_to_month\n(\n    @from date,\n    @to date\n) returns table\nas return\n(\n    with [base] as\n    (\n        select @from [from], dateadd(day, -1, dateadd(month, 1, @from)) [to]\n        union all\n        select dateadd(month, 1, [from]), dateadd(day, -1, dateadd(month, 2, [from]))\n        from [base]\n        where dateadd(day, -1, dateadd(month, 2, [from])) <= @to\n    )\n    select * from [base]\n)\ngo\n\ncreate table QuarterIndex\n(\n    [end] date, \n    [percent] float\n);\ngo\n\ninsert into QuarterIndex ([end], [percent]) values\n('31 December 2014', 2.0),\n('31 March 2015', 2.1),\n('30 June 2015', 2.33);\ngo\n\nwith QuarterIndex_with_begin_date as\n(\n    select cast(left(convert(varchar, dateadd(month, -2, [end]), 112), 6) + '01' as date) [begin]\n    , [end]\n    , [percent] \n    from QuarterIndex\n)\nselect datename(month, x.[from]) [mname], x.[from], x.[to]\n, power((1+[percent]), (1/12)-1) [percent] --> you can change the formula if i'm wrong\nfrom QuarterIndex_with_begin_date q\ncross apply quarter_to_month ([begin], [end]) x\noption (maxrecursion 0);\n",
    "label": 1
  },
  {
    "text_1": "TSQL- How to count number of instances",
    "text_2": "SELECT\n   StudentID,\n   ActionCode,\n   ActionCodeCount = Count(*)\nFROM\n   dbo.StudentActionCodes\nWHERE\n   ActionCode IN (51201, 51206, 51207, 51208, 51209)\nGROUP BY\n   StudentID,\n   ActionCode\nORDER BY\n   StudentID DESC,\n   ActionCode\n;\n",
    "label": 1
  },
  {
    "text_1": "Update column values with splited values",
    "text_2": "update Product \nset value=substring(value,1,charindex('#',value)-1)\nwhere type=1\n",
    "label": 1
  },
  {
    "text_1": "Stock calculation during sales",
    "text_2": "qty min max\n15    1  15\n 2   16  17\n 3   18  21\n",
    "label": 1
  },
  {
    "text_1": "Is it possible to get data from a website to populate a database?",
    "text_2": "public class SQLiteHelper extends SQLiteOpenHelper {\n    public static final int DATABASE_VERSION = 1;\n    public static final String DATABASE_NAME = \"RotatingCards.db\";\n\n\n    public static final String SQL_DELETE_ENTRIES = \"\";\n\n    public SQLiteHelper(Context context) {\n        super(context, DATABASE_NAME, null, DATABASE_VERSION);\n    }\n\n    @Override\n    public void onCreate(SQLiteDatabase db) {\n        // CREATE STATEMENTS\n        db.execSQL(EntryContract.ExamsEntry.CREATE_STATEMENT);\n        db.execSQL(EntryContract.SubjectsEntry.CREATE_STATEMENT);\n        db.execSQL(EntryContract.WordsEntry.CREATE_STATEMENT);\n        db.execSQL(EntryContract.WordsToExamEntry.CREATE_STATEMENT);\n\n        // POPULATE STATEMENTS\n        db.execSQL(EntryContract.ExamsEntry.POPULATE_STATEMENT);\n        db.execSQL(EntryContract.SubjectsEntry.POPULATE_STATEMENT);\n        db.execSQL(EntryContract.WordsEntry.POPULATE_STATEMENT);\n        db.execSQL(EntryContract.WordsToExamEntry.POPULATE_STATEMENT);\n    }\n\n    @Override\n    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n        db.execSQL(SQL_DELETE_ENTRIES);\n        onCreate(db);\n    }\n\n    @Override\n    public void onDowngrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n        onUpgrade(db, oldVersion, newVersion);\n    }\n}\n",
    "label": 1
  },
  {
    "text_1": "SELECT with a COUNT of another SELECT",
    "text_2": "SQL SERVER VERSION\nSELECT id, SUM(CASE WHEN status = 3 THEN 1 ELSE 0 END) as status_3_count\nFROM yourtable\nGROUP BY id\n",
    "label": 1
  },
  {
    "text_1": "select first in and last out time from door access table",
    "text_2": "EmployeeID           EmployeeName Date       InLoc    InTime OutLoc  OutTime Duration\n-------------------- ------------ ---------- -------- ------ ------- ------- --------\n_1346                A            07/11/2014 L1       10:00  L3      23:39   13:39\n_1347                B            07/10/2014 L2       10:58  L4      23:58   13:00\n_1364                C            07/11/2014 L5       10:00  L8      23:58   13:58\n_1367                D            07/10/2014 L6       10:58  L7      22:42   11:44\n_1422                E            07/11/2014 L10      23:10          \n_1111                F            07/10/2014                 L20     23:10   \n",
    "label": 1
  },
  {
    "text_1": "How do NULL values affect performance in a database search?",
    "text_2": "SELECT  *\nFROM    table\nWHERE   column IS NULL\n",
    "label": 1
  },
  {
    "text_1": "zend framework update db not work",
    "text_2": "$updateData = array(\n'user_type' => 0\n);\n        $updateWhere = array(\n'username' => 'admin'\n);          \n",
    "label": 1
  },
  {
    "text_1": "SUM on joining fields",
    "text_2": "SELECT \n  Teams.user_id, \n  username,\n  SUM(amount) AS total\nFROM \n  Teams\n  /* LEFT JOIN used in case a user has no payments -- will still show in the list */ \n  LEFT JOIN Payments ON Teams.user_id = Payments.user_id\nGROUP BY \n  Teams.user_id, \n  Teams.username\n",
    "label": 1
  },
  {
    "text_1": "Mysql join two table",
    "text_2": "CREATE TABLE ph_Companies\n(\n    ID INT PRIMARY KEY,\n    CompanyName VARCHAR(20),\n    -- OTHER COLUMNS HERE\n);\n\nCREATE TABLE otherTable \n(\n    ID INT AUTO_INCREMENT PRIMARY KEY,\n    CompanyID INT,\n    CompanyName VARCHAR(20),\n    clid VARCHAR(50),\n    -- OTHER COLUMNS HERE\n    CONSTRAINT tb_fk FOREIGN KEY (CompanyID)\n        REFERENCES ph_Companies (ID)\n);\n",
    "label": 1
  },
  {
    "text_1": "Returning first instance of value across multiple tables (and returning associated columns)",
    "text_2": "SELECT  contact_id ,\n        event_id ,\n        date_received\nFROM    (   SELECT  contact_id ,\n                    event_id ,\n                    date_received,\n                    ROW_NUMBER() OVER (PARTITION BY contact_id\n                                       ORDER BY date_received\n                                      ) AS rn\n            FROM #firstEventsAllTables       \n        ) AS f\nWHERE rn = 1\n",
    "label": 1
  },
  {
    "text_1": "Better query to select the max value of an aggregation with a count result and retain another column MySQL?",
    "text_2": "SELECT number_of_visitors, group_concat(visit_date) as visit_dates\nFROM (SELECT (COUNT(*) + SUM(number_of_minors)) as number_of_visitors, visit_date\n      FROM visite \n      WHERE visit_date BETWEEN '2014-06-13' AND '2014-06-20'\n      GROUP BY visit_date\n     ) t\nGROUP BY number_of_visitors\nORDER BY number_of_visitors DESC\nLIMIT 1;\n",
    "label": 1
  },
  {
    "text_1": "expression engine SQL AND OR query?",
    "text_2": "SELECT\n    file_id\nFROM\n    exp_file_categories\nWHERE\n    cat_id = 19\n",
    "label": 1
  },
  {
    "text_1": "Calculating column in datagridview",
    "text_2": "private void button1_Click(object sender, EventArgs e)\n{\n    textBox1.Text = dataGridView1.Columns[\"columnName\"].HeaderText;\n}\n",
    "label": 1
  },
  {
    "text_1": "PostgreSQL: get count of occurrences of specified element in array",
    "text_2": "with elements (element) as (\n   select unnest(ARRAY['a','b','c','a','a'])\n)\nselect count(*)\nfrom elements\nwhere element = 'a';\n",
    "label": 1
  },
  {
    "text_1": "Alternate of lead lag function in sql server 2008",
    "text_2": "select t.*\nfrom table t join\n     table tnext\n     on t.id = tnext.id - 1 and\n        t.StatusId = 1 and\n        tnext.StatusId = 6 and\n        datediff(second, t.MinStartTime, tnext.MinStartTime) < 60;\n",
    "label": 1
  },
  {
    "text_1": "Mysql best students in every class in a school",
    "text_2": "SELECT classid, MAX(CAST(exam1 AS UNSIGNED) + CAST(exam2 AS UNSIGNED)) as 'maxtotal'\n          FROM students\n          WHERE NOT ISNULL(exam1)\n                AND NOT ISNULL(exam2)\n          GROUP BY classid\n",
    "label": 1
  },
  {
    "text_1": "Oracle: How to reference an alias with a space from a subquery in a comparison operation",
    "text_2": "-- SQL Example\nSELECT \"Just one\" FROM (\n  SELECT 1 AS \"Just one\" FROM dual\n);\n",
    "label": 1
  },
  {
    "text_1": "Find the route based on the postion and the arrival time",
    "text_2": "select a.route\nfrom arrivaltimes_table a\njoin stopstable s on a.stop_id = s.stop_id\nwhere s.lat = 53.868937\nand s.longi = 10.665545\nand a.arrivaltime = '12:25:00';\n",
    "label": 1
  },
  {
    "text_1": "SQL Server log file over 5GB in size",
    "text_2": "BACKUP LOG  yourdatabase WITH TRUNCATE_ONLY\nDBCC SHRINKFILE (yourdatabase_Log, 1)\n",
    "label": 1
  },
  {
    "text_1": "How to SELECT multiple values in different tables in SQL?",
    "text_2": "SELECT * FROM Report\nWHERE Employee_ID IN (\n   SELECT T1.Id from Employee T1\n   WHERE T1.supervisor_id = **MyId**)\nOR Employee_Id = **MyId**\n",
    "label": 1
  },
  {
    "text_1": "Grouping similar rows and counting other columns based on it in SQL",
    "text_2": "SELECT name, split_part(property, '.', 1) AS propertyname\n     , bool_or(col1) AS col1\n     , bool_or(col2) AS col2\nFROM   tbl\nGROUP  BY 1, 2;\n",
    "label": 1
  },
  {
    "text_1": "How can I compare time in SQL Server?",
    "text_2": "declare @mydate datetime\nset @mydate = '2009-04-30 19:47:16.123'\n",
    "label": 1
  },
  {
    "text_1": "Sql Server - Update multiple rows based on the primary key (Large Amount of data)",
    "text_2": "Insert into newtable\nSelect VALUES from productTable a where productId not exists(select 1 from newTable b where a.ProductId = b.ProductId);\n",
    "label": 1
  },
  {
    "text_1": "Tricky SQL SELECT statement - combine two rows into two columns",
    "text_2": "SELECT\n    c1.Value AS Value1, c2.Value AS Value2, c1.timestamp, c2.otherstuff\nFROM\n    (\n     SELECT Value, timestamp, otherstuff\n     FROM MyTable\n     WHERE Channel = 1\n    ) c1           \n    FULL OUTER JOIN\n    (\n     SELECT Value, timestamp, otherstuff\n     FROM MyTable\n     WHERE Channel = 2\n    ) c2 ON c1.timestamp = c2.timestamp AND c1.otherstuff = c2.otherstuff                  \n",
    "label": 1
  },
  {
    "text_1": "FOR loop in WITH statement",
    "text_2": "DECLARE\n    vA NUMBER;\nBEGIN\n    FOR I IN 1 .. 100 LOOP\n       SELECT COUNT (*) as A\n       INTO vA\n       FROM         table1 C\n       JOIN         table2 D\n       ON           D.MY_ID = C.MY_ID\n       JOIN         table3 E\n       ON           E.NEW_ID = C.NEW_ID\n       WHERE        E.b BETWEEN 1 AND 4;\n   END LOOP;\nEND;\n",
    "label": 1
  },
  {
    "text_1": "Left Join and conditional where not giving desired result?",
    "text_2": "EntityID    CurrentStateID\n301         1155    \n",
    "label": 1
  },
  {
    "text_1": "Query to create a new table to a specific database in SQL?",
    "text_2": "create table smoketest.dbo.Tablename(ID INT)\n",
    "label": 1
  },
  {
    "text_1": "SQL join involving table having “fieldname” and “fieldvalue” columns",
    "text_2": "Select Listings.record_id, Listings.title from Listings\nINNER JOIN\n( Select  \n    ListingId,\n    MAX(\n       case when fieldId = 'province_id' then fieldValue else null end\n    ) AS province_id,\n    MAX(\n       case when fieldId = 'district_id' then fieldValue else null end \n    ) AS district_id,\n    MAX(\n       case when fieldId = 'suburb_id' then fieldValue else null end\n    ) AS suburb_id\n  from listing_special_fields\n  group by ListingId\n) AS PV ON PV.ListingId = Listings.record_id\nWHERE PV.province_id IN (2)\n   AND PV.district_id IN (1, 4)\n   AND PV.suburb_id IN (5, 6)\n",
    "label": 1
  },
  {
    "text_1": "I want only the first value for distinct ids to be summed sql server",
    "text_2": "SELECT  SUM([Overage])\nFROM    ( SELECT    [WeekId] ,\n                    MAX([Overage]) AS [Overage]\n          FROM      [dbo].[OverageTable]\n          GROUP BY  [WeekId]\n        ) tmp\n",
    "label": 1
  },
  {
    "text_1": "Is Making a DLL compatible to all database is good idea",
    "text_2": "SELECT x AS y FROM some_table\n",
    "label": 1
  },
  {
    "text_1": "Accessing multiple SQL databases with the same schema",
    "text_2": "SELECT * FROM SERIES_DATA\n",
    "label": 1
  },
  {
    "text_1": "LocalSqlServer was not found in the applications configuration or the connection string is empty",
    "text_2": "<add name=\"LocalSqlServer\" connectionString=\"data source=.\\SQLEXPRESS;Integrated Security=SSPI;AttachDBFilename=|DataDirectory|aspnetdb.mdf;User Instance=true\" providerName=\"System.Data.SqlClient\"/>\n",
    "label": 1
  },
  {
    "text_1": "How to extract the latest rows",
    "text_2": "SELECT a.*\n  FROM TableA a\n  JOIN (\n       SELECT d.MaxDate, MAX(t.Time) AS MaxTime\n         FROM TableA t\n         JOIN (\n              SELECT MAX(Date) AS MaxDate\n                FROM TableA\n              ) d\n           ON t.Date = d.MaxDate\n        GROUP BY d.MaxDate\n       ) m\n    ON a.Date = m.MaxDate AND a.Time = m.MaxTime\n",
    "label": 1
  },
  {
    "text_1": "Error converting 2 varchar attributes to datetime",
    "text_2": "UPDATE dbo.UsersTemp SET Created = CONVERT(DATETIME, \n  CREATEDATE + ' ' + STUFF(STUFF(RIGHT('000000' \n  + CREATETIME, 6), 5, 0, ':'), 3, 0, ':'));\n",
    "label": 1
  },
  {
    "text_1": "Regex for table names in Oracle query",
    "text_2": "SELECT * FROM ALL_TABLES \nWHERE REGEXP_LIKE(TABLE_NAME, '[a-z]+.?[A-Z]+|[A-Z]+.?[a-z]+', 'c');\n",
    "label": 1
  },
  {
    "text_1": "UNION ALL - Return blanks in one column and data in another",
    "text_2": "SELECT column1, column2, column3, column4\n FROM table1\n UNION ALL\n SELECT column1, DECODE(column4,'B',NULL,column2), column3, column4\n FROM table2\n",
    "label": 1
  },
  {
    "text_1": "MS Access - Selecting an ID by selecting the linked name in a form",
    "text_2": "SELECT ClientID, ClientName & SomeIdentifierForDups FROM ClientTable\n",
    "label": 1
  },
  {
    "text_1": "Get Average value for each X rows in SQL",
    "text_2": "SELECT\n   ChunkStart = Min(Id),\n   ChunkEnd = Max(Id),\n   Value = Avg(Value)\nFROM\n   YourTable\nGROUP BY\n   (Id - 1) / (((SELECT Count(*) FROM YourTable) + 4) / 5)\n;\n",
    "label": 1
  },
  {
    "text_1": "SQL Server - Complex Dynamic Pivot columns",
    "text_2": "| PROJECTID | A_CONTROLPOINT | A_CONTROLSCORE | A_CONTROLVALUE | A_CHILD1 | A_CHILD2 | A_CHILD3 | A_CHILD4 | C_CONTROLPOINT | C_CONTROLSCORE | C_CONTROLVALUE | C_CHILD1 |  C_CHILD2 |\n|-----------|----------------|----------------|----------------|----------|----------|----------|----------|----------------|----------------|----------------|----------|-----------|\n|      P001 |          30.44 |          65.00 |        Invalid |      Yes |       No |       NA |   Others |          45.30 |          85.00 |          Valid |      Yes | SomeValue |\n",
    "label": 1
  },
  {
    "text_1": "Find n largest values in a column ",
    "text_2": "SELECT TOP 5 items_sold\nFROM tbl_PRODUCT \nORDER BY items_sold dESC\n",
    "label": 1
  },
  {
    "text_1": "Cleaner way of inserting",
    "text_2": "INSERT INTO @TempTable\n    SELECT 'value1', NULLIF(@Param1 + @Param2, 0);\n",
    "label": 1
  },
  {
    "text_1": "Query for show each value from another table",
    "text_2": "|  USER |           game |\n|-------|----------------|\n| Chris |         dungen |\n| Chris |         naruto |\n| Chris | winning eleven |\n|  Gale |         dungen |\n|  Gale |         naruto |\n|  Gale | winning eleven |\n| Donna |         dungen |\n| Donna |         naruto |\n| Donna | winning eleven |\n",
    "label": 1
  },
  {
    "text_1": "Mysql SELECT COUNT(COL) with a condition",
    "text_2": "SELECT\n  group_id\n  SUM(CASE WHEN f1 = 'a' THEN 1 ELSE 0 END) AS f1,\n  SUM(CASE WHEN f2 = 'b' THEN 1 ELSE 0 END) AS f2,\n  /* f3 = 'b' isn't in your \"magic select\" but here it is anyway... */\n  SUM(CASE WHEN f3 = 'c' THEN 1 ELSE 0 END) AS f3\nFROM \n  yourtable\nGROUP BY group_id\n",
    "label": 1
  },
  {
    "text_1": "Table and form based off a different table - see if a common record exists in the table and insert a \"yes\" or \"no\" value in the form",
    "text_2": "=IIf(DCount(\"*\", \"COMMENTS\", \"[PROJECTID] = \" & [PROJECTID]) > 0, \"YES\", \"NO\")\n",
    "label": 1
  },
  {
    "text_1": "How to filter query with EXTRACT statement oracle",
    "text_2": "SELECT REQUEST_ID,MIG_STATUS\n      -- rest of columns\nFROM NET_MIG\nWHERE START_DATE >= (SYSDATE - 1);\n",
    "label": 1
  },
  {
    "text_1": "MySQL join on null?",
    "text_2": "SELECT p.id, sku, IFNULL(tr.name,en.name) as name\nFROM product p\nLEFT JOIN translation en ON p.id = en.product_id and en.lang = 'en'\nLEFT JOIN translation tr ON p.id = tr.product_id and tr.lang = 'sl'\n",
    "label": 1
  },
  {
    "text_1": "Oracle SQL add left join same table",
    "text_2": "SELECT T1.ref, T2.rtiers , T3.nom1, N.nom1 as nom1_outer\nFROM T1, T2, T3, T3 N\nWHERE T2.code = T1.rempl \nAND T3.code = T1.rtiers\nAND N.alias(+) = T2.rtiers\n",
    "label": 1
  },
  {
    "text_1": "SQL case - if a value is equal to something then do something",
    "text_2": "concat('<a target=\"_new\" href=\"',\n       (case gi.itemmodule\n        when 'quiz' \n          then 'value of href'\n        when 'scorm'\n           then 'another value of href'\n        else 'defaultvalue of href'\n        end), \n        cm.id,\n        '\">View this Activity</a>') as 'Link'\n",
    "label": 1
  },
  {
    "text_1": "last id in order",
    "text_2": "CREATE FUNCTION GetMaxA(@InputA int) RETURNS int\nAS\nBEGIN\n\n    DECLARE SearchCursor CURSOR \n        LOCAL \n        FORWARD_ONLY \n        FAST_FORWARD \n        READ_ONLY \n    FOR\n        SELECT \n            a, \n            b \n        FROM \n            YourABTable \n        WHERE \n            a >= @InputA\n        ORDER BY\n            a ASC\n\n    DECLARE @CurrentA int\n    DECLARE @CurrentB int\n\n    DECLARE @ReturnA int\n\n    SET @CurrentA = -1\n    SET @CurrentB = -1\n\n    SET @ReturnA = @CurrentA\n\n    OPEN SearchCursor\n\n    FETCH NEXT FROM SearchCursor \n    INTO @CurrentA, @CurrentB\n\n    --if you want to see where you start\n    --PRINT '@CurrentA = ' + CONVERT(nvarchar(max), @CurrentA)\n    --PRINT '@CurrentB = ' + CONVERT(nvarchar(max), @CurrentB)\n\n    IF @CurrentB = 0\n        BEGIN\n            SET @CurrentB = 1\n            --cheat to get the WHILE loop running at least once if you bingo a row where B = 0 on your input\n        END\n\n    WHILE @@FETCH_STATUS = 0 AND @CurrentB > 0\n    BEGIN\n        SET @ReturnA = @CurrentA\n\n        FETCH NEXT FROM SearchCursor \n        INTO @CurrentA, @CurrentB\n    END \n\n    CLOSE SearchCursor ;\n    DEALLOCATE SearchCursor ;\n\n    RETURN @ReturnA\nEND;\n",
    "label": 1
  },
  {
    "text_1": "How do I combine Right and Like functions in a query?",
    "text_2": "WHERE RIGHT(Field1, 4) LIKE '*[^0-9]*' AND \n    RIGHT(Field1, 4) NOT LIKE '[0-9][0-9][0-9][0-9]'\n",
    "label": 1
  },
  {
    "text_1": "Perl sql select all",
    "text_2": "my $results = $dbh->selectall_hashref(\n   'SELECT * FROM sample.teachers where term like '.$dbh->quote(\"$searchterm%\"),\n   'teacher'\n);\n",
    "label": 1
  },
  {
    "text_1": "SQL Route Finder in Oracle - Recursion?",
    "text_2": "  SELECT\n    LEVEL as route_step,\n    t1.next_hop_station as next_station,\n    t1.stageid\n\n  FROM \n    stage t1\n\n    INNER  JOIN stage t2 \n    ON t2.start_station = t1.next_hop_station\n\n  START WITH\n    t1.start_station = 'your start station'\n\n  CONNECT BY \n    PRIOR t1.start_station = t1.next_hop_station\n",
    "label": 1
  },
  {
    "text_1": "Transpose to Count columns of Boolean values on Access SQL",
    "text_2": "SELECT COUNT(*) FROM STUDENTS WHERE HasBamboo\n",
    "label": 1
  },
  {
    "text_1": "dividing sum of the column with each part",
    "text_2": "CREATE TABLE data ( id, value ) AS\n SELECT 1, 100 FROM DUAL\nUNION ALL SELECT 2, 200 FROM DUAL\nUNION ALL SELECT 3, 300 FROM DUAL;\n\nCREATE TABLE derived_data AS\nSELECT id,\n value,\n value||'/'||SUM(value) OVER ( ORDER BY NULL ) AS derived_col\nFROM data;\n",
    "label": 1
  },
  {
    "text_1": "Insert the value of the foreign key ID and not the ID",
    "text_2": "Private Sub cboDept_SelectedValueChanged(sender, e ...) \n    myEmployee.DeptID = Convert.ToInt32(cboDept.SelectedValue)\nEnd Sub\n",
    "label": 1
  },
  {
    "text_1": "Distinct Value of a column in sql server 2008",
    "text_2": "SELECT DISTINCT macaddress FROM heartbeats\n",
    "label": 1
  },
  {
    "text_1": "sql queries Highest 3",
    "text_2": "SELECT * FROM\n(SELECT \n    Cereal_name, \n    COUNT(*) as numOfCount\nFROM Cereal\nGROUP BY numOfCount\nORDER BY COUNT(*) DESC\n) CEREALS\nWHERE ROWNUM <= 3\n",
    "label": 1
  },
  {
    "text_1": "How to prevent column b containing the same value as any column a in Oracle?",
    "text_2": "SQL> INSERT INTO t VALUES ('Wing Commdr.', 'Wing Cdr.');     \n1 row inserted\n\nSQL> COMMIT;     \nCommit complete\n\nSQL> INSERT INTO t VALUES ('Wing Cdr.', 'Wing Commander');     \n1 row inserted\n\nSQL> COMMIT;     \n\nORA-12008: erreur dans le chemin de régénération de la vue matérialisée\nORA-00001: violation de contrainte unique (VNZ.IDX)\n\nSQL> INSERT INTO t VALUES ('X', 'Wing Commdr.');     \n1 row inserted\n\nSQL> COMMIT;\n\nORA-12008: erreur dans le chemin de régénération de la vue matérialisée\nORA-00001: violation de contrainte unique (VNZ.IDX)\n",
    "label": 1
  },
  {
    "text_1": "SQL select row in one table, for whose key row in another table has given values",
    "text_2": "select t1.set_id, t1.data\nfrom table1 t1 join\n     table2 t2\n     on t1.set_id = t2.set_id\ngroup by t1.set_id\nhaving sum(t2.single_id = 10) > 0 and\n       sum(t2.single_id = 13) > 0 and\n       sum(t2.single_id not in (10, 13)) = 0;\n",
    "label": 1
  },
  {
    "text_1": "SYNC and UPDATE at the same time between two tables in Oracle SQL",
    "text_2": "\nTEST_TABLE_A\nNAME   VAL1   VAL2   STATUS\n-----------------------------\nHEAD1  100    200    INACTIVE\nHEAD1  1      2      ACTIVE\nHEAD2  300    400    INACTIVE\nHEAD3  500    600    INACTIVE\nHEAD4  700    800    ACTIVE\nHEAD5  900    1000   ACTIVE\n",
    "label": 1
  },
  {
    "text_1": "Sum of minutes between multiple date ranges",
    "text_2": "With OrderedRanges as (\n  Select\n    Row_Number() Over (Partition By UserID Order By AvailStart) AS RN,\n    AvailStart,\n    AvailEnd\n  From\n    dbo.Available\n  Where\n    UserID = 456\n),\nAccumulateMinutes (RN, Accum, CurStart, CurEnd) as (\n  Select\n    RN, 0, AvailStart, AvailEnd\n  From\n    OrderedRanges\n  Where \n    RN = 1\n  Union All\n  Select\n    o.RN, \n    a.Accum + Case When o.AvailStart <= a.CurEnd Then\n        0\n      Else \n        DateDiff(Minute, a.CurStart, a.CurEnd)\n      End,\n    Case When o.AvailStart <= a.CurEnd Then \n        a.CurStart\n      Else\n        o.AvailStart\n      End,\n    Case When o.AvailStart <= a.CurEnd Then\n        Case When a.CurEnd > o.AvailEnd Then a.CurEnd Else o.AvailEnd End\n      Else\n        o.AvailEnd\n      End\n  From\n    AccumulateMinutes a\n        Inner Join \n    OrderedRanges o On \n        a.RN = o.RN - 1\n)\n\nSelect Max(Accum + datediff(Minute, CurStart, CurEnd)) From AccumulateMinutes \n",
    "label": 1
  },
  {
    "text_1": "How to show all the search items from the android database",
    "text_2": "for (CR.moveToFirst(); !CR.isAfterLast(); CR.moveToNext())\n                    {\n                        show_result.setText(\"found\\n\" + \"Group = \" + GROUP + \"\\n Name = \" + NAME + \"\\nDistrict = \" + DISTRICT + \"\\nCity = \" + CITY + \"\\nPhone Number = \" + PHONE_NUM);\n                    }\n",
    "label": 1
  },
  {
    "text_1": "Oracle Constraints",
    "text_2": "SQL> select * from mobile;\n\n MOBILE_ID       FLAG                                                           \n---------- ----------                                                           \n         1          0                                                           \n\nSQL> select * from owner_mobile;\n\n  OWNER_ID  MOBILE_ID                                                           \n---------- ----------                                                           \n         1          1    \n",
    "label": 1
  },
  {
    "text_1": "Query to create a new table to a specific database in SQL?",
    "text_2": "Server.Database.Schema.Object\n",
    "label": 1
  },
  {
    "text_1": "SQL requiring self join and ranking",
    "text_2": "    SEASON MATCHDATE HOMETEAM                  AWAYTEAM                   HOMEGOALS  AWAYGOALS TOTALGOALS\n---------- --------- ------------------------- ------------------------- ---------- ---------- ----------\n      2012 13-MAY-12 Norwich                   Aston Villa                        2          0         30\n",
    "label": 1
  },
  {
    "text_1": "SQL datable query to insert multiple column values",
    "text_2": "CREATE TABLE PhoneNumber\n  (\n     phoneno_id INT IDENTITY(1, 1),\n     emp_id     INT,\n     Phone_Number int,\n     Cell_Number Int,\n     FOREIGN KEY (emp_id) REFERENCES emp(emp_id)\n  ) \n",
    "label": 1
  },
  {
    "text_1": "How to get the data from the database created by another activity/ Fails to update data into database (Android studio,SQLite)",
    "text_2": "UPDATE Code_table SET CODE = 'Hello' WHERE code = 'Hello'\n",
    "label": 1
  },
  {
    "text_1": "How to transform records data into columns",
    "text_2": "select h_company_id, company_nm, \n  mainphone1, phone_cnt1, mainphone2, phone_cnt2\nfrom \n(\n  select h_company_id, company_nm,\n    col+cast(seq as varchar(10)) col,\n    value\n  from \n  (\n    select h_company_id, company_nm, \n      cast(mainphone1 as varchar(15)) mainphone,\n      cast(phone_cnt as varchar(15)) phone_cnt,\n      row_number() over(partition by h_company_id order by mainphone1) seq\n    from yourtable\n  ) d\n  unpivot\n  (\n    value\n    for col in (mainphone, phone_cnt)\n  ) unpiv\n) src\npivot\n(\n  max(value)\n  for col in (mainphone1, phone_cnt1, mainphone2, phone_cnt2)\n) piv;\n",
    "label": 1
  },
  {
    "text_1": "Nested SQL statement (simple)",
    "text_2": "SELECT DISTINCT C.cid\nFROM   customers AS C \n       INNER JOIN \n       orders AS O ON O.cid = C.cid\n       INNER JOIN \n       products AS P ON P.pid = O.pid\nWHERE   P.pid IN ('p01', 'p07')\n",
    "label": 1
  },
  {
    "text_1": "Relational algebra \"grouping\"",
    "text_2": "dept_name_G_{max(salary)}(\n    σ_{ddept_name = idept_name}(\n        ρ_{dept_name/ddept_name}(department) ⨯\n        ρ_{dept_name/idept_name}(instructor)\n    )\n)\n",
    "label": 1
  },
  {
    "text_1": "New type in PL/SQL",
    "text_2": "constructor function rational\n            (n integer, d integer)\n            return self as result\nis     \nbegin\n     if d = 0 then\n         raise_application_error(-20000, 'Denominator cannot be zero!');\n     end if;\n     self.num := n;\n     self.den := d;\nend rational; \n",
    "label": 1
  },
  {
    "text_1": "Shift hours between two dates",
    "text_2": "11:00 to 23:00 23:00 to 11:00\n-------------- --------------\n19             24\n",
    "label": 1
  },
  {
    "text_1": "Liferay portlet non-liferay JNDI data source null",
    "text_2": "<ResourceLink name=\"jdbc/XXX\" global=\"jdbc/XXX\" type=\"javax.sql.DataSource\">\n",
    "label": 1
  },
  {
    "text_1": "Model database to represent constraints",
    "text_2": "create table test.supplied_parts (\n  supplier_name varchar(35) not null \n    references test.suppliers (supplier_name),\n  part_num varchar(15) not null references test.parts (part_num),\n  primary key (supplier_name, part_num)\n);\n\ninsert into test.supplied_parts values\n('Supplier A', 'Part A'),\n('Supplier A', 'Part B'),\n('Supplier A', 'Part C'),\n('Supplier B', 'Part A'),\n('Supplier B', 'Part B');\n",
    "label": 1
  },
  {
    "text_1": "Filling in 'gap rows' using an sql procedure",
    "text_2": "CREATE TABLE `hourlyTable` (\n`ID`  int(11) NOT NULL AUTO_INCREMENT ,\n`Date`  datetime NULL DEFAULT NULL ,\n`value`  int(11) NULL DEFAULT NULL ,\nPRIMARY KEY (`ID`)\n);\n",
    "label": 1
  },
  {
    "text_1": "SQL Query without Temporary Table",
    "text_2": "DECLARE @tmp TABLE \n(\n    srno int identity (1,1) ,\n    orderid int,\n    orderdate datetime,\n    product_code varchar(255),\n    product_name varchar(255),\n    shipping_cost decimal(18,2)\n)\n",
    "label": 1
  },
  {
    "text_1": "MySQL query grouped by contigious foreign key values",
    "text_2": "select \nVendorID,\nSUM(Quantity)\nfrom (\nselect\nt.*,\n@grn := if(@prev != VendorID, @grn + 1, @grn) as grn,\n@prev := VendorID\nfrom\nt\n, (select @grn := 0, @prev := null) var_init\norder by DateReceived\n) sq\nGROUP BY grn\n",
    "label": 1
  },
  {
    "text_1": "MySql Query Joins",
    "text_2": "SELECT month_year.rep_year, month_year.rep_month, bob.salecnt, bob.Tsales, cob.Tgift, cob.TGiftSum, dob.Ttgift, dob.TtGiftSum \nFROM report_date\nLEFT OUTER JOIN\n(\n    SELECT year(x.s_Date) AS rep_year, Month(x.s_Date) AS rep_month, sum(x.book_qty) as salecnt, sum(x.book_qty*x.s_price) as Tsales \n    FROM sale x \n    WHERE x.s_date <= curdate() \n    and x.s_date >'2010-10-31' \n    GROUP BY rep_year, rep_month\n)as bob\nON bob.rep_year = report_date.rep_year\nAND bob.rep_month = report_date.rep_month\nLEFT OUTER JOIN\n(\n    SELECT year(y.s_Date) AS rep_year, Month(y.s_Date) AS rep_month, sum(y.gQty) as Tgift, sum(y.gQty*y.gPrice)as TGiftSum \n    From  gift y \n    WHERE  y.gbooktype =1 \n    and y.gdate <= curdate() \n    and y.gdate>'2010-10-31' \n    GROUP BY rep_year, rep_month\n)as cob\nON cob.rep_year = report_date.rep_year\nAND cob.rep_month = report_date.rep_month\nLEFT OUTER JOIN\n(\n    SELECT year(z.s_Date) AS rep_year, Month(z.s_Date) AS rep_month, sum(z.gQty) as Ttgift, sum(z.gQty*z.gprice)as TtGiftSum \n    From  gift z \n    WHERE z.gbooktype =2 \n    and z.gdate <= curdate() \n    and z.gDate>'2010-10-31' \n    GROUP BY rep_year, rep_month \n)as dob \nON dob.rep_year = report_date.rep_year\nAND dob.rep_month = report_date.rep_month\nWHERE CONCAT(month_year.rep_year, month_year.rep_month) > '201010'\nAND CONCAT(month_year.rep_year, month_year.rep_month) <= DATE_FORMAT(CURDATE(), '%Y%m')\n",
    "label": 1
  },
  {
    "text_1": "Does SQL Server 2012 have a function or other way to convert a varchar column that contains ASCII to plain text?",
    "text_2": "Query\n;WITH CTE AS(\nSELECT CHAR(Split.a.value('.', 'VARCHAR(100)')) Char_Vals\nFROM   (SELECT \n              Cast ('<M>' + Replace(ASCII_Col, ' ', '</M><M>') + '</M>' AS XML) AS Data\n        FROM   @Table) AS A\n       CROSS APPLY Data.nodes ('/M') AS Split(a) \n   )\nSELECT (SELECT  '' + Char_Vals\n         FROM CTE\n         FOR XML PATH(''),TYPE).value('.','NVARCHAR(MAX)')\n",
    "label": 1
  },
  {
    "text_1": "Recursive relationship on a many to many table",
    "text_2": "WITH TEST (IDRoot, IDPARENT, IDCHILD) AS\n(\n\n  SELECT P0.IDPROD, C0.IDParent, C0.IDCHILD\n  FROM PROD AS P0\n  left outer join COMP C0 on C0.IDParent = P0.IDPROD\n  WHERE P0.IDProd not in (select IDChild from COMP)\n\n  UNION ALL\n\n  SELECT T.IDRoot, C1.IDPARENT, C1.IDCHILD\n  FROM COMP AS C1\n  inner join TEST AS T on T.IDCHILD = C1.IDPARENT\n\n)\nSELECT * FROM TEST\n",
    "label": 1
  },
  {
    "text_1": "How to transpose this table in postgresql",
    "text_2": "select\n landslide.lnumber,\n lname,\n max(case when rn=1 then bez_gem end) as bez_gem1,\n max(case when rn=2 then bez_gem end) as bez_gem2,\n max(case when rn=3 then bez_gem end) as bez_gem3,\n max(case when rn=4 then bez_gem end) as bez_gem4,\n max(case when rn=5 then bez_gem end) as bez_gem5,\n ... up to cnt ...\nfrom(\n  select\n   landslide.lnumber,\n   lname,\n   bez_gem,\n   row_number() over(partition by landslide.lnumber) rn\n  from\n   <<some_data>>\n ) a\ngroup by\n  landslide.lnumber,\n  lname\n",
    "label": 1
  },
  {
    "text_1": "MySQL with union/join and two alias on same column",
    "text_2": "SELECT i.item_name\n     , r.item_version\n     , IFNULL(SUM(IF(r.group_status=1,r.quantity,0)),0) AS `Approved`\n     , IFNULL(SUM(IF(r.group_status=2,r.quantity,0)),0) AS `Not Approved`\n     , IFNULL(SUM(r.quantity),0)                        AS `Total`\n  FROM items i\n  LEFT\n  JOIN requesters r\n    ON r.item_id = i.item_id\n   AND r.group_status IN (1,2)\n   AND r.requested_date >= ?\n   AND r.requested_date <= ?\n GROUP\n    BY i.item_name\n     , r.item_version\n",
    "label": 1
  },
  {
    "text_1": "how to limit a sql integer query result to <=1",
    "text_2": "select LEAST(1,\n               ((select \"V01\" from sports where \"UID\" = '1') * 1.0 ) / \n               (select \"V01\" from master where \"BALL\" = 'REQUIREMENT')\n       );\n",
    "label": 1
  },
  {
    "text_1": "Fetching entries by hours from MySQL",
    "text_2": "SELECT  DATE_ADD(date(t.date_of_post), INTERVAL hour(t.date_of_post)  HOUR)  AS dateTime,\n       count(*) as entries\nFROM `soc_stat` t\nWHERE t.date_of_post > DATE_SUB(CURDATE(), INTERVAL 1 DAY)\nGROUP BY date(t.date_of_post), hour(t.date_of_post)\n",
    "label": 1
  },
  {
    "text_1": "Custom SERIAL / autoincrement per group of values",
    "text_2": "CREATE TRIGGER trg_category_increment \n  BEFORE INSERT ON article \n  FOR EACH ROW EXECUTE PROCEDURE category_increment()\n",
    "label": 1
  },
  {
    "text_1": "Oracle SQL: Joining another table with one missing tuple",
    "text_2": "select *\n  from order_information oi\n   left join mass_decode md \n     on oi.color_cd = md.cd\nwhere md.key = 'COLOR_CD' or md.key is null;\n",
    "label": 1
  },
  {
    "text_1": "Separate one data column into two",
    "text_2": "    byte[] empty = new byte[] { };\n    //Outside parameter for the ssisparameter file path\n    //Check for the parameter existance\n    IDTSVariable100 filePathVariable;\n    try\n    {\n        filePathVariable = this.ReadOnlyVariables[\"ParameterName\"];\n    }\n    catch (Exception )\n    {\n\n    }\n    string filePath = filePathVariable.Value.ToString();\n",
    "label": 1
  },
  {
    "text_1": "Compare two columns for difference mark the difference in mysql",
    "text_2": "SELECT c.phone_id, c.phonenumber, \n      (CASE WHEN f.fdnumber IS NULL THEN 'n/a' ELSE 'f' END) followUpStatus\nFROM customer c \nINNER JOIN received_Customer rc on c.phonenumber = rc.rc_phonenumber \nLEFT OUTER JOIN follow_up f on c.phonenumber = f.fdnumber;\n",
    "label": 1
  },
  {
    "text_1": "How does chaining variable assignments work in SQL?",
    "text_2": "DECLARE @Var1 MONEY = 100, @Var2 MONEY = 50 \n\nSELECT @Var1 = @Var2, \n       @Var2 = @Var1 \n\nSELECT  @Var1, @Var2  \n",
    "label": 1
  },
  {
    "text_1": "hierarchy records",
    "text_2": "create or replace type arr_integers as table of integer;\n",
    "label": 1
  },
  {
    "text_1": "Trigger to insert old values",
    "text_2": "SQL> ed\nWrote file afiedt.buf\n\n  1  create table my_tab (\n  2    id number,\n  3    start_date date,\n  4    end_date date,\n  5    no number,\n  6    updated varchar2(1)\n  7* )\nSQL> /\n\nTable created.\n\nSQL> ed\nWrote file afiedt.buf\n\n  1  create table my_hist (\n  2    id number,\n  3    start_date date,\n  4    end_date date,\n  5    no number,\n  6    updated varchar2(1),\n  7    update_date date\n  8* )\nSQL> /\n",
    "label": 1
  },
  {
    "text_1": "Combine two columns and add into one new column",
    "text_2": "SELECT COALESCE(col_a, '') || COALESCE(col_b, '');\n",
    "label": 1
  },
  {
    "text_1": "Finding the row with most common attribute using SQL",
    "text_2": "SELECT TOP 1 *\nFROM YourTable\nORDER BY \n(SELECT COUNT (DISTINCT p) FROM (VALUES(p1),(p2),(p3)) T(p))\n",
    "label": 1
  },
  {
    "text_1": "Mysql Select on row values",
    "text_2": "SELECT\n  user_id,\n  max(case when field_id = 270 then value end) nameOfPerson,\n  max(case when field_id = 354 then value end) cityName\nFROM wp_bp_xprofile_data t\nGROUP BY user_id\nHAVING SUM(\n  (field_id = 270 AND value = 'Gender') +\n  (field_id = 354 AND value = 'City')\n) = 2\n",
    "label": 1
  },
  {
    "text_1": "How to use UPDATE in PostgreSQL with variable table?",
    "text_2": "Dynamic SQL\nCREATE OR REPLACE FUNCTION f_up(_new_id int, _old_id int)\n  RETURNS void AS\n$BODY$\nDECLARE\n    _tbl text[] := '{category1,category2,category3}';\n    t    text;\n\nBEGIN\n\nFOREACH t IN ARRAY _tbl\nLOOP\n    EXECUTE '\n    UPDATE ' || t || '\n    SET    id = $1\n    WHERE  id = $2'\n    USING  _new_id, _old_id;\nEND LOOP;\n\nEND;\n$BODY$ LANGUAGE plpgsql;\n",
    "label": 1
  },
  {
    "text_1": "vb.net - mysql query select record from month to month",
    "text_2": "\nmonthx1= txtbox1.text\nmonthx2 = txtbox2.text\nDim  sqlQuery As new System.Text.StringBuilder\nsqlQuery.Append(\"SELECT * \" & vbCrLf)\nsqlQuery.Append(\"FROM   tablename \" & vbCrLf)\nsqlQuery.Append(\"WHERE  Str_to_date(dateregister, '%d/%m/%Y') BETWEEN \" & vbCrLf)\nsqlQuery.Append(\"       Str_to_date(Concat('01/', \" & vbCrLf)\nsqlQuery.Append(\"                   '\" & monthx1 & \"'), '%d/%m/%Y') AND Last_day( \" & vbCrLf)\nsqlQuery.Append(\"              Str_to_date(Concat('01/', \" & vbCrLf)\nsqlQuery.Append(\"                          '\" & monthx2 & \"'), '%d/%m/%Y')) \")\ncmd = New MySqlCommand(sqlQuery.ToString(), conn)\n",
    "label": 1
  },
  {
    "text_1": "Oracle 10g Select in Query",
    "text_2": "select vin, customer_id, model_id from (\n select vin, customer_id, model_id, \n count( decode(model_id, 'toyota', 1) ) over (partition by customer_id) cnt\n  from car\n)\nwhere cnt > 1\n",
    "label": 1
  },
  {
    "text_1": "android - using SQLite database",
    "text_2": "String username;\ndb.execSQL(\"insert into usernames values ('\"+username+\"')\");\n",
    "label": 1
  },
  {
    "text_1": "Laravel Dynamic model database",
    "text_2": "<?php\nreturn array(\n\n'default' => 'mysql',\n\n'connections' => array(\n\n    # Our primary database connection\n    'mysql' => array(\n        'driver'    => 'mysql',\n        'host'      => 'host1',\n        'database'  => 'database1',\n        'username'  => 'user1',\n        'password'  => 'pass1'\n        'charset'   => 'utf8',\n        'collation' => 'utf8_unicode_ci',\n        'prefix'    => '',\n    ),\n\n    # Our secondary database connection\n    'mysql2' => array(\n        'driver'    => 'mysql',\n        'host'      => 'host2',\n        'database'  => 'database2',\n        'username'  => 'user2',\n        'password'  => 'pass2'\n        'charset'   => 'utf8',\n        'collation' => 'utf8_unicode_ci',\n        'prefix'    => '',\n    ),\n),\n);\n",
    "label": 1
  },
  {
    "text_1": "Recursively sum the nodes of a tree using Postgesql WITH clause",
    "text_2": "select id, (select sum(coalesce(value, 0)) from treeSum) as nodesum\nfrom   node\ninner join some_table on (...)\nwhere  node.id = 'A'\n",
    "label": 1
  },
  {
    "text_1": "Access VBA, unescaped single quotes, Replace(), and null",
    "text_2": "Dim SQL As String\nSQL = \"SELECT * FROM Student \" & _\n      \"WHERE (StudentName \" & CompFld(rstFrom(\"Student\").Value) & \" AND \" & _\n      \"       School \" & CompFld(rstFrom(\"School\").Value) & \") \" & _\n      \"   OR (SSN \" & CompFld(rstFrom(\"Social\").Value) & \") \"\nSet rstDuplicate = CurrentDb.OpenRecordset(SQL)\nIf rstDuplicate.RecordCount = 0 Then\n    'Duplicate was not found\n    rstTo.AddNew\n    ' Add fields to the new table\n    rstTo.Update\nEnd If\n",
    "label": 1
  },
  {
    "text_1": "How to join two tables with one of them not having a primary key and not the same character length",
    "text_2": "SELECT r.domainid, r.dombegin, r.domend, d.ddid \nFROM   domainregion r\nJOIN   dyndomrun d ON r.domainid::varchar(8) = d.ddid \nORDER  BY r.domainid, d.ddid, r.dombegin, r.domend;\n",
    "label": 1
  },
  {
    "text_1": "Translate MySQL join into SQL Server syntax?",
    "text_2": "WITH Data AS\n    (\n     SELECT ROW_NUMBER() OVER (PARTITION BY ID ORDER BY Date DESC) AS Row_Number,\n     ID,\n     AverageValue\n     FROM Table\n    )\n\nSELECT Newest.ID, \nNewest.AverageValue, \n(Newest.AverageValue - Next_Newest.AverageValue) AS AverageValue_Change,\nNewest.Date\n FROM Data Newest\nLEFT OUTER JOIN Data Next_Newest \n ON Newest.Row_Number+1 = Next_Newest.Row_Number\nAND Newest.ID = Next_Newest.ID \n\nWHERE Newest.Row_Number=1\n",
    "label": 1
  },
  {
    "text_1": "Calculate one year expiry date from current date in oracle 11g",
    "text_2": "select decode( to_char(sysdate, 'mmdd'), \n               '0229', \n               (sysdate-1) + interval '1' year, \n               (sysdate + interval '1' year ))\n from dual;\n",
    "label": 1
  },
  {
    "text_1": "Where one or another column exists in a sub select",
    "text_2": " SELECT a, b, c, d \n        FROM someTable WHERE\n        WHERE EXISTS \n          (SELECT NULL \n           FROM otherTable \n           WHERE testA = a OR testB = a \n             OR testA = b OR testB = b) \n",
    "label": 1
  },
  {
    "text_1": "Change column data type in MySQL without losing other metadata (DEFAULT, NOTNULL...)",
    "text_2": "mysql> prepare stmt from @sql;\nQuery OK, 0 rows affected (0.00 sec)\nStatement prepared\n",
    "label": 1
  },
  {
    "text_1": "Select records from a particular date",
    "text_2": "SELECT * FROM TRANSACTIONS where \ndate >= date('2015-11-24 00:00')  \nand date <= date('2015-11-24 23:59') \n",
    "label": 1
  },
  {
    "text_1": "How to select and update referrer payments in this bitcoin faucet?",
    "text_2": "SELECT referrer,\n    FORMAT(SUM(referral_amount),2) total \nFROM TableName\nGROUP BY referrer\nORDER BY SUM(referral_amount) DESC;\n",
    "label": 1
  },
  {
    "text_1": "How to get an average to 3 decimal places",
    "text_2": "select str(((total * 100.0)/ total_days ), 7, 3) as average\n",
    "label": 1
  },
  {
    "text_1": "Rownum cause results to show results in undorder manner",
    "text_2": "insert into users\n  values( 1, 'Elvis' ), ( 2, 'Jackson' ), ( 3, 'Madonna' );\n",
    "label": 1
  },
  {
    "text_1": "MySQL query to dynamic \"Ranking rows\"",
    "text_2": "    ....\n    ) AS Ranking\n    CROSS JOIN (SELECT @curr := null, @prev := null, @rank := 0) InitVars\nWHERE\n  Ranking.regional_id = 1003\n",
    "label": 1
  },
  {
    "text_1": "SQL - check date in column 1 and if it is null, then compare date in column 2 with another row to return the date that is later",
    "text_2": "DECLARE @tbl TABLE(personsID INT\n                  ,traindate DATE\n                  ,expirationdate DATE\n                  ,trainingID INT)\n\nINSERT INTO @tbl VALUES \n  (1,'1/1/2014',null,3)\n ,(1,'2/1/2014',null,3)\n ,(1,'3/1/2014','4/1/2014',3)\n ,(1,'4/1/2014','4/30/2014',4)\n ,(1,'5/1/2014','5/30/2014',4)\n\nSELECT personsID\n      ,trainingID\n      ,CASE WHEN EXISTS(SELECT 1 \n                          FROM @tbl a \n                         WHERE a.personsID=b.personsID \n                           AND a.trainingID =b.trainingID\n                           AND a.expirationdate IS NULL) \n            THEN (SELECT MAX(traindate) \n                          FROM @tbl a \n                         WHERE a.personsID=b.personsID \n                           AND a.trainingID =b.trainingID\n                           AND a.expirationdate IS NULL )             \n            ELSE MAX(traindate) \n       END maxtraindatethatdoesntexpire_option1\n      ,(SELECT TOP 1 \n               traindate \n          FROM @tbl a \n         WHERE a.personsID=b.personsID \n           AND a.trainingID =b.trainingID\n         ORDER BY CASE WHEN a.expirationdate IS NULL THEN 1 ELSE 0 END DESC\n                 ,traindate DESC\n       ) maxtraindatethatdoesntexpire_option2\n      ,CASE WHEN EXISTS(SELECT 1 \n                          FROM @tbl a \n                         WHERE a.personsID=b.personsID \n                          AND a.trainingID =b.trainingID\n                          AND a.expirationdate IS NULL) \n            THEN NULL               \n            ELSE MAX(expirationdate)\n       END expirationdate\nFROM @tbl b\nGROUP BY personsID,trainingID\n",
    "label": 1
  },
  {
    "text_1": "Sqlldr- No terminator found after terminated and enclosed field",
    "text_2": "1|\\a\\ab\\|do not \"clean\" needles|@\n",
    "label": 1
  },
  {
    "text_1": "How can I calculate rank based on highest points and lowest time in SQL server",
    "text_2": "with user_ranked_games as (\n  select user_id,\n         credits,\n         time_played,\n         row_number() over (  partition by user_id \n                              order by credits desc, time_played asc\n                           ) as game_rank\n    from games\n),\nranked_users as (\n  select rank() over (order by g.credits desc, g.time_played asc) as rank,\n         g.user_id,\n         u.alias,\n         g.credits,\n         g.time_played\n    from user_ranked_games g\n    join users u\n      on g.user_id = u.user_id\n   where g.game_rank=1\n)\nselect * from ranked_users where user_id=93\n",
    "label": 1
  },
  {
    "text_1": "Count number of values across multiple columns",
    "text_2": "create table #Category_Section\n(\n    Category varchar(50),\n    SectionValue varchar(50)\n);\n",
    "label": 1
  },
  {
    "text_1": "Cursor creation",
    "text_2": "Rate   Qty   JanOrg (No column name)\n------------------------------------\n  2     3      2       0.120000\n  5     7      2       0.700000\n  7     7      2       0.980000\n",
    "label": 1
  },
  {
    "text_1": "Postgis reorder mixed up linestring chunks / max_segment_length(linestring)?",
    "text_2": "CREATE OR REPLACE FUNCTION max_distance_in_linestring(line geometry) RETURNS float as $BODY$\nDECLARE\n    i integer;\n    n integer;\n    d float;\n    m float;\nBEGIN\n    d := 0;\n    n := ST_NPoints(line);\n    i := 2;\n    LOOP\n        EXIT WHEN i >= n;\n        m := ST_Distance(ST_PointN(line,i-1),ST_PointN(line,i));\n        -- use for lon,lats:\n        -- m := ST_Distance(ST_PointN(line,i-1)::geography,ST_PointN(line,i)::geography);\n        IF m > d THEN\n            d := m;\n        END IF;\n        i := i + 1;\n    END LOOP;\n    RETURN d;\nEND;\n$BODY$\nLANGUAGE plpgsql;\n\nSELECT max_distance_in_linestring('LINESTRING(0 0, 1 1, 2 2)'::geometry);\nSELECT max_distance_in_linestring('LINESTRING(0 0, 4 3, 2 2)'::geometry);\n",
    "label": 1
  },
  {
    "text_1": "How to map the 2 different record set one by one?",
    "text_2": "select a.id, b.id2\nfrom\n(\n  select id, row_number() over(order by id) rn\n  from\n  (\n    select distinct id\n    from a\n  ) a\n) a\nfull outer join\n(\n  select id2, row_number() over(order by id2) rn\n  from b\n) b\n  on a.rn = b.rn;\n",
    "label": 1
  },
  {
    "text_1": "Get all rows with a matching field in a different row in the same table",
    "text_2": "select userID\nfrom your_table\nwhere website in ('website.com', 'foo.com')\ngroup by userID\nhaving count(distinct website) = 2\n",
    "label": 1
  },
  {
    "text_1": "How to implement Temporal Upward Compatibility in MySQL?",
    "text_2": "UPDATE legacy SET attribute = 'A' WHERE id = 1;\nSELECT * FROM legacy;\nSELECT * FROM temporal;\n",
    "label": 1
  },
  {
    "text_1": "How to get the count of number of items in one table that are in another",
    "text_2": "DECLARE @TABLEA TABLE (ID INT,Code VARCHAR(5))\nINSERT INTO @TABLEA VALUES\n(1,'A1'),(1,'A2'),(1,'A3'),(2,'B1'),(2,'B2'),\n(2,'B3'),(3,'C1'),(3,'C2'),(3,'C3')\n\nDECLARE @TABLEB TABLE (Code VARCHAR(5))\nINSERT INTO @TABLEB VALUES\n('A2'),('A3'),('B1'),('C1'),\n('C2'),('C3')\n",
    "label": 1
  },
  {
    "text_1": "how to write the sql query for this condition?",
    "text_2": "SELECT COUNT(*)\nFROM\n (\n   SELECT student_id \n   FROM Table\n   GROUP BY student_id\n   HAVING MAX(grade_id) = MIN(grade_id) -- only one grade\n      AND MIN(grade_id) = 1\n ) AS dt\n",
    "label": 1
  },
  {
    "text_1": "MySql create few table with the same structure",
    "text_2": "CREATE TABLE tb1\n(\n    id int not null auto_increment,\n    ...,\n    primary key (id)\n);\nCREATE TABLE tb2 AS SELECT * FROM tb1 WHERE 1=2;\n",
    "label": 1
  },
  {
    "text_1": "Get all tables creation scripts from Oracle database",
    "text_2": "folder = \"Folder_name\"\nconnStr=\"<Your connection string here>\"\nif fetchFromDB=true then\n    set c=CreateObject(\"ADODB.Connection\")\n    c.ConnectionString=connStr\n    c.Open\n\n    set r=CreateObject(\"ADODB.recordset\")\n\n    sql=\"SELECT OBJECT_TYPE, OBJECT_NAME, DBMS_METADATA.GET_DDL(OBJECT_TYPE,OBJECT_NAME) DEFINITION FROM DBA_OBJECTS WHERE OWNER='<OWNER_NAME_HERE>' AND OBJECT_TYPE IN ('FUNCTION', 'PACKAGE', 'PROCEDURE', 'SEQUENCE', 'TABLE', 'TRIGGER', 'VIEW') ORDER BY OBJECT_TYPE, OBJECT_NAME\"\n    r.open sql,c,3,1\n    dim fs,f\n    set fs=CreateObject(\"Scripting.FileSystemObject\")\n    do until r.EOF\n        set f=fs.OpenTextFile(folder & \"\\\\\" & r(\"OBJECT_TYPE\") & \"_\" & r(\"OBJECT_NAME\") & \".sql\",8,true)\n        f.WriteLine r(\"DEFINITION\")\n        r.MoveNext\n        f.close\n    loop\n    r.close\nend if\n",
    "label": 1
  },
  {
    "text_1": "Oracle getting all the records mentioned in 'IN' Clause",
    "text_2": "with frontend_values as (\n  select '00'            cptcode from dual union all\n  select '70010 - 76499' cptcode from dual union all\n  select '00400 - 00479' cptcode from dual union all\n  select '00100 - 00228' cptcode from dual union all\n  select '00100 - 00228' cptcode from dual union all\n  select '00400 - 00479' cptcode from dual union all\n  select '70010 - 76499' cptcode from dual union all\n  select '01670'         cptcode from dual union all\n  select '00'            cptcode from dual union all \n  select '00'            cptcode from dual\n)\nSELECT  \n  c.id, c.cptcode, c.cptname, c.patorder, c.ubcode, p.cptprice, u.description\nFROM \n  mstcpt                                   c, \n  (\n    select * from mstcptprice  \n    where hospitalid = 1034 \n          and \n          transactionby ='uhc@viamd.com'\n  )                                        p ,\n  (SELECT * FROM mstub04)                  u ,\n  frontend_values                          v \nWHERE \n  c.cptcode = v.cptcode\n  and \n  c.cptcode = p.cptcode(+)\n  and \n  c.ubcode = u.code(+)\n",
    "label": 1
  },
  {
    "text_1": "MYSQL select birthday based on age",
    "text_2": "WHERE birthday <= now() - INTERVAL 25 YEAR;\n",
    "label": 1
  },
  {
    "text_1": "Don't drop rows on a coldfusion query of queries join",
    "text_2": "<cfquery name=\"joinQuery\" dbtype=\"query\" >\n    SELECT *\n    FROM   query2\n    WHERE  1 = 0  -- get the table structure but zero rows.\n</cfquery>\n\n<!--- Add a row of NULL values --->    \n<cfset QueryAddRow(joinQuery) />\n\n<cfquery name=\"GetJoinedData\" dbtype=\"query\">\n  SELECT *\n  FROM   query1, query2\n  WHERE  query1.foo = query2.foo\n  UNION\n  SELECT *\n  FROM   query1, joinQuery\n  WHERE  query1.foo NOT IN (#QuotedValueList(query2.foo)#)\n</cfquery>\n",
    "label": 1
  },
  {
    "text_1": "When or Why to use a \"SET DEFINE OFF\" in Oracle Database",
    "text_2": "SQL> insert into customers (customer_name) values ('Marks & Spencers Ltd');\nEnter value for spencers: \nold   1: insert into customers (customer_name) values ('Marks & Spencers Ltd')\nnew   1: insert into customers (customer_name) values ('Marks  Ltd')\n\n1 row created.\n\nSQL> select customer_name from customers;\n\nCUSTOMER_NAME\n------------------------------\nMarks  Ltd\n",
    "label": 1
  },
  {
    "text_1": "SQL Server Foreign Key still not trusted after CHECK CHECK",
    "text_2": "CREATE TABLE val(id INT PRIMARY KEY, name VARCHAR(100));\n\nCREATE TABLE tab(id INT IDENTITY(1,1) PRIMARY KEY, \n                 val_id INT);\nGO\n\nALTER TABLE tab WITH NOCHECK \nADD CONSTRAINT fk_val FOREIGN KEY (val_id) REFERENCES val(Id) NOT FOR REPLICATION;\n\nALTER TABLE tab NOCHECK CONSTRAINT fk_val;\nGO\n\n\n-- Insert Data\nINSERT INTO tab(val_id)\nVALUES (10),(20);\nGO\n\nINSERT INTO val(id)\nVALUES(10),(20);\n\n-- check data\nALTER TABLE tab WITH CHECK CHECK CONSTRAINT fk_val;\n\n-- check is_trusted\nSELECT name, is_not_trusted, is_not_for_replication\nFROM   sys.foreign_keys\nWHERE is_not_trusted = 1;\n",
    "label": 1
  },
  {
    "text_1": "SQL: insert records is not in order",
    "text_2": "UPDATE Customers SET Parking_Cost = p.Parking_Cost\nFROM Customers c INNER JOIN Parking p ON c.Parking_ID = p.Parking_ID \nWHERE c.Parking_ID = 1\n",
    "label": 1
  },
  {
    "text_1": "How to convert Epoch time to date?",
    "text_2": "08-JUL-11 08.00.03.000000000 AM\n",
    "label": 1
  },
  {
    "text_1": "Replace Data With Key on 2 table in SQL Server",
    "text_2": "select * from table2\nunion all\nselect * from table1 t1\nwhere not exists (select 1 from table2 t2\n                  where t2.code = t1.code)\n",
    "label": 1
  },
  {
    "text_1": "User-sortable records",
    "text_2": "SELECT  w.*\nFROM    (\n        SELECT  widget_id, level AS widget_order\n        FROM    widget_orders\n        START WITH\n                user_id = :myuser\n                AND prev_widget_id = 0\n        CONNECT BY\n                user_id = PRIOR user_id\n                AND prev_widget_id = PRIOR widget_id\n        ) o\nJOIN    widgets w\nON      w.widget_id = o.widget_id\nORDER BY\n        widget_order\n",
    "label": 1
  },
  {
    "text_1": "How to append th, st, nd and rd for dates of the day in rdlc report?",
    "text_2": "Public Shared Function AddOrdinal(num As Integer) As String\n    If num <= 0 Then\n        Return num.ToString()\n    End If\n    Select Case num Mod 100\n        Case 11, 12, 13\n            Return num & \"th\"\n    End Select\n    Select Case num Mod 10\n        Case 1\n            Return num & \"st\"\n        Case 2\n            Return num & \"nd\"\n        Case 3\n            Return num & \"rd\"\n        Case Else\n            Return num & \"th\"\n    End Select\nEnd Function\n",
    "label": 1
  },
  {
    "text_1": "Updating a number of row with a single SQL query in Oracle DBMS",
    "text_2": "UPDATE A\n   SET zip= '355'\n   WHERE id in ('1','4');\n",
    "label": 1
  },
  {
    "text_1": "Insert from multiple related tables during database migrating",
    "text_2": "SET IDENTITY_INSERT ON\n",
    "label": 1
  },
  {
    "text_1": "SQL - find next and previous rows given a particular WHERE clause",
    "text_2": "SELECT * FROM `bb_topics` \n      WHERE `topic_id` = \n      (select min(`topic_id`) FROM `bb_topics` where `topic_id` > 123\n                     and `topic_poster` = 5)\n      or `topic_id` = \n      (select max(`topic_id`) FROM `bb_topics` where `topic_id` < 123\n                        and `topic_poster` = 5)\n",
    "label": 1
  },
  {
    "text_1": "Is there any way to set the default value of all columns in a mysql database at a time?",
    "text_2": "UPDATE table_name\n    SET column_name = new_value \n    WHERE column_name = old_value;\n",
    "label": 1
  },
  {
    "text_1": "How to override precedence in SQL*Plus?",
    "text_2": "SELECT *\nFROM ((select * from tab1 minus select * from tab2)\n      UNION\n      (select * from tab2 minus select * from tab1)) AS symdiff\n",
    "label": 1
  },
  {
    "text_1": "Mysql group and sum based on condition",
    "text_2": "select m.code, sum(total)\nfrom mytable m\ninner join (select distinct code from mytable where `to_update`=1) t on m.code=t.code\ngroup by m.code\n",
    "label": 1
  },
  {
    "text_1": "How to show the names of non-participants in the last sending quiz in each division?",
    "text_2": "select A.QuizID, a.Username \nfrom UserQuiz a join \n (select max(quizID) quizID from dbo.Quiz where IsSent = 1) b\n  on a.QuizId = b.quizID\n",
    "label": 1
  },
  {
    "text_1": "searching a particular string in the entire database using Sqlite3?",
    "text_2": "private String getColumnName(String key){\n     String columnName=\"\";\n     DataBaseAdapter dba=new DatabaseAdapter(getApplicationContext());\n     dba.open();\n     Cursor cr=dba.fetchAllData();\n     cr.moveToFirst();\n     while(!cr.isAfterLast()){\n            if(key.equals(cr.getString(cr.getColumnIndex(\"name\")))){\n                   columnName=\"name\";\n            }\n            cr.moveToNext();\n     }\n     cr.moveToFirst();\n     while(!cr.isAfterLast()){\n            if(key.equals(cr.getString(cr.getColumnIndex(\"email\")))){\n                   columnName=\"email\";\n            }\n            cr.moveToNext();\n     }\n     cr.moveToFirst();\n     while(!cr.isAfterLast()){\n            if(key.equals(cr.getString(cr.getColumnIndex(\"address\")))){\n                   columnName=\"address\";\n            }\n            cr.moveToNext();\n     }\n     cr.moveToFirst();\n     while(!cr.isAfterLast()){\n            if(key.equals(cr.getString(cr.getColumnIndex(\"designation\")))){\n                   columnName=\"designation\";\n            }\n            cr.moveToNext();\n      }\n       return columnName;\n    }\n",
    "label": 1
  },
  {
    "text_1": "SQL join on different select count result-tables",
    "text_2": "   select \n      a.location, a.amount_A,\n      b.number_x,\n      c.errors\n    from (\n      select_satement_A\n    ) as a\n    left join (\n      select_satement_B\n    ) as b on a.location = b.location\n    left join (\n      select_satement_C\n    ) as c on a.location = c.location\n",
    "label": 1
  },
  {
    "text_1": "Row Count in Result using CTE",
    "text_2": "  select Id,\n         Type,\n         Description, \n         count(*) over () as \"RowCount\"\n  from wo\n",
    "label": 1
  },
  {
    "text_1": "ms-access: specifying formatting for a column",
    "text_2": "SELECT\n    some_text, \n    \",\" & some_text & \",\" AS with_commas, \n    IIf(Not IsNull(some_text), \",\" & some_text & \",\", Null) AS with_commas_ignore_nulls\nFROM YourTable;\n",
    "label": 1
  },
  {
    "text_1": "SQL Server: How to get the value of a XML element specifying an attribute?",
    "text_2": "declare @prm VARCHAR(10)='en_US';\nselect @X.value('(/translations/value[@lang=sql:variable(\"@prm\")])[1]','varchar(max)');\n",
    "label": 1
  },
  {
    "text_1": "How to make ORDER SIBLINGS BY?",
    "text_2": "For any number of levels:\nWITH RECURSIVE t AS (\n   SELECT ARRAY[emp_id] AS hierarchy\n         ,emp_id\n         ,manager_id\n         ,emp_name\n   FROM   recursive_test\n   WHERE  manager_id = 0\n\n   UNION ALL\n   SELECT t.hierarchy || a.emp_id\n         ,a.emp_id\n         ,a.manager_id\n         ,a.emp_name\n   FROM   recursive_test a\n   JOIN   t ON a.manager_id = t.emp_id\n   )\nSELECT emp_id\n      ,manager_id\n      ,emp_name\nFROM   t\nORDER  BY hierarchy;\n",
    "label": 1
  },
  {
    "text_1": "Looking for missing entries",
    "text_2": "SELECT DISTINCT [Unique Ref]\nFROM TABLE_NAME\nEXCEPT\nSELECT DISTINCT [Unique Ref]\nFROM TABLE_NAME\nWHERE USERNAME == 'DAVIDMI09'\n",
    "label": 1
  },
  {
    "text_1": "sql server - adding two columns together from sub queries",
    "text_2": "SELECT A.ID, A.field, \n    (select CONVERT(INT, vchr_Number)\n     from tbl_two B\n     where B.int_ParentId = A.ID) +\n    (select CONVERT(INT, vchr_Number)\n     from tbl_three C\n     where C.int_ParentId = A.ID) as 'SumOfNumbers',\nFrom tbl_Something A\n",
    "label": 1
  },
  {
    "text_1": "how to generate unique sequence number -sql",
    "text_2": "UPDATE `table` SET `num` = `num` + 1 WHERE `num` >= 2\n",
    "label": 1
  },
  {
    "text_1": "Add column with default value 0.0",
    "text_2": "CREATE TABLE #temp1(a int, b int)\nINSERT #temp1 values(1,1),(2,2)\n\nDECLARE @var numeric(10,1) set @var = 0.0\n SELECT a,\n        b,\n        @var c\n INTO #tmp2\n FROM #temp1\n\n SELECT * from #tmp2\n",
    "label": 1
  },
  {
    "text_1": "Difference between JSON and SQL",
    "text_2": "select * from cars where colour = 'green'\nupdate cars set colour='blue' where colour='red'\n",
    "label": 1
  },
  {
    "text_1": "MongoDB (Mgo v2) Projection returns parent struct",
    "text_2": "db.buildings.aggregate([\n{\n    \"$match\":\n    {\n        \"_id\": buildingID,\n        \"p\": {\n             \"$elemMatch\": {\"l\": fNum}\n         }\n    }\n},\n{\n    \"$project\":\n    {\n        nrOfFloors: {\n            \"$size\": \"$p\"\n        }\n    }\n}])\n",
    "label": 1
  },
  {
    "text_1": "order by multiple columns",
    "text_2": "with grp(Name,ImpFile,TimeGroup,ImpTime) as \n(\n  select cast(null as varchar(5)), ImpFile, max(ImpTime) as TimeGroup, \n         max(ImpTime) as ImpTime\n  from people \n  group by ImpFile  \n\n  union all\n\n  select p.Name, p.ImpFile, ldr.TimeGroup, p.ImpTime\n  from people p\n  inner join grp ldr -- leader\n  on ldr.name is null and ldr.ImpFile = p.ImpFile\n)\nselect Name, ImpFile, ImpTime\nfrom grp \norder by TimeGroup desc, \n\n  case \n  when Name is null then 2 -- leader last\n  else 1 -- followers first\n  end,\n\n  Name\n",
    "label": 1
  },
  {
    "text_1": "Incorporate DST into SQL script",
    "text_2": "('2014-01-01 00:00:00', '2014-03-09 02:00:00', 0)\n('2014-03-09 02:00:00', '2014-11-02 03:00:00', 60)\n('2014-11-02 03:00:00', '2015-01-01 00:00:00', 0)\n",
    "label": 1
  },
  {
    "text_1": "Maximum number of IN clauses to use index in MySQL",
    "text_2": "           id: 1\n  select_type: SIMPLE\n        table: t\n         type: ref\npossible_keys: a\n          key: a\n      key_len: 7              <--- two columns' length\n          ref: const,const    <--- only two values for index columns `a` and `b`\n         rows: 4\n        Extra: Using where; Using index\n",
    "label": 1
  },
  {
    "text_1": "Implementing a \"Both, Either-or, but Not Null\" Requirement in a Database",
    "text_2": "INSERT INTO Instruction (InstructionId, TextId) VALUES (1, 1);\nINSERT INTO Text (InstructionId) VALUES (1);\nCOMMIT;\n",
    "label": 1
  },
  {
    "text_1": "The most efficient way to check a matrix offset",
    "text_2": "SELECT word\n  FROM mytable\n WHERE (rounded = false AND height = 2 AND backness = 3)\nUNION\nSELECT word\n  FROM mytable\n WHERE (rounded = true  AND height = 2 AND backness = 1)\nUNION\nSELECT word\n  FROM mytable\n WHERE (rounded = true  AND height = 2 AND backness = 3)\nUNION\nSELECT word\n  FROM mytable\n WHERE (rounded = true  AND height = 1 AND backness = 2)\nUNION\nSELECT word\n  FROM mytable\n WHERE (rounded = true  AND height = 3 AND backness = 2)\n",
    "label": 1
  },
  {
    "text_1": "how to use join that pull comma seperated values from MySQL",
    "text_2": "| NAME | CUISINE_ID | GROUP_CONCAT(C.CUISINE_NAME) |\n|------|------------|------------------------------|\n|  abc |    1,2,6,8 |    Nepali,Indian,Thai,Korean |\n",
    "label": 1
  },
  {
    "text_1": "SQL get number of columns in a particular row having a particular value",
    "text_2": "SELECT u1, u1paid, u2, u2paid, u3, u3pai, u4, u4paid, u5, u5paid\n       , CASE u1paid WHEN 'Yes' THEN 1 ELSE 0 END\n       + CASE u2paid WHEN 'Yes' THEN 1 ELSE 0 END\n       + CASE u3paid WHEN 'Yes' THEN 1 ELSE 0 END\n       + CASE u4paid WHEN 'Yes' THEN 1 ELSE 0 END\n       + CASE u5paid WHEN 'Yes' THEN 1 ELSE 0 END\n       AS no_of_paid_columns\n  FROM trackbill\n",
    "label": 1
  },
  {
    "text_1": "How to UNPIVOT to split columns into rows?",
    "text_2": "OPTION (FORCE ORDER)\n",
    "label": 1
  },
  {
    "text_1": "Oracle auto add current date",
    "text_2": "CREATE OR REPLACE TRIGGER trg_products\n  BEFORE INSERT OR UPDATE ON products\n  FOR EACH ROW\nBEGIN\n  :new.dt := sysdate;\nEND;\n",
    "label": 1
  },
  {
    "text_1": "user-Defined SQL Function gives error \"Invalid column name 'Employee_Name'.\"",
    "text_2": "SELECT FirstName,\n       LastName,\n       PhoneNumber\n  FROM Employees\n WHERE EmployeeId = ...\n",
    "label": 1
  },
  {
    "text_1": "How do I use CTE for this",
    "text_2": "advId   name        CountOfmanager\n1       King        9\n2       Maceij      4\n3       Los         2\n4       Los1        0\n5       Griff       0\n6       SA          2\n7       CASSANDRA   0\n8       Jason       0\n9       Smith       0\n10      Akee        1\n11      Manasa      0\n12      Akee        0\n13      Manasa      0\n",
    "label": 1
  },
  {
    "text_1": "Converting id's in int[] elements in another table Postgres",
    "text_2": "select dt.id, array_agg(point(p.x, p.y))\nfrom pointtable p\njoin (\n    select id, unnest(points) as p\n    from linetable\n) as dt on p.id = dt.p\ngroup by dt.id\norder by dt.id;\n",
    "label": 1
  },
  {
    "text_1": "Delete one row from same rows",
    "text_2": "DELETE T\nFROM (\n    SELECT TOP 1 *\n    FROM YourTable \n    WHERE [first]=1 and [second]=2\n) T;\n",
    "label": 1
  },
  {
    "text_1": "How to skip a matched result of a subquery?",
    "text_2": "select * from tabName A\nwhere A.ArtId !=\n(\n    select min(ArtId)\n    from tabName B\n    group by Title\n    having A.Title=B.Title\n);\n",
    "label": 1
  },
  {
    "text_1": "\"Unfavourable\" execution plan with Postgres and PostGIS",
    "text_2": "UPDATE sgclasstab_id68 SET att_1496 = (\n    SELECT sgclasstab_id67.att_1115 \n    FROM sgclasstab_id67, sggeofacelist, sggeopointlist \n    WHERE ((sgclasstab_id67.att_1114=sggeofacelist.oid )) \n        AND ((sgclasstab_id68.att_1139=sggeopointlist.oid )) \n        AND (ST_Intersects(sggeofacelist.feature,(sggeopointlist.feature))) \n        AND (sggeofacelist.oid=sgclasstab_id67.att_1114)  \n)\n",
    "label": 1
  },
  {
    "text_1": "How to check which database exists and use it in the function?",
    "text_2": "DECLARE @dbName VARCHAR(20)\nSET @dbName = CASE WHEN DB_ID('DB1') IS NULL THEN 'DB2' ELSE 'DB1' END;\n\nIF @dbName = 'DB1' \n    SELECT * FROM DB1.dbo.testtable;\nELSE\n    SELECT * FROM DB2.dbo.testtable;\n",
    "label": 1
  },
  {
    "text_1": "Count one-to-one relationship in grails",
    "text_2": "HQL\ndef result = VoiceUser.executeQuery('SELECT COUNT(user) FROM VoiceUser AS user INNER JOIN user.licenceType AS licence WHERE licence.code = :code', [code: 'A'])[0]\n",
    "label": 1
  },
  {
    "text_1": "SQL Stored procedure, Output rows as columns for summary",
    "text_2": "EXEC(@SQL)\n -- OR\nEXEC SP_EXECUTESQL(@SQL)\n",
    "label": 1
  },
  {
    "text_1": "Update on game statistic. SQL",
    "text_2": "UPDATE game_stats gs\nSET gs.data1 = '0', gs.data2= '0', gs.data3= '0'\nWHERE exists\n(SELECT u.id\nFROM users u \nWHERE u.is_valid='true' AND\nu.id = gs.userid)\n",
    "label": 1
  },
  {
    "text_1": "Get information from 2 tables",
    "text_2": "select distinct t2.location\nfrom table2 t2\ninner join table1 t1 \n  on t2.location = t1.location\nwhere \n  t1.organization = '001'\n  and t2.userid = 'User1' \n",
    "label": 1
  },
  {
    "text_1": "giving priority to values in an SQL stmt",
    "text_2": "ORDER BY CASE t.Category WHEN 'algorithm'  THEN 0\n                         WHEN 'k-means'    THEN 1\n                         WHEN 'statistics' THEN 2\n                         WHEN 'clustering' THEN 3\n                         WHEN 'science'    THEN 4 END\n",
    "label": 1
  },
  {
    "text_1": "Creation of all possible combinations with SQL Server",
    "text_2": "DECLARE @Item TABLE (ItemId int PRIMARY KEY, Name varchar(50));\n\nDECLARE @Item_SubItem TABLE (ItemId int, SubitemId int, \n  PRIMARY KEY (ItemId,SubItemId));\n\nDECLARE @SubItem TABLE (SubitemId int PRIMARY KEY, Name varchar(50));\n",
    "label": 1
  },
  {
    "text_1": "Is it possible to concatenate column values into a string using CTE?",
    "text_2": "SELECT myId,\n       STUFF((SELECT ',' + rtrim(convert(char(50),Name))\n        FROM   namestable b\n        WHERE  a.myId = b.myId\n        FOR XML PATH('')),1,1,'') Names\nFROM   namestable a\nGROUP BY myId\n",
    "label": 1
  },
  {
    "text_1": "Update 1 column based on changing values in another column",
    "text_2": ";WITH CTE AS (\nSELECT *,\nROW_NUMBER()OVER(ORDER BY ID) rnka\nFROM Table1)\n\n\nUPDATE t\nSET [Start/End] = CASE WHEN t1.ID is null or t2.ID is null\n     THEN 1\n     WHEN t.RecordID <> t1.RecordID OR t.RecordID <> t2.RecordID\n     THEN 1 END \nFROM CTE t\nLEFT JOIN CTE t1\n  ON t1.rnka = t.rnka - 1\nLEFT JOIN CTE t2\n  ON t2.rnka = t.rnka + 1\n",
    "label": 1
  },
  {
    "text_1": "Comparing grouped data",
    "text_2": "select groupId, checksum_agg(name)\nfrom #Grouping2\ngroup by groupId;\n",
    "label": 1
  },
  {
    "text_1": "MySQL ALTER column to last position in table",
    "text_2": "ALTER TABLE test MODIFY first_history_column AFTER dummy\nALTER TABLE test DROP dummy\n",
    "label": 1
  },
  {
    "text_1": "How to arrange date/time into AM in/out and PM in/out",
    "text_2": "TRANSFORM Min(tm.Date) AS MinOfDate\nSELECT Format([Date],\"dd/mm/yyyy\") AS dt, tm.EmpID\nFROM tm\nGROUP BY Format([Date],\"dd/mm/yyyy\"), tm.EmpID\nPIVOT tm.InOutMode;\n",
    "label": 1
  },
  {
    "text_1": "Updating a column based on another column",
    "text_2": "CREATE OR REPLACE VIEW type_vw AS (\n  SELECT\n      ID, \n      CASE\n        WHEN Food = 'Y' THEN 'Food'\n        WHEN Drink = 'Y' THEN 'Drink'\n        WHEN Animal = 'Y' THEN 'Animal'\n      END as Type\n  FROM tbl\n);\n",
    "label": 1
  },
  {
    "text_1": "SQL Comparison of Dates",
    "text_2": "1. FROM\n2. ON\n3. OUTER\n4. WHERE\n5. GROUP BY\n6. CUBE | ROLLUP\n7. HAVING\n8. SELECT\n9. DISTINCT\n10. ORDER BY\n11. TOP\n",
    "label": 1
  },
  {
    "text_1": "Issuing a lock and timeout value on a Oracle database table",
    "text_2": "create table app_lock ( application_name varchar2(100) not null);\n\ninsert into app_lock values ('myapp');\n\ncommit;\n\nselect application_name from app_lock where application_name = 'myapp' for update;\n",
    "label": 1
  },
  {
    "text_1": "SQL - Add column values depending on id",
    "text_2": "CREATE TABLE #mytable (id BIGINT, id_depend BIGINT, Item VARCHAR(50), [values] DECIMAL(23,10))\n\nINSERT INTO #mytable (id,id_depend,Item,[values])VALUES(685690,0,'1',216),(685690,0,'2',108)\n    ,(691282,685690,'1',-216),(691282,685690,'2',-108)\n    ,(691297,685690,'1',324),(691297,685690,'2',162)\n    ,(691371,0,'1',100),(691371,0,'2',200),(691371,0,'3',300)\n\nSELECT m.id,m.id_depend,m.Item,m.[values] [Current Values]\nFROM #mytable m\n\nSELECT m.id,m.id_depend,m.Item,m.[values] [Current Values]\n    ,CASE WHEN m.id_depend = 0 AND NOT EXISTS(SELECT 1 FROM #mytable cor WHERE cor.id_depend = m.id)\n        THEN m.[values] \n        ELSE COALESCE((SELECT SUM(mt.[values]) FROM #mytable mt WHERE mt.Item = m.Item AND mt.id < m.id)+m.[values],0) \n     END [Values Required]\nFROM #mytable m\n\nDROP TABLE #mytable\n",
    "label": 1
  },
  {
    "text_1": "How to store user specific data in a database",
    "text_2": "User ID | User Name | Full Name | Email Address\n",
    "label": 1
  },
  {
    "text_1": "INNER JOIN in MySQL",
    "text_2": "SELECT f.*\nFROM FRIENDS f\nLEFT JOIN  ORDERS o\n  ON f.ID = o.friendID\nWHERE o.ID IS NULL;\n",
    "label": 1
  },
  {
    "text_1": "Query always return all the data",
    "text_2": "MySQL> SELECT 1 + 1, '' + '', '1abc' + 1;\n+-------+---------+------------+\n| 1 + 1 | '' + '' | '1abc' + 1 |\n+-------+---------+------------+\n|     2 |       0 |          2 |\n+-------+---------+------------+\n1 row in set, 1 warning (0.00 sec)\n",
    "label": 1
  },
  {
    "text_1": "Best practices re sharing IDbConnection or connection string/factory in your .Net code",
    "text_2": "public void Save()\n{   \n    using (ConnectionManager mrg = ConnectionManager.GetManager(\"SQLConnectionString\")\n    {\n        using (SQLCommand cmd = new SQLCommand)\n        {\n            cmd.connection = mgr.Connection\n            // More ADO Code Here\n        }\n\n        _childObject.Save(); //this child object follows the same pattern with a using ConnectionManager.\n    }\n}\n",
    "label": 1
  },
  {
    "text_1": "What is the best way to give last elements/items of DB table",
    "text_2": "Dim count = ltable.Rows.Count()\nFor i As Integer = count - 4 To count - 1\n    Dim s = ltable.Rows(i)\nNext i\n",
    "label": 1
  },
  {
    "text_1": "Select Database names and extended properties in SQL Server",
    "text_2": "SELECT db.Name, #EP.PropertyName, #EP.PropertyValue\nFROM sys.databases db\nLEFT OUTER JOIN #EP\n    ON db.name = #EP.DatabaseName\n",
    "label": 1
  },
  {
    "text_1": "Return row with the max value of one column per group",
    "text_2": "SELECT DISTINCT\n       id\n      ,first_value(round) OVER (PARTITION BY id ORDER BY round DESC) AS round\n      ,first_value(score) OVER (PARTITION BY id ORDER BY round DESC) AS score\nFROM   SCORES\nWHERE  id IN (1,2,3)\nORDER  BY id;\n",
    "label": 1
  },
  {
    "text_1": "How to insert into a table from another table and from user input?",
    "text_2": "INSERT INTO books (borrower_name, isbn) \nSELECT 'Jane', isbn \n  FROM table_name\n-- WHERE id = ? \n",
    "label": 1
  },
  {
    "text_1": "How are XML and JSON used in conjunction with SQL?",
    "text_2": "var data = []\nwhile (row = fetch_from_database())\n    data.push(row.name)\nvar json = json_encode(data)\nprint json\n",
    "label": 1
  },
  {
    "text_1": "NOT IN Select statement returning 0 values",
    "text_2": "select id, code\nfrom data.test \nwhere id not in (select id from data.test where code = 23 and id is not null) and\n      id in ('abc', 'def', 'ghi', 'jkl', 'mno', 'pqr') \n",
    "label": 1
  },
  {
    "text_1": "How to change the length of a column in a SQL Server table via T-SQL",
    "text_2": "ALTER TABLE YourTable\nALTER COLUMN Col1 VARCHAR(20)\n",
    "label": 1
  },
  {
    "text_1": "Is it possible to add more than one foreign key to one field in table",
    "text_2": "SELECT *\nFROM Products P LEFT JOIN AdditionalFields A ON P.AdditionalFields_ID = A.AdditionalFields_ID\n",
    "label": 1
  },
  {
    "text_1": "Oracle NUMBER to TIME",
    "text_2": "CREATE TABLE times ( time ) AS\n          SELECT  9    FROM DUAL\nUNION ALL SELECT  1.2  FROM DUAL\nUNION ALL SELECT 15.53 FROM DUAL\nUNION ALL SELECT 24.62 FROM DUAL;\n",
    "label": 1
  },
  {
    "text_1": "Cant fetch records that have null values in cloumns",
    "text_2": "SELECT *\nFROM\nSTUDENT S,COURSE C\nWHERE\nS.COURSE_ID=C.COURSE_ID\n",
    "label": 1
  },
  {
    "text_1": "SQL Nested Select - Access",
    "text_2": "PIVOT ([SalesReg Union].[Month]) IN ('Jan', 'Feb', 'Mar')\n",
    "label": 1
  },
  {
    "text_1": "SQL Union query simplification",
    "text_2": "SELECT\nt.id,\nb.id,\nCOUNT(b.id),\nt.threshold\n\nFROM\ncurrent_stock c\ninner join article a on a.id = c.article_id\ninner join delivery d on d.id = a.delivery_id\ninner join product p on p.product_code = a.product_product_code\ninner join brand b on b.id = p.brand_id\ninner join threshold t on t.brand_id = b.id\n\nWHERE\nd.store_id = 'E260'\n\nGROUP BY b.id\nHAVING COUNT(b.id) <= t.threshold\n",
    "label": 1
  },
  {
    "text_1": "SQL query to copy column contingent on contents",
    "text_2": "INSERT INTO my_table (Date, Name, Age, City, Status)\nSELECT DATE_ADD (Date, INTERVAL 7 DAY), Name, Age, City, \n       CASE WHEN Status IN ('Hold', 'Pending') THEN 'Needs Examining'\n       ELSE '' END AS Status\nFROM my_table\n",
    "label": 1
  },
  {
    "text_1": "copy a SQL Server 2008 database and rename it",
    "text_2": "USE [master];\nGO\nIF DB_ID('DB-B') IS NOT NULL\nBEGIN\n  ALTER DATABASE [DB-B] SET SINGLE_USER WITH ROLLBACK IMMEDIATE;\n  DROP DATABASE [DB-B];\nEND\nGO\n",
    "label": 1
  },
  {
    "text_1": "Access/SQL Union",
    "text_2": "SELECT  Campaign, \n        Prem1Item, \n        Prem1Qty, \n        Prem1Drop, \n        Prem2Item, \n        Prem2Qty, \n        Prem2Drop, \n        Prem3Item, \n        Prem3Qty, \n        Prem3Drop, \n        Prem4Item, \n        Prem4Qty,  \n        Prem4Drop, \n        Prem5Item, \n        Prem5Qty, \n        Prem5Drop, \n        Prem10ItemPkging, \n        AckLtr1TypeCode, \n        AckLtr10ItemPkging, \n        ContactID,\n        'N' [Continued]\nFROM    [TU FAR Before VB]\nUNION ALL \nSELECT   Campaign, \n        Prem6Item, \n        Prem6Qty, \n        Prem6Drop, \n        Prem7Item, \n        Prem7Qty, \n        Prem7Drop, \n        Prem8Item, \n        Prem8Qty, \n        Prem8Drop, \n        Prem9Item, \n        Prem9Qty, \n        Prem9Drop, \n        NULL, \n        NULL, \n        NULL, \n        Prem10ItemPkging, \n        NULL, \n        AckLtr10ItemPkging, \n        ContactID,\n        'Y' [Continued]\nFROM    [TU FAR Before VB]\nWHERE   NOT\n        (       Prem6Item IS NULL\n            AND Prem7Item IS NULL\n            AND Prem8Item IS NULL\n            AND Prem9Item IS NULL\n        );\n",
    "label": 1
  },
  {
    "text_1": "Using group by on multiple columns",
    "text_2": "select Subject, Count(*)\nfrom Subject_Selection\ngroup by Subject\n",
    "label": 1
  },
  {
    "text_1": "How do I write this sql query",
    "text_2": "SELECT src.c_id, src.s_fname, c \nFROM (\n    SELECT c.c_id, s.s_fname, count(r.c_id) AS c, p.pos_id\n    FROM results r, candidates c, student s,positioning p, organization o \n    WHERE r.c_id = c.c_id \n    AND c.sid = s.sid \n    AND c.pos_id = p.pos_id \n    AND o.org_id = c.org_id \n    AND o.org_id = 1\n    GROUP BY c.c_id\n) src\nGROUP BY src.pos_id;\n",
    "label": 1
  },
  {
    "text_1": "Data validation in sql",
    "text_2": "StartTimestamp          EndTimestamp\n----------------------- -----------------------\n2011-05-23 10:00:00.000 2011-05-23 13:00:00.000\n2011-05-23 08:00:00.000 2011-05-23 12:00:00.000\n2011-05-23 12:00:00.000 2011-05-23 16:00:00.000\n",
    "label": 1
  },
  {
    "text_1": "How to restrict SQL columns based on id of requester?",
    "text_2": "SELECT column_name \n  FROM ColumnPerms \n WHERE user_or_role = '@manager'\n   AND table = 'Payroll'\n   AND column_name IN ('first_name', 'last_name', 'hire_date', 'base_salary', 'bonus')\n",
    "label": 1
  },
  {
    "text_1": "Autoincrement Id and key problem (MySQL)",
    "text_2": "ALTER TABLE `table` ADD COLUMN `id` INT(11) NOT NULL AUTO_INCREMENT, \nDROP PRIMARY KEY, \nADD PRIMARY KEY (`id`)\n",
    "label": 1
  },
  {
    "text_1": "Optimizing queries based on clustered and non-clustered indexes in SQL?",
    "text_2": "1000 -> 20, 1\n2000 -> 20, 2\n",
    "label": 1
  },
  {
    "text_1": "Insert Bytes array INTO varbinary(max) record",
    "text_2": "RemoteSQLcmd = New SqlCommand(\"INSERT INTO Table(1) Values (newid(), ProductID, @bin_value\", RemoteSQLConn)\nRemoteSQLcmd.Parameters.AddWithValue(@bin_value\", imSource) ;\n",
    "label": 1
  },
  {
    "text_1": "Get cross data of multiple tables in MySQL",
    "text_2": "SELECT *\nFROM customer\nINNER JOIN address\nON customer.street = address.street\n   AND customer.street_number = address.street_number\nINNER JOIN cluster\nON address.cluster = cluster.id\n",
    "label": 1
  },
  {
    "text_1": "How to obtain Local IP Address of PC within Oracle ApEx ",
    "text_2": "select sys_context('userenv','ip_address') \n  from dual;\n",
    "label": 1
  },
  {
    "text_1": "Multiple Formula on PostgreSQL",
    "text_2": "select\n  table_name,\n  2.5*((r-i)/(r+(6*i)-(7.5*n)+1)) as tera,\n  (r-(2*i)-n)/(r+(2*i)-n) as tera2\nfrom\n  (\n  select\n    table_name,\n    sum(case when wavelength between 340 and 345 then reflectance end) as r,\n    sum(case when wavelength between 350 and 355 then reflectance end) as i,\n    sum(case when wavelength between 360 and 365 then reflectance end) as n\n  from\n    (\n      select 'table 1' as table_name, * from test\n      union all\n      select 'table 2', * from test\n      union all\n      select 'table 3', * from test      \n      union all\n      select 'table 4', * from test  \n    ) as all_tables\n  group by\n    table_name\n  ) vars\n",
    "label": 1
  },
  {
    "text_1": "SQL query from flat file",
    "text_2": "declare @t table\n(\n  name varchar(max),\n  email1 varchar(max),\n  email2 varchar(max),\n  email3 varchar(max),\n  email4 varchar(max)\n)\n\ninsert into @t \n values ('name1a','email1a','email2a','email3a','email4a')\ninsert into @t  \n values ('name2b','email1b','email2b','email3b','email4b')\n\n select * from @t\n\nSELECT name, email \nFROM\n(\nSELECT name, email1, email2, email3, email4\nFROM @t) p\nUNPIVOT\n   (email FOR emails IN \n      (email1, email2, email3, email4)\n)AS unpvt\n  \n",
    "label": 1
  },
  {
    "text_1": "How to get the count of distinct values until a time period Impala/SQL?",
    "text_2": "SELECT \"DayC\", COUNT(DISTINCT \"ID\")\nFROM sales\ncross JOIN days \nWHERE \"Day\" <= \"DayC\"\nGROUP BY \"DayC\"\n",
    "label": 1
  },
  {
    "text_1": "This SELECT query takes 180 seconds to finish",
    "text_2": "CREATE TABLE `filler` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  PRIMARY KEY (`id`)\n) \n",
    "label": 1
  },
  {
    "text_1": "Select a specific date for the current year",
    "text_2": "SELECT DATEADD(YEAR,YEAR(GETDATE()) - 2000,'20000531')\n",
    "label": 1
  },
  {
    "text_1": "Adding a padding 0 to a SQL column",
    "text_2": "SELECT RIGHT('00000' + <string>, 5)\n",
    "label": 1
  },
  {
    "text_1": "ON DUPLICATE KEY update (with multiple where clauses)",
    "text_2": "ALTER TABLE records ADD CONSTRAINT tb_uq UNIQUE (p_id, c_id)\n",
    "label": 1
  },
  {
    "text_1": "Oracle Transform rows into column and combined duplicate rows",
    "text_2": " LOCATION   |PROPERTIES |   VALUE  \n -----------|-----------|--------\n Texas      | Latitude  | 21.391 \n Texas      | Longitude | 54.12  \n Detroit    | Latitude  | 24.23  \n Detroit    | Longitude | 54.23  \n New York   | Latitude  | 24.239 \n New York   | Longitude | 55.5   \n",
    "label": 1
  },
  {
    "text_1": "60 million entries, select entries from a certain month. How to optimize database?",
    "text_2": "select count(*) from datasources;\n+----------+\n| count(*) |\n+----------+\n| 60306030 |\n+----------+\n\nselect count(*) from datasources where year_id = 2010;\n+----------+\n| count(*) |\n+----------+\n| 16691669 |\n+----------+\n\nselect\n year_id, month_id, count(*) as counter\nfrom\n datasources\nwhere \n year_id = 2010\ngroup by\n year_id, month_id;\n+---------+----------+---------+\n| year_id | month_id | counter |\n+---------+----------+---------+\n|    2010 |        1 | 1080108 |\n|    2010 |        2 | 1210121 |\n|    2010 |        3 | 1160116 |\n|    2010 |        4 | 1300130 |\n|    2010 |        5 | 1860186 |\n|    2010 |        6 | 1220122 |\n|    2010 |        7 | 1250125 |\n|    2010 |        8 | 1460146 |\n|    2010 |        9 | 1730173 |\n|    2010 |       10 | 1490149 |\n|    2010 |       11 | 1570157 |\n|    2010 |       12 | 1360136 |\n+---------+----------+---------+\n12 rows in set (5.92 sec)\n\n\nselect \n count(*) as counter\nfrom \n datasources d\nwhere \n d.year_id = 2010 and d.month_id between 1 and 3 and datasource_id = 100;\n\n+---------+\n| counter |\n+---------+\n|   30003 |\n+---------+\n1 row in set (1.04 sec)\n\nexplain\nselect \n d.* \nfrom \n datasources d\nwhere \n d.year_id = 2010 and d.month_id between 1 and 3 and datasource_id = 100\norder by\n d.id desc limit 10;\n\n+----+-------------+-------+-------+---------------+---------+---------+------+---------+-----------------------------+\n| id | select_type | table | type  | possible_keys | key     | key_len | ref  |rows    | Extra                       |\n+----+-------------+-------+-------+---------------+---------+---------+------+---------+-----------------------------+\n|  1 | SIMPLE      | d     | range | PRIMARY       | PRIMARY | 4       | NULL |4451372 | Using where; Using filesort |\n+----+-------------+-------+-------+---------------+---------+---------+------+---------+-----------------------------+\n1 row in set (0.00 sec)\n\n\nselect \n d.* \nfrom \n datasources d\nwhere \n d.year_id = 2010 and d.month_id between 1 and 3 and datasource_id = 100\norder by\n d.id desc limit 10;\n\n+---------+----------+---------------+---------+-------+\n| year_id | month_id | datasource_id | id      | data  |\n+---------+----------+---------------+---------+-------+\n|    2010 |        3 |           100 | 3290330 | 38434 |\n|    2010 |        3 |           100 | 3290329 |  9988 |\n|    2010 |        3 |           100 | 3290328 | 25680 |\n|    2010 |        3 |           100 | 3290327 | 17627 |\n|    2010 |        3 |           100 | 3290326 | 64508 |\n|    2010 |        3 |           100 | 3290325 | 14257 |\n|    2010 |        3 |           100 | 3290324 | 45950 |\n|    2010 |        3 |           100 | 3290323 | 49986 |\n|    2010 |        3 |           100 | 3290322 |  2459 |\n|    2010 |        3 |           100 | 3290321 | 52971 |\n+---------+----------+---------------+---------+-------+\n10 rows in set (0.98 sec)\n\n\nselect \n count(*) as counter\nfrom \n datasources d\nwhere \n d.year_id = 2010 and d.month_id between 1 and 3;\n\n+---------+\n| counter |\n+---------+\n| 3450345 |\n+---------+\n1 row in set (1.64 sec)\n\nexplain\nselect \n d.* \nfrom \n datasources d\nwhere \n d.year_id = 2010 and d.month_id between 1 and 3\norder by\n d.id desc limit 10;\n\n+----+-------------+-------+-------+---------------+---------+---------+------+---------+-----------------------------+\n| id | select_type | table | type  | possible_keys | key     | key_len | ref  |rows    | Extra                       |\n+----+-------------+-------+-------+---------------+---------+---------+------+---------+-----------------------------+\n|  1 | SIMPLE      | d     | range | PRIMARY       | PRIMARY | 3       | NULL |6566916 | Using where; Using filesort |\n+----+-------------+-------+-------+---------------+---------+---------+------+---------+-----------------------------+\n1 row in set (0.00 sec)\n\n\nselect \n d.* \nfrom \n datasources d\nwhere \n d.year_id = 2010 and d.month_id between 1 and 3\norder by\n d.id desc limit 10;\n\n+---------+----------+---------------+---------+-------+\n| year_id | month_id | datasource_id | id      | data  |\n+---------+----------+---------------+---------+-------+\n|    2010 |        3 |           116 | 3450346 | 42455 |\n|    2010 |        3 |           116 | 3450345 | 64039 |\n|    2010 |        3 |           116 | 3450344 | 27046 |\n|    2010 |        3 |           116 | 3450343 | 23730 |\n|    2010 |        3 |           116 | 3450342 | 52380 |\n|    2010 |        3 |           116 | 3450341 | 35700 |\n|    2010 |        3 |           116 | 3450340 | 20195 |\n|    2010 |        3 |           116 | 3450339 | 21758 |\n|    2010 |        3 |           116 | 3450338 | 51378 |\n|    2010 |        3 |           116 | 3450337 | 34687 |\n+---------+----------+---------------+---------+-------+\n10 rows in set (1.98 sec)\n",
    "label": 1
  },
  {
    "text_1": "sql function with two parameters. Call from VB .NET",
    "text_2": "Result = Convert.ToInt32(cmd.ExecuteScalar())\n",
    "label": 1
  },
  {
    "text_1": "SQL Server Split",
    "text_2": "380 1\n380 14\n380 280\n",
    "label": 1
  },
  {
    "text_1": "Identifiers in a Diamond Relationship between Tables",
    "text_2": "Table A\n-------\n100\n101\n102\n\nTable B\n-------\n100 1\n100 2\n101 1\n\nTable C\n-------\n100 1\n100 2\n101 1\n\n\nTable D\n-------\n100 1 1\n100 2 1\n100 1 2\n101 1 1\n",
    "label": 1
  },
  {
    "text_1": "How do locks work in a insert...select statement?",
    "text_2": " set transaction isolation level serializable\n begin tran\n    insert into Invoice with (item,OrderNumber) \n    select 'ItemA', max(OrderNumber)+1 \n    from Orders\n    where item='ItemA'\n\n    waitfor delay '00:00:05'\n\n commit tran \n",
    "label": 1
  },
  {
    "text_1": "Fastest way to perform nested bulk inserts with scope_identity() usage?",
    "text_2": "DROP TABLE tblRelated;\nDROP TABLE tblBase;\nDROP PROCEDURE stp_InsertMultipleRecordsToMultipleTables;\nDROP TYPE udt_base;\nDROP TYPE udt_related;\nDROP TYPE udt_idMap;\nGO\n",
    "label": 1
  },
  {
    "text_1": "How to perform string concatenation in PL/SQL?",
    "text_2": " '''' || '&1' || ''''\n",
    "label": 1
  },
  {
    "text_1": "Where Clause That Grabs Values From A Table And If It Returns Null It Grabs Only Nulls",
    "text_2": "select t1.*\nfrom table1 t1\nwhere exists (select 1\n              from table2 t2\n              where t1.user = t2.username or t1.user is null and t2.user is null\n             );\n",
    "label": 1
  },
  {
    "text_1": "Put values from specific tag in a json array into plain array",
    "text_2": "array\n{1,2,4,8,16}\n",
    "label": 1
  },
  {
    "text_1": "How do you sort a query by sum of distinct values?",
    "text_2": "SELECT  item, SUM(sales) totalSales\nFROM    sales\nGROUP   BY item\n",
    "label": 1
  },
  {
    "text_1": "extract values from a data frame based on a vector of row numbers in R",
    "text_2": "df[,\"Species\"][x]\n",
    "label": 1
  },
  {
    "text_1": "creating parent child relationship when migrating data (sql server 2008)",
    "text_2": "insert into Customer (Name,Surname)\n    select Name,Surname from staging_table;\n",
    "label": 1
  },
  {
    "text_1": "Changing precision of numeric column in Oracle",
    "text_2": "alter table EVAPP_FEES rename column AMOUNT to AMOUNT_OLD;\n\nalter table EVAPP_FEES add AMOUNT NUMBER(14,2);\n\nupdate EVAPP_FEES set AMOUNT = AMOUNT_OLD;\n\nalter table EVAPP_FEES drop column AMOUNT_OLD;\n",
    "label": 1
  },
  {
    "text_1": "Sequential Group By in sql server",
    "text_2": "WITH T\n     AS (SELECT *,\n                ID - ROW_NUMBER() OVER (PARTITION BY [STATUS] ORDER BY [ID]) AS Grp\n         FROM   YourTable)\nSELECT [STATUS],\n       SUM([VALUE]) AS [SUM(VALUE)]\nFROM   T\nGROUP  BY [STATUS],\n          Grp\nORDER  BY MIN(ID)\n",
    "label": 1
  },
  {
    "text_1": "Mysql left join, group by, count and union all",
    "text_2": "╔══════════════╦═══════════════╗\n║ product_name ║ Product_Count ║\n╠══════════════╬═══════════════╣\n║ Name 1       ║             2 ║\n║ Name 2       ║             3 ║\n║ Name 3       ║             7 ║\n╚══════════════╩═══════════════╝\n",
    "label": 1
  },
  {
    "text_1": "Select 1st and 2nd Record before record X",
    "text_2": "SELECT  t2.cEventData1,\n        Occurances = COUNT(*)\nFROM    T t1\n        OUTER APPLY\n        (   SELECT  TOP 2 t2.dEventTime, t2.SeqNo, t2.cEventData1\n            FROM    T t2\n            WHERE   t1.InteractionKey = t2.InteractionKey\n            AND     t1.dEventTime > t2.dEventTime\n            ORDER BY t2.dEventTime DESC\n        ) t2\nWHERE   t1.cEventData1 = 'Disconnect'\nGROUP BY t2.cEventData1;\n",
    "label": 1
  },
  {
    "text_1": "Simple SQL code evades me.. Unionize two mismatched tables",
    "text_2": "SELECT\n    *,\n    (SELECT TOP 1 Name FROM Blah WHERE Blah.SomeID = MyTable.SomeID) AS ExtraCol\nFROM\n    MyTable\n",
    "label": 1
  },
  {
    "text_1": "How to sum up time field in SQL Server",
    "text_2": ";WITH w(e, mw) AS\n(\n    SELECT EmployeeID, SUM(DATEDIFF(MINUTE, '0:00:00', WrkHrs)) \n    FROM dbo.table \n    -- WHERE ...\n    GROUP BY EmployeeID\n)\nSELECT EmployeeID = e,\n  WrkHrs = RTRIM(mw/60) + ':' + RIGHT('0' + RTRIM(mw%60),2)\n  FROM w;\n",
    "label": 1
  },
  {
    "text_1": "Storing multiple tags in one column",
    "text_2": "file_id   tag_id\n-------   ------\n      1        1\n      2        2\n      2        3\n",
    "label": 1
  },
  {
    "text_1": "Converting id's in int[] elements in another table Postgres",
    "text_2": " id |                 array_agg                 \n----+-------------------------------------------\n  1 | {\"(1,0)\",\"(2,1)\",\"(5,6)\",\"(7,0)\",\"(2,4)\"}\n  2 | {\"(2,4)\",\"(4,4)\",\"(7,0)\",\"(5,6)\",\"(2,1)\"}\n  3 | {\"(1,0)\",\"(5,9)\"}\n",
    "label": 1
  },
  {
    "text_1": "SQL - partially order by list of id's",
    "text_2": "\nmysql> SELECT FIELD('ej', 'Hej', 'ej', 'Heja', 'hej', 'foo');\n        -> 2\nmysql> SELECT FIELD('fo', 'Hej', 'ej', 'Heja', 'hej', 'foo');\n        -> 0\n",
    "label": 1
  },
  {
    "text_1": "sql how to get consecutive appearance of value",
    "text_2": "value result      Result Sum\n----- ----------- -----------\nA     1           4\n",
    "label": 1
  },
  {
    "text_1": "SELECT TOP N with variable",
    "text_2": "declare @RndQuesnCount table (recid int,conceptid int,mindisplaycount int)\ninsert into @RndQuesnCount(Recid,conceptID,MinDisplayCount) values\n(1,      3839,     2),\n(2,      4802,     3)\n\ndeclare @QuesTable table (QuesCompID int,Ques_ConceptDtlID int)\ninsert into @QuesTable(QuesCompID,Ques_ConceptDtlID) values\n(88,         4802),\n(89,         4802),\n(90,         4802),\n(91,         4802),\n(92,         4802),\n(93,         4802)\n",
    "label": 1
  },
  {
    "text_1": "Dynamic alternative to pivot with CASE and GROUP BY",
    "text_2": "SELECT * FROM crosstab(\n  'SELECT bar, 1 AS cat, feh\n   FROM   tbl_org\n   ORDER  BY bar, feh')\n AS ct (bar text, val1 int, val2 int, val3 int);  -- more columns?\n",
    "label": 1
  },
  {
    "text_1": "SQL - How to list items which are below the average",
    "text_2": "SELECT t.Test_name, s.*, sc.*\n  FROM Tests t\n  JOIN Scores sc\n    ON t.id_Tests = sc.Tests_id_Tests\n  JOIN Students s\n    ON sc.Students_id_Students = s.id_Students\n WHERE sc.result <\n       (select avg(x.result)\n          from scores x\n         where sc.Tests_id_Tests = x.Tests_id_Tests)\n",
    "label": 1
  },
  {
    "text_1": "Force MySQL to use two indexes on a Join",
    "text_2": "select t.* from t1 as t where t.i=2 and t.j=3 or t.i=3 and t.j=2\n",
    "label": 1
  },
  {
    "text_1": "Checking date with less than or equal to 10 days",
    "text_2": "DATEDIFF(DAY,start_date,end_date) <= 10 AND DATEDIFF(DAY,start_date,end_date) >= 40;\n",
    "label": 1
  },
  {
    "text_1": "How to count occurencies of two dependent columns in mysql",
    "text_2": "SELECT 1 as set, W1 as W, L1 as L FROM <table>\nUNION ALL\nSELECT 2,  W2 as W, L2 as L FROM <table>\nUNION ALL\nSELECT 3, W3 as W, L3 as L FROM <table>\nUNION ALL\nSELECT 4, W4 as W, L4 as L FROM <table>\nUNION ALL\nSELECT 5, W5 as W, L5 as L FROM <table>\n",
    "label": 1
  },
  {
    "text_1": "MySQL - alternatives to nested subqueries when limiting aggregate data in a correlated subquery",
    "text_2": "SELECT AVG(d.DailyData1) Data1_20DayAvg \n       --- other aggregate stuff on d (Datatable)\nFROM \n      ( SELECT '2012-01-23' AS DateChecked\n      ) AS dd\n  JOIN\n      DataTable AS d\n    ON\n      d.Date <= dd.DateChecked\n    AND\n      d.Date >= COALESCE( \n      ( SELECT DailyData1 \n        FROM DataTable AS last20 \n        WHERE Date <= dd.DateChecked \n          AND (other conditions for last20)\n        ORDER BY Date DESC \n        LIMIT 1 OFFSET 19\n      ), '1001-01-01'   )\nWHERE (other conditions for d Datatable)\n",
    "label": 1
  },
  {
    "text_1": "DB2 alias in WHERE clause",
    "text_2": "SELECT a.*, b.tech_id as user \n  FROM users a  \nINNER JOIN newsletter b ON b.tech_id = a.newsletter_id\nORDER BY b.tech_id\nFETCH FIRST 1 ROW ONLY;\n",
    "label": 1
  },
  {
    "text_1": "ASP Time formatting - Change default formatting?",
    "text_2": "dim rawDate : rawDate = cDate(value)\n",
    "label": 1
  },
  {
    "text_1": "SQL Server 2008: delete duplicate rows",
    "text_2": "WITH cte AS (SELECT *,ROW_NUMBER() OVER(PARTITION BY uniqueid ORDER BY col2)'RowRank'\n             FROM Table)\nDELETE FROM cte \nWHERE RowRank > 1\n",
    "label": 1
  },
  {
    "text_1": "Selecting a subset of rows that exceed a percentage of total values",
    "text_2": "WITH cte AS\n(\n    SELECT *, ROW_NUMBER() OVER(PARTITION BY [User] ORDER BY Revenue DESC) AS rn\n    FROM t    \n), cte2 AS\n(\n    SELECT c.Customer, c.[User], c.[Revenue]\n           ,percentile         = 1.0 * Revenue / NULLIF(c3.s,0)\n           ,running_percentile = 1.0 * c2.s    / NULLIF(c3.s,0)\n    FROM cte c\n    CROSS APPLY\n         (SELECT SUM(Revenue) AS s\n          FROM cte c2\n          WHERE c.[User] = c2.[User]\n            AND c2.rn <= c.rn) c2\n    CROSS APPLY\n         (SELECT SUM(Revenue) AS s\n          FROM cte c2\n          WHERE c.[User] = c2.[User]) AS c3\n) \nSELECT *\nFROM cte2\nWHERE running_percentile <= 0.8;\n",
    "label": 1
  },
  {
    "text_1": "querying years that contains multiple fields in oracle db",
    "text_2": "select year\nfrom data\ngroup by year\nhaving count(case when ltr not in ('a','b','c') then 1 end) = 0\n",
    "label": 1
  },
  {
    "text_1": "Oracle: query on key/value pairs stored in one of the columns?",
    "text_2": "SELECT * FROM T WHERE prop1= :val1 AND prop2= :val2 AND prop3= :val3\n",
    "label": 1
  },
  {
    "text_1": "Rank query results based on how many of the WHERE conditions are satisfied",
    "text_2": "...    \nORDER  BY (CASE WHEN Condition1 THEN 1 ELSE 0 END\n         + CASE WHEN Condition2 THEN 1 ELSE 0 END\n         + CASE WHEN Condition3 THEN 1 ELSE 0 END) DESC;\n",
    "label": 1
  },
  {
    "text_1": "Sum of subcategory in database?",
    "text_2": "select\n    sub_category,\n    sum(amount) as total\nfrom mytable\ngroup by sub_category\nwhere category = 'Children'\n",
    "label": 1
  },
  {
    "text_1": "Confusion with Oracle CONNECT BY",
    "text_2": " CREATE TABLE step1 AS\n SELECT 1 \"LEVEL\", X from mytable\n WHERE x = 1;\n SELECT * FROM step1;\n\n         LEVEL          X\n    ---------- ----------\n             1          1\n",
    "label": 1
  },
  {
    "text_1": "how to join 4 tables in microsoft access with one table as the base?",
    "text_2": "SELECT DollarValue FROM Cars\nUNION ALL\nSELECT DollarValue FROM TVs\nUNION ALL\nSELECT DollarValue FROM Toys\n",
    "label": 1
  },
  {
    "text_1": "MySQL - Conditional COUNT with GROUP BY",
    "text_2": "SELECT puid, COUNT(DISTINCT CASE WHEN droid_v > 0 THEN droid_v ELSE 0 END) - 1 AS droid /* -1 for the case where droid_v is 0 */\n     , COUNT(DISTINCT sig_v) AS sig\n     , SUM(NoExt)  AS hits\n",
    "label": 1
  },
  {
    "text_1": "OWB wb_rt_constants definition",
    "text_2": "col execution_audit_status format a20\n\nselect distinct e.audit_status,\n       wb_rt_constants.to_string(e.audit_status) as execution_audit_status\n  from wb_rt_audit_executions e;\n\nAUDIT_STATUS EXECUTION_AUDIT_STAT\n------------ --------------------\n       16002 BUSY\n       16004 COMPLETE\n",
    "label": 1
  },
  {
    "text_1": "DISTINCT Is not working in inner join",
    "text_2": "SELECT\n    users.fbid, \n    users.name,\n    maxRecords.points\nFROM\n    users\n    JOIN\n    (\n        SELECT\n            MAX(players_records.points) AS points,\n            players_records.user_id\n        FROM\n            players_records\n        GROUP BY\n            players_records.user_id\n    ) AS maxRecords\n    ON maxRecords.user_id=users.fbid\nORDER BY \n    maxRecords.points DESC \nLIMIT 5\n",
    "label": 1
  },
  {
    "text_1": "SELECT maximum and minimum value from a table",
    "text_2": "select fname, lname, Salary\nfrom Employees\nwhere Salary = (select min(Salary) from Employees) or \n    Salary = (select max(Salary) from Employees)\n",
    "label": 1
  },
  {
    "text_1": "MySQL querying rostered shifts over a number of days - simpler way?",
    "text_2": "    (Date = '2012-04-16' AND Time >= '20:00:00')\n    OR\n    (Date = '2012-04-17' AND Time <= '08:00:00')\n",
    "label": 1
  },
  {
    "text_1": "How to select data from a single column in Oracle and display results in multiple columns?",
    "text_2": "SQL> select nvl(max(decode(the_week,'01',cost)),0) \"Week 1\"\n  2       , nvl(max(decode(the_week,'02',cost)),0) \"Week 2\"\n  3       , nvl(max(decode(the_week,'03',cost)),0) \"Week 3\"\n  4       , nvl(max(decode(the_week,'04',cost)),0) \"Week 4\"\n  5       , nvl(max(decode(the_week,'05',cost)),0) \"Week 5\"\n  6       , nvl(max(decode(the_week,'06',cost)),0) \"Week 6\"\n  7       , nvl(max(decode(the_week,'07',cost)),0) \"Week 7\"\n  8       , nvl(max(decode(the_week,'08',cost)),0) \"Week 8\"\n  9       , nvl(max(decode(the_week,'09',cost)),0) \"Week 9\"\n 10    from ( select to_char(the_date,'ww') the_week\n 11                , sum(cost) cost\n 12             from mytable\n 13            where the_date between date '2010-01-01' and date '2010-02-28'\n 14            group by to_char(the_date,'ww')\n 15         )\n 16  /\n\n    Week 1     Week 2     Week 3     Week 4     Week 5     Week 6     Week 7     Week 8     Week 9\n---------- ---------- ---------- ---------- ---------- ---------- ---------- ---------- ----------\n      1000       2400          0       1000          0        600       1400          0          0\n\n1 row selected.\n",
    "label": 1
  },
  {
    "text_1": "Oracle define field name in query, use in where",
    "text_2": "select acct_id\n     , sum(amt_due_per3) as tot_amt_due_per3\n     , sum(amt_due_per4) as tot_amt_due_per4\n     , abs (sum(amt_due_per3) + sum(amt_due_per4)) as cutoffAmt\nfrom ( select acct_id\n            , amt_due_per3\n            , amt_due_per4\n      from mytable\n      where acct_id = '4679721000')\ngroup by acct_id\nhaving abs (sum(amt_due_per3) + sum(amt_due_per4)) > 100.0\n",
    "label": 1
  },
  {
    "text_1": "How to migrate MySQL databases to my local machine",
    "text_2": "mysql -u root -p < export.sql\n",
    "label": 1
  },
  {
    "text_1": "How to represent relational division(basic algebra expression) in terms of SQL",
    "text_2": "create table Boats(\n  bid int,\n  bname varchar(50),\n  color varchar(50)\n);\n\ncreate table Reserves(\n  sid int,\n  bid int,\n  day date\n);\n",
    "label": 1
  },
  {
    "text_1": "SELECT STATMENT",
    "text_2": "  Create View ProjectWithTesters\n  As \n       Select proj_id, \n          t1.name + ' ' + t1.surname tester1,\n          t2.name + ' ' + t2.surname tester2,\n          t3.name + ' ' + t3.surname tester3\n       From Project p \n         Left Join Emp t1 On t1.emp_id = p.Tester_1\n         Left Join Emp t2 On t2.emp_id = p.Tester_2\n         Left Join Emp t2 On t3.emp_id = p.Tester_3\n",
    "label": 1
  },
  {
    "text_1": "orderBy several Columns - Doctrine QueryBuilder",
    "text_2": "$qb = $em->createQueryBuilder();\n$qb\n    ->select('entity', 'IF(col1, col1, col2) as orderCol')\n    ->from('Namespace/Entity', 'entity')\n    ->orderBy('orderCol', 'DESC')\n",
    "label": 1
  },
  {
    "text_1": "Create a view with ORDER BY clause",
    "text_2": "SalesOrderID   OrderDate   CustomerID   AccountNumber   TotalDue\n------------   ----------  ----------   --------------  ----------\n43793          2005-07-22  11000        10-4030-011000  3756.989\n51522          2007-07-22  11000        10-4030-011000  2587.8769\n57418          2007-11-04  11000        10-4030-011000  2770.2682\n51493          2007-07-20  11001        10-4030-011001  2674.0227\n43767          2005-07-18  11001        10-4030-011001  3729.364\n",
    "label": 1
  },
  {
    "text_1": "How to kill a process/query in DB2",
    "text_2": "db2 force application (xx)\n",
    "label": 1
  },
  {
    "text_1": "postgresql :: retrieve row matching exact condition or number of rows matching part of condition",
    "text_2": "SELECT count(*) as total_count, --count of permission records for object\n       bool_or(user_id = 1 AND readable) as user_readable, -- user has read permission, null if no permission record\n       bool_or(user_id = 1 AND writable) as user_writable, -- user has write permission, null if no permission record\nFROM permission\nWHERE object_id = 123456\n",
    "label": 1
  },
  {
    "text_1": "TSQL - Insert values in table based on lookup table",
    "text_2": "UPDATE m\nSET m.categorygroup = c.categorygroup\nFROM maindata m\nJOIN creditorlist c\n  ON m.creditorname = c.creditorname;\n",
    "label": 1
  },
  {
    "text_1": "How do I easily keep records in a database linked together?",
    "text_2": "Policy newPolicy = null;\nforeach(Policy policy in policyList)\n{\n    Policy masterPolicy = policy.MasterPolicyId.HasValue ? newPolicy : null;\n    newPolicy = Convert(policy, masterPolicy);   \n\n}\n",
    "label": 1
  },
  {
    "text_1": "Query execution is taking too long",
    "text_2": "update email e\n     set email_status_id = 2\n     where exists (select 1 from unsubscribed u where u.email = e.email);\n",
    "label": 1
  },
  {
    "text_1": "SQL Query Inner Join with Temp Table",
    "text_2": "WITH XOperLU (xopername, xoperdesc)\n AS\n (\n  SELECT xopername, CAST(xoperdesc AS VARCHAR(20))\n    FROM (\n          VALUES ('Street', 'SS'), \n                 ('Town', 'TW')                    \n         ) AS XOperLU (xopername, xoperdesc)\n ) SELECT T1.COLUMN_NAME as COLUMN_NAME, T1.DATA_TYPE as DATA_TYPE, S1.xoperdesc AS Description FROM INFORMATION_SCHEMA.COLUMNS  AS T1 \n   INNER JOIN XOperLU AS S1\n      ON S1.xopername = T1.COLUMN_NAME\n      WHERE    (TABLE_SCHEMA = 'dbo') AND (TABLE_NAME = 'Clients')\n",
    "label": 1
  },
  {
    "text_1": "Select a part of a selected item in sql",
    "text_2": "select substring('Charmina (Female)',\n       charindex('(','Charmina (Female)')+1,\n        LEN('Charmina (Female)')-charindex('(','Charmina (Female)')-1)\n",
    "label": 1
  },
  {
    "text_1": "skip copying to tmp table on disk mysql",
    "text_2": "[mysqld]\ntmpdir=/var/tmpfs\ntmp_table_size=2K\n",
    "label": 1
  },
  {
    "text_1": "Should I use Excel or Access",
    "text_2": "'This code goes into a VBA-Module\n'and can be access on a Worksheet calling =myScan(\"test\")\nPublic Function myScan(strWorker As String)\n    Table1.Cells(2, 1) = \"1\"\n    Table1.Cells(2, 2) = strWorker\n    Table1.Cells(2, 3) = Now()\nEnd Function\n",
    "label": 1
  },
  {
    "text_1": "SQL Searching by MAX()",
    "text_2": "SELECT DOC_NAME\nFROM DOCUMENTS\nWHERE (DELIVERY_TIMESTAMP, ORDERID) IN (\n    SELECT TOP 1 DELIVERY_TIMESTAMP, ORDERID\n    FROM DOCUMENTS\n    ORDER BY DELIVERY_TIMESTAMP DESC, ORDERID DESC\n)\n",
    "label": 1
  },
  {
    "text_1": "Dynamics Ax new table with ID which auto-increments",
    "text_2": "public void create(boolean _append = false)\n\n{\n\n    ;\n\n    super(_append);\n\n\n\n    FirstTable.AXSeqEDT = NumberSeq::newGetNum(HRMParameters::numRefAXSeqEDT(),true).num();\n\n}\n",
    "label": 1
  },
  {
    "text_1": "How to select records that have multiple values in sql?",
    "text_2": "SELECT DISTINCT user_id, subscription_plan_id, created_at\nFROM subscriptions s\nWHERE user_id IN (\n    SELECT user_id\n    FROM subscriptions\n    WHERE \n      created_at BETWEEN '2014-01-01' AND '2014-01-31'\n    GROUP BY\n      user_id\n    HAVING\n      COUNT(DISTINCT subscription_plan_id) > 1)\nAND created_at BETWEEN '2014-01-01' AND '2014-01-31'\nORDER BY user_id, created_at\n",
    "label": 1
  },
  {
    "text_1": "Can we link SQL scripts inside other SQL script in MySQL?",
    "text_2": "$ mysql -s < script1.sql\nFirst hello from script1\nHello from script2\nSecond hello from script1\n",
    "label": 1
  },
  {
    "text_1": "Issue with multiple rows combining into single row",
    "text_2": "select x.cert_number,\n  y1.name as owner_name,\n  y2.name as carrier_name,\n  y3.name as destination_name\nfrom table_x x\nleft join table_y y1\n  on x.cert_number = y1.cert_number\n  and y1.type = 'owner'\nleft join table_y y2\n  on x.cert_number = y2.cert_number\n  and y2.type = 'carrier'\nleft join table_y y3\n  on x.cert_number = y3.cert_number\n  and y3.type = 'destination';\n",
    "label": 1
  },
  {
    "text_1": "Sql: difference between two dates",
    "text_2": "BEGIN\n    DBMS_SCHEDULER.CREATE_SCHEDULE('New_Year', repeat_interval => 'FREQ=YEARLY;BYDATE=0101');\n\n    DBMS_SCHEDULER.CREATE_SCHEDULE('Easter_Sunday',  repeat_interval => 'FREQ=YEARLY;BYDATE=20150405,    20160327,    20170416,    20170416,    20180401,    20190421,    20200412', comments => 'Hard coded till 2020');\n    DBMS_SCHEDULER.CREATE_SCHEDULE('Good_Friday',    repeat_interval => 'FREQ=YEARLY;BYDATE=20150405-2D, 20160327-2D, 20170416-2D, 20170416-2D, 20180401-2D, 20190421-2D, 20200412-2D');\n    DBMS_SCHEDULER.CREATE_SCHEDULE('Easter_Monday',   repeat_interval => 'FREQ=YEARLY;BYDATE=20150405+1D, 20160327+1D, 20170416+1D, 20170416+1D, 20180401+1D, 20190421+1D, 20200412+1D');\n    DBMS_SCHEDULER.CREATE_SCHEDULE('Ascension_Day',   repeat_interval => 'FREQ=YEARLY;BYDATE=20150405+39D,20160327+39D,20170416+39D,20170416+39D,20180401+39D,20190421+39D,20200412+39D');\n    DBMS_SCHEDULER.CREATE_SCHEDULE('Pentecost_Monday', repeat_interval => 'FREQ=YEARLY;BYDATE=20150405+50D,20160327+50D,20170416+50D,20170416+50D,20180401+50D,20190421+50D,20200412+50D');\n\n    DBMS_SCHEDULER.CREATE_SCHEDULE('Repentance_and_Prayer', repeat_interval => 'FREQ=DAILY;BYDATE=1122-SPAN:7D;BYDAY=WED', \n        comments => 'Wednesday before November 23th, Buss- und Bettag');\n    -- alternative solution: \n    --DBMS_SCHEDULER.CREATE_SCHEDULE('Repentance_and_Prayer', repeat_interval => 'FREQ=MONTHLY;BYMONTH=NOV;BYDAY=3 WED', \n    --    comments => '3rd Wednesday in November');\n\n    DBMS_SCHEDULER.CREATE_SCHEDULE('Labor_Day', repeat_interval => 'FREQ=YEARLY;BYDATE=0501');\n    DBMS_SCHEDULER.CREATE_SCHEDULE('German_Unity_Day', repeat_interval => 'FREQ=YEARLY;BYDATE=1003');\n    DBMS_SCHEDULER.CREATE_SCHEDULE('Christmas', repeat_interval => 'FREQ=YEARLY;BYDATE=1225+SPAN:2D');\n\n    DBMS_SCHEDULER.CREATE_SCHEDULE('Christian_Celebration_Days', repeat_interval => 'FREQ=DAILY;INTERSECT=Easter_Sunday,Good_Friday,Easter_Monday,Ascension_Day,Pentecost_Monday,Repentance_and_Prayer,Christmas');\n    -- alternative solution: \n    -- DBMS_SCHEDULER.CREATE_SCHEDULE('Christian_Celebration_Days', repeat_interval => 'FREQ=Good_Friday;BYDAY=1 MON, 6 THU,8 MON');\n    DBMS_SCHEDULER.CREATE_SCHEDULE('Political_Holidays', repeat_interval => 'FREQ=DAILY;INTERSECT=New_Year,Labor_Day,German_Unity_Day');\n\n\nEND;\n/\n",
    "label": 1
  },
  {
    "text_1": "Average of the Sum of X in MySQL",
    "text_2": "SELECT SUM(TACMrgin) / count(distinct month(date))\nFROM report_sales_month\nWHERE year(date) = 2013;\n",
    "label": 1
  },
  {
    "text_1": "Selecting only rows with the highest value of one field, grouped by another field",
    "text_2": "select name,school,max(points) from table group by name,school\n",
    "label": 1
  },
  {
    "text_1": "GROUP BY tsql, multiple records to return one",
    "text_2": "select t.*\nfrom (select t.*,\n             row_number() over (partition by INSTR_ID\n                                order by (case when PRC_TYP = 'CLO' then 1\n                                               when PRC_TYPE = 'LST' then 2\n                                               else 3\n                                          end)\n                               ) as seqnum\n      from table t\n     ) t\nwhere seqnum = 1;\n",
    "label": 1
  },
  {
    "text_1": "Properly referencing documents in mongodb (relations)?",
    "text_2": "db.students.find({schoolId: <school-id>})\n",
    "label": 1
  },
  {
    "text_1": "Creating a View using stored procedure",
    "text_2": "create procedure ProcToUseView\nas\nselect Col\nfrom MyView\n",
    "label": 1
  },
  {
    "text_1": "SQL Performance: Using Union and Subqueries",
    "text_2": "SELECT DISTINCT f2.friend_id \n  FROM friends AS f1\n    JOIN friends AS f2 ON f1.friend_id=f2.user_id OR f2.user_id=1\n  WHERE f1.user_id=1;\n",
    "label": 1
  },
  {
    "text_1": "sql pivot with oracle?",
    "text_2": "SELECT Id,\nCASE p_name when 'name' THEN P_value end as Name,\nCASE p_name when 'path' THEN p_value end as Path\nFROM yourTableNameHere\n",
    "label": 1
  },
  {
    "text_1": "Why SQL Server sql query returns empty list?",
    "text_2": "WHERE t6.Attiva = 1 \nAND (t1.Istante BETWEEN '2015-09-03 00:16:50.693' AND '2015-09-03 23:16:50.693')\nAND (t1.Partizione = 0 OR t1.Partizione = 6)\nAND t1.IdCorsia = 1\nAND t2.IdTransiti = t1.Id\nAND t6.Id = t1.IdCorsia\nORDER BY t1.Istante DESC\n",
    "label": 1
  },
  {
    "text_1": "Select min, max and one row that has a special FK",
    "text_2": "SELECT \n  MIN(\"FROM_X\") AS \"FROM\",\n  MAX(\"TO_X\") AS \"TO\",\n  max(case when project = 'break' then from_x else null end) as \"BREAK FROM\",\n  max(case when project = 'break' then to_x else null end) as \"BREAK TO\",\n  (MAX(\"TO_X\") - MIN(\"FROM_X\"))*24 AS TIME_SPENT,\n  \"DAY\"\nFROM ATTENDANCE_HOURS\nGROUP BY DAY\n",
    "label": 1
  },
  {
    "text_1": "Subtracting/Adding to a Where clause timestamp condition",
    "text_2": "where search_date >= causedat - interval '30' minute\nand   search_date <= causedat + interval '30' minute;\n",
    "label": 1
  },
  {
    "text_1": "comma separated values or table variable in case of using IN clause",
    "text_2": "DECLARE @UsersInTable TABLE (\n    UserID INT\n)\n\nINSERT INTO @UsersInTable\nVALUES (1),(2),(3),(4),(5),(6),(7),(8),(9),(10)\n\nSELECT *\nFROM [dbo].[User] U\nWHERE U.UserID IN (\n    SELECT UserID\n    FROM @UsersInTable\n)\n",
    "label": 1
  },
  {
    "text_1": "SQL (ORACLE): inner-query with 2 or more related/paired container-query \"pointers\"",
    "text_2": "with t as ( \n  select 1 id, date '2016-03-04' fecha, 5 divisa from dual union all \n  select 2 id, date '2016-03-06' fecha, 5 divisa from dual union all \n  select 3 id, date '2016-03-07' fecha, 5 divisa from dual union all \n  select 3 id, date '2016-03-07' fecha, 6 divisa from dual union all \n  select 3 id, date '2016-03-07' fecha,10 divisa from dual )\nselect * from (\n  select cd.*, t.fecha input_fecha, t.divisa input_divisa,\n         row_number() over (partition by t.fecha, t.divisa order by t.fecha-cd.fecha) rn\n    from cotizaciones_div cd \n    join t on cd.divisa_c = t.divisa and cd.grupo = 1 and cd.fecha<=t.fecha)\n  where rn=1 order by input_fecha, input_divisa\n",
    "label": 1
  },
  {
    "text_1": "SQL more elegant combination of boolean checks possible?",
    "text_2": "select * from [TABLE1]\nwhere [path] = 'RECEIVE'\nand [src_ip] not regexp '^(10\\\\.48\\\\.20\\\\.10$|0\\\\.|127\\\\.)'\norder by [date], [time] desc\n",
    "label": 1
  },
  {
    "text_1": "Why does SELECT ... WHERE id = a returns a result if value is 0",
    "text_2": "where id = 'a'\n",
    "label": 1
  },
  {
    "text_1": "String concatenation in SQL server",
    "text_2": "DECLARE @foo TABLE(ID INT IDENTITY(1,1), col NVARCHAR(MAX));\n\nINSERT @foo(col) SELECT N'c,d,e,f,g';\nINSERT @foo(col) SELECT N'c,e,b';\nINSERT @foo(col) SELECT N'd,e,f,x,a,e';\n\nDECLARE @string NVARCHAR(MAX) = N'a,b,c,d';\n\n;WITH x AS\n(\n    SELECT f.ID, c.Item FROM @foo AS f\n    CROSS APPLY dbo.SplitStrings(f.col) AS c\n), y AS\n(\n    SELECT ID, Item FROM x\n    UNION\n    SELECT x.ID, s.Item\n        FROM dbo.SplitStrings(@string) AS s\n        CROSS JOIN x\n)\nSELECT DISTINCT ID, Items = STUFF((SELECT ',' + Item \n    FROM y AS y2 WHERE y2.ID = y.ID \n    FOR XML PATH(''), TYPE).value('.[1]', 'nvarchar(max)'), 1, 1, N'')\nFROM y;\n",
    "label": 1
  },
  {
    "text_1": "combining multiple different sql into one",
    "text_2": "SELECT  SUM(status = 1) totalActive,\n        SUM(status = 0) totalInactive\nFROM    tableName\n",
    "label": 1
  },
  {
    "text_1": "Group the Result based on RowCount in Oracle",
    "text_2": "CREATE OR REPLACE FUNCTION partition_by_200\nRETURN stuff_tbl PIPELINED\nAS\n  CURSOR data IS SELECT id, stamp, num FROM stuff ORDER BY id, stamp;\n  curr data%ROWTYPE;\n  acc  stuff_row := stuff_row(NULL,NULL,NULL,NULL);\nBEGIN\n  OPEN data;\n  FETCH data INTO acc.id,acc.stamp,acc.num;\n  acc.last_stamp := acc.stamp;\n\n\n  IF data%FOUND THEN\n  LOOP\n    FETCH data INTO curr;\n\n    IF data%NOTFOUND OR curr.id <> acc.id OR acc.num+curr.num > 200\n    THEN\n      PIPE ROW(stuff_row(acc.id,acc.stamp,acc.last_stamp,acc.num));\n      EXIT WHEN data%NOTFOUND;\n\n      -- reset the accumulator\n      acc := stuff_row(curr.id, curr.stamp, curr.stamp, curr.num);\n    ELSE\n      -- accumulate value\n      acc.num := acc.num + curr.num;\n      acc.last_stamp := curr.stamp;\n    END IF;\n  END LOOP;\n  END IF;\n\n  CLOSE data;\nEND;\n",
    "label": 1
  },
  {
    "text_1": "SQL: Joining two tables with email adresses in SQL Server",
    "text_2": "Results (identical to your desired results):\n| PersonID | CustomerID | FirstName | LastName | Email              | ZipCode |\n| 8712     | 22         | Jeff      | Carson   | jeffcar@mail.com   | 81712   |\n| 8916     | 29         | Jane      | Doe      | jane@doe.net       | 51211   |\n| 9181     | 37         | Gina      | Andersen | gina@gmail.com     | 21147   |\n| 9515     | 37         | Ben       | Andersen | ben88@gmail.com    | 21147   |\n| NULL     | 42         | Brad      | Cole     | brad@company.org   | 39261   |\n",
    "label": 1
  },
  {
    "text_1": "Getting date string from getdate method",
    "text_2": "select replace(replace(replace(\n   convert(varchar(16),getDate(),120),' ',''),'-',''),':','')\n",
    "label": 1
  },
  {
    "text_1": "SQL Server - juxstaposition of verses",
    "text_2": "SELECT zoo.name, animals.species, count(*) AS number\nFROM ANIMALS\nLEFT JOIN zoos ON animals.zoo_id = zoo.id\nGROUP BY zoo.id, species\n",
    "label": 1
  },
  {
    "text_1": "Multiple INNER JOIN returns null",
    "text_2": "SELECT t1.grp_id, \n  t1.email_id, \n  coalesce(t2.sam_subject, '') sam_subject, \n  coalesce(t3.subject, '') subject\nFROM t1\nleft JOIN t2 \n    ON t2.sam_msg_id = t1.email_id \nleft JOIN t3 \n    ON t1.email_id = t3.id\nWHERE t1.grp_id = '1' \n",
    "label": 1
  },
  {
    "text_1": "Shift manipulation in SQL to get counts",
    "text_2": "SELECT EID,\n       sum(case when shift = 'd' then 1 else 0 end) as dayshifts,\n       sum(case when shift = 'n' then 1 else 0 end) as nightshifts,\n       count(distinct case when shift in ('d', 'n') then cast(in_time as date) end) as total\nFROM Attendance a\nWHERE (in_time BETWEEN CONVERT(DATETIME, '2014-01-07 00:00:00', 102) AND\n                       CONVERT(DATETIME, '2014-07-31 00:00:00', 102)) AND\n      PID = 'A002';\n",
    "label": 1
  },
  {
    "text_1": "Android SQLite display åäö",
    "text_2": "<meta charset=\"UTF-8\">\n",
    "label": 1
  },
  {
    "text_1": "Need feedback on an SQL Request (MySQL, GROUP BY behavior)",
    "text_2": "JOIN\n  message m\n    ON m.conversation_id = cu.conversation_id\nJOIN\n  (SELECT conversation_id, MAX(id) AS id FROM message GROUP BY conversation_id) AS filter\n    ON  filter.conversation_id = cu.conversation_id\n    AND filter.id = m.id\n",
    "label": 1
  },
  {
    "text_1": "Storing complete class object into database in iPhone",
    "text_2": "NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];\nNSData * encodedObject = [NSKeyedArchiver archivedDataWithRootObject:rootObject];\n\n[defaults setObject:encodedObject forKey:kSaveArchiveKey];\n[defaults synchronize];\n",
    "label": 1
  },
  {
    "text_1": "Procedurally transform subquery into join",
    "text_2": "   SELECT x.*,\n          COALESCE(z.mc, 0)\n     FROM TABLE_X x\nLEFT JOIN (SELECT y.col,\n                  MAX(y.example_col) 'mc'\n             FROM TABLE_Y y\n         GROUP BY y.col) z ON z.col = x.col\n",
    "label": 1
  },
  {
    "text_1": "Selecting first and last day of 2 separate months only given MM-YYYY date",
    "text_2": "//extract MM/YYYY from 'MM/YYYY-MM/YYYY'\nlocal stringvar MMYYYY := Split({?dates},\"-\")[2];\n//extract MM from 'MM/YYYY'\nlocal numbervar MM := ToNumber(Split(MMYYYY,\"/\")[1]);\n//extract YYYY from 'MM/YYYY'\nlocal numbervar YYYY := ToNumber(Split(MMYYYY,\"/\")[2]);\n//calculate first day of selected month, add a month, subtract a day, return last day of selected month\nDateAdd(\"m\",1,Date(YYYY,MM,1))-1;\n",
    "label": 1
  },
  {
    "text_1": "How to write SQL - check for A5 Or if not exist then A6 AND A7",
    "text_2": "UNION\nSELECT 'A5+A6/A7' AS MSG WHERE NOT EXISTS (<A5 query>)\n                         AND ( NOT EXISTS(<A6 query>) OR NOT EXISTS(<A7 query>) )\n",
    "label": 1
  },
  {
    "text_1": "Incrementing Rank Value in Column",
    "text_2": "select customer, product,\n       row_number() over (partition by customer order by rank) as rank\nfrom t;\n",
    "label": 1
  },
  {
    "text_1": "What is the Best Approach for Database Development Android",
    "text_2": "+----+-------------+---------+---------+---------+---------+---------+---------+\n| id | id_question | choice1 | choice2 | choice3 | choice4 | choice5 | correct |\n+----+-------------+---------+---------+---------+---------+---------+---------+\n",
    "label": 1
  },
  {
    "text_1": "How to display 2 digits after dot in PostgreSQL?",
    "text_2": "select round(cast(your_float_column as decimal(10,2)), 2, 1)\nfrom your_table\n",
    "label": 1
  },
  {
    "text_1": "Dynamically pivoting a table Oracle",
    "text_2": "select c_id,\n  p_id,\n  max(case when r_key= 'KEY1' then r_value  end) KEY1,\n  max(case when r_key= 'KEY2' then r_value  end) KEY2,\n  max(case when r_key= 'KEY3' then r_value  end) KEY3,\n  max(case when r_key= 'KEY4' then r_value  end) KEY4,\n  max(case when r_key= 'KEY5' then r_value  end) KEY5\nfrom s_projectroles\ngroup by c_id, p_id\n",
    "label": 1
  },
  {
    "text_1": "Database design for user entries (using mysql)",
    "text_2": "SELECT fields, i, want from activities WHERE userid=?\n",
    "label": 1
  },
  {
    "text_1": "Delete multiple occurrences of the same ID # and code in a junction table",
    "text_2": "SELECT KHA_ID,\n       ICD_FK,\n       COUNT(1)          -- the number of duplicates\n  FROM ICD_Junction\n GROUP\n    BY KHA_ID,\n       ICD_FK\nHAVING COUNT(1) > 1\n;\n",
    "label": 1
  },
  {
    "text_1": "Send key-value objects to postgres in queries",
    "text_2": "create function get_products(p_mapping text)\n  returns table (name text, location text)\nas \n$$\n  with elements (name, map) as (\n    select json_object_keys(map::json) as name, map::json\n    from json_array_elements_text(p_mapping::json) as map\n  )\n  select name, trim(both '\"' from (map -> name)::text) as location\n  from elements;\n$$\nlanguage sql;\n",
    "label": 1
  },
  {
    "text_1": "How does Select query work with Distinct clause",
    "text_2": "SELECT Dept_id, DISTINCT Job_id\n",
    "label": 1
  },
  {
    "text_1": "How to figure out if mysql index fits entirely in memory",
    "text_2": "InnoDB (Caches Data and Index Pages)\nSELECT FLOOR(SUM(data_length+index_length)/POWER(1024,2)) InnoDBSizeMB\nFROM information_schema.tables WHERE engine='InnoDB';\n",
    "label": 1
  },
  {
    "text_1": "postgresql merge text[]",
    "text_2": " SELECT array_concat(t) FROM a GROUP BY n;\n",
    "label": 1
  },
  {
    "text_1": "how to avoid column in 'where' clause if parameter is 'NOT PASSED' postgresql",
    "text_2": "CREATE TABLE employee\n        ( name varchar NOT NULL PRIMARY KEY\n        , age integer\n        , salary integer\n        );\n\nINSERT INTO employee ( name , age , salary ) VALUES\n ( 'Alice' , 13 , 3 )\n,( 'Bob' , 11 , 5 )\n,( 'Charlotte' , 15 , 9 )\n,( 'David' , 17 , 10 )\n        ;\n",
    "label": 1
  },
  {
    "text_1": "Variant use of the GROUP BY clause in TSQL",
    "text_2": "SELECT O.ID, V.ID\nFROM Originating AS O, ValueSet AS V\nWHERE O.ID = V.OriginatingID\nAND\n(V.OriginatingID, V.DateStamp) IN\n(\n    SELECT OriginatingID, Max(DateStamp)\n    FROM ValueSet\n    GROUP BY OriginatingID\n)\n",
    "label": 1
  },
  {
    "text_1": "Best way to compare VARCHAR2 with CHAR",
    "text_2": "SELECT table1.ID, table2.ID\nFROM table1\nJOIN table2 ON table2.value = RTRIM(table1.value)\nWHERE table1.VALUE = RPAD('123-45', 12)\n",
    "label": 1
  },
  {
    "text_1": "How to create DATE datatype in a create query in oracle database?",
    "text_2": "SQL> select to_date('31/05/14','DD/MM/YY') from dual\n  2  /\n\nTO_DATE('31/05/14','DD/MM/\n--------------------------\nMay       31 2014 12:00 AM\n\nSQL> \n",
    "label": 1
  },
  {
    "text_1": "Oracle: Joins two tables to duplicate rows for 2 table",
    "text_2": "SELECT Table1.*,Table2.* \nFROM Table2,Table1\n",
    "label": 1
  },
  {
    "text_1": "MySQL query returning empty set",
    "text_2": "SELECT *\nFROM a\nLEFT JOIN b ON a.col = c.col // note: joining a->b\nLEFT JOIN c ON a.col = c.col // note: joining a->c\n",
    "label": 1
  },
  {
    "text_1": "Flip the data in sql",
    "text_2": "SELECT PT.[DESCRIPTION] as [Transaction Type],\n       SUM(P.ORIGINAL_AMOUNT) as [AMOUNT (£) CREDIT],\n       SUM( CASE WHEN PR.[Description] = 'Product type 1' \n            THEN P.ORIGINAL_AMOUNT END) [Product 1 (£)],\n       SUM( CASE WHEN PR.[Description] = 'Product type 2' \n            THEN P.ORIGINAL_AMOUNT END) [Product 2 (£)],\n       SUM( CASE WHEN PR.[Description] = 'Product type 3' \n            THEN P.ORIGINAL_AMOUNT END) [Product 3 (£)]\nFROM [X].[dbo].[PAYMENT] P\njoin [X].[dbo].[TABLE1] PT on P.PAYMENT_ID=PT.PAYMENT_TYPE_ID\njoin [X].[dbo].[TABLE2] SO on SO.PAYMENT_TYPE_ID=P.PAYMENT_TYPE_ID\njoin [X].[dbo].[TABLE3] OI on OI.ORDER_ID=SO.SITE_ORDER_ID\njoin [X].[dbo].[TABLE4] PR on PR.Product_id=OI.PRODUCT_ID\nGROUP BY PT.[DESCRIPTION]\n",
    "label": 1
  },
  {
    "text_1": "oracle month to day",
    "text_2": "/* sample of data that you've provided */\nwith t1(mnth,val) as(\n  select 1, 93  from dual union all\n  select 2, 56  from dual union all\n  select 3, 186 from dual union all\n  select 4, 60  from dual\n), \n/*\n    Generates current year dates \n    From January 1st 2014 to December 31st 2014  \n */\ndates(dt) as(\n  select trunc(sysdate, 'YEAR') - 1 + level\n    from dual\n  connect by extract(year from (trunc(sysdate, 'YEAR') - 1 + level)) <= \n             extract(year from sysdate)\n)\n/* \n   The query that performs calculations based on range of dates \n */\nselect sum(val / extract(day from last_day(dt))) as result\n  from dates d\n  join t1\n    on (extract(month from d.dt) = t1.mnth)\n where dt between date '2014-01-17' and        -- January 17th 2014 to    \n                  date '2014-03-31'            -- March 31st 2014\n",
    "label": 1
  },
  {
    "text_1": "Can I use a GROUP BY in the first SELECT when CROSS APPLY is used further on?",
    "text_2": "With \nCTE1 \nas \n( \n    select fe.snap_name,fe.snap_accountid, fe.snap_entitlementcategory, fe.snap_entitlementcode, fi.invoicenumber, fi.totalamount \n    from \n        FilteredInvoice fi \n        join FilteredSNAP_entitlement fe on fi.accountid = fe.snap_accountid \n    group by fe.snap_name,fe.snap_accountid, fe.snap_entitlementcategory, fe.snap_entitlementcode, fi.invoicenumber, fi.totalamount \n)\nSELECT *\nFROM CTE1\n;\n",
    "label": 1
  },
  {
    "text_1": "postgresql - pk versus unique index",
    "text_2": "NOTICE:  drop cascades to table tmp.lutser\nDROP SCHEMA\nCREATE SCHEMA\nSET\nNOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index \"lutser_pkey\" for table \"lutser\"\nCREATE TABLE\nINSERT 0 100000\nDELETE 50051\nVACUUM\n                                                          QUERY PLAN\n-------------------------------------------------------------------------------------------------------------------------------\n Aggregate  (cost=20.28..20.29 rows=1 width=0) (actual time=0.294..0.295 rows=1 loops=1)\n   ->  Index Scan using lutser_pkey on lutser  (cost=0.00..19.03 rows=499 width=0) (actual time=0.015..0.216 rows=487 loops=1)\n         Index Cond: ((id >= 1000) AND (id < 2000))\n Total runtime: 0.343 ms\n(4 rows)\n\nCREATE INDEX\nVACUUM\n                                                         QUERY PLAN\n-----------------------------------------------------------------------------------------------------------------------------\n Aggregate  (cost=19.03..19.04 rows=1 width=0) (actual time=0.232..0.232 rows=1 loops=1)\n   ->  Index Scan using lutser_id on lutser  (cost=0.00..17.79 rows=497 width=0) (actual time=0.033..0.185 rows=487 loops=1)\n         Index Cond: ((id >= 1000) AND (id < 2000))\n Total runtime: 0.266 ms\n(4 rows)\n",
    "label": 1
  },
  {
    "text_1": "Has anyone had any success in unit testing SQL stored procedures?",
    "text_2": "Public MustInherit Class Repository(Of T As Class)\n    Implements IRepository(Of T)\n\n    Private mConnectionString As String = ConfigurationManager.ConnectionStrings(\"Northwind.ConnectionString\").ConnectionString\n    Private mConnection As IDbConnection\n    Private mTransaction As IDbTransaction\n\n    Public Sub New()\n        mConnection = Nothing\n        mTransaction = Nothing\n    End Sub\n\n    Public Sub New(ByVal connection As IDbConnection, ByVal transaction As IDbTransaction)\n        mConnection = connection\n        mTransaction = transaction\n    End Sub\n\n    Public MustOverride Function BuildEntity(ByVal cmd As SqlCommand) As List(Of T)\n\n    Public Function ExecuteReader(ByVal Parameter As Parameter) As List(Of T) Implements IRepository(Of T).ExecuteReader\n        Dim entityList As List(Of T)\n        If Not mConnection Is Nothing Then\n            Using cmd As SqlCommand = mConnection.CreateCommand()\n                cmd.Transaction = mTransaction\n                cmd.CommandType = Parameter.Type\n                cmd.CommandText = Parameter.Text\n                If Not Parameter.Items Is Nothing Then\n                    For Each param As SqlParameter In Parameter.Items\n                        cmd.Parameters.Add(param)\n                    Next\n                End If\n                entityList = BuildEntity(cmd)\n                If Not entityList Is Nothing Then\n                    Return entityList\n                End If\n            End Using\n        Else\n            Using conn As SqlConnection = New SqlConnection(mConnectionString)\n                Using cmd As SqlCommand = conn.CreateCommand()\n                    cmd.CommandType = Parameter.Type\n                    cmd.CommandText = Parameter.Text\n                    If Not Parameter.Items Is Nothing Then\n                        For Each param As SqlParameter In Parameter.Items\n                            cmd.Parameters.Add(param)\n                        Next\n                    End If\n                    conn.Open()\n                    entityList = BuildEntity(cmd)\n                    If Not entityList Is Nothing Then\n                        Return entityList\n                    End If\n                End Using\n            End Using\n        End If\n\n        Return Nothing\n    End Function\nEnd Class\n",
    "label": 1
  },
  {
    "text_1": "MySql Character to Date Format conversion returns null",
    "text_2": "SELECT STR_TO_DATE('26-Nov-2011', '%d-%b-%Y') dte;\n",
    "label": 1
  },
  {
    "text_1": "Is there a group limit for Regep_replace in Oracle? (with regexp_replace issue)",
    "text_2": "SELECT regexp_substr(str, '[^\\[:space:]]+', 1, LEVEL) number_group,  LEVEL \nFROM (SELECT regexp_replace('363031393634816909877808647715885542447721', '([0-9]{4})', '\\1 ') str FROM test)\nCONNECT BY LEVEL <= LENGTH(str) - LENGTH(REPLACE(str, ' ')) + 1;\n",
    "label": 1
  },
  {
    "text_1": "How do i build a hierarchical database with apache Cassandra",
    "text_2": "paths { #colum family \n    \"/some/path\" { # key\n         \"type\" : \"file|directory\" #column, either file or directory, if this is a file or a directory\n         \"data\" : \"??\" # if this is a file, the data for the file.  you don't want to be storing very large files in cassandra in one column\n    }\n}\n",
    "label": 1
  },
  {
    "text_1": "SQl query required for the below Scenario",
    "text_2": "finum       part           fparinum flevel\n25          CF061W          0           1\n26          FA061w          25          2\n27          hrd20600        25          2\n35            sd1201        25              2\n28          f1024           27          3\n",
    "label": 1
  },
  {
    "text_1": "Find differences between table entries in Sqlite3",
    "text_2": "SELECT last.hostname,\n       last.os,\n       last.javaversions,\n       this.javaversions\nFROM hostdata AS last\nJOIN hostdata AS this ON last.entrydate = 'lastmonth'\n                     AND this.entrydate = 'thismonth'\n                     AND last.hostname = this.hostname\nWHERE last.javaversions <> this.javaversions\n",
    "label": 1
  },
  {
    "text_1": "How to write trigger to update row in another table?",
    "text_2": "CREATE TRIGGER dbo.TrgEventsConfigUpdate\nON dbo.EventsConfig\nAFTER UPDATE\nAS \n    UPDATE insp\n    SET IsRepaired = 1\n    FROM dbo.Inspections insp\n    INNER JOIN Inserted i ON i.InspectionId = insp.Id\n    INNER JOIN Deleted d ON d.Id = i.Id\n    WHERE i.[Event] = -1 AND d.[Event] <> -1\n",
    "label": 1
  },
  {
    "text_1": "Adding varchar value and datetime in MS SQL",
    "text_2": "Select Fulltime + CAST(Hour as DATETIME)\n",
    "label": 1
  },
  {
    "text_1": "Mysql - Query UPDATE at vnum END in number 7",
    "text_2": "UPDATE `item_proto_copy2` \nSET `socket_pct`='1' \nWHERE RIGHT(`vnum`, 1) = '7' AND `type`=1\n",
    "label": 1
  },
  {
    "text_1": "Nested Query not executing as expected",
    "text_2": "Select CourseName from Catalog where ID = (Select PrevCoursesID from PreviousCourses where Username = 'admin')\n",
    "label": 1
  },
  {
    "text_1": "TSQL Trying to clean up and cast a messy string field to a decimal to perform a SUM function",
    "text_2": "SELECT CAST(Fare AS MONEY)\nFROM Table1\n",
    "label": 1
  },
  {
    "text_1": "how to order by count when joining another table and using 2 fields to count",
    "text_2": "SELECT \n    SUM(CASE \n        WHEN venue.idVenue=plans.endingAt \n             OR venue.idVenue=plans.startingAt\n        THEN 1\n        ELSE 0\n        END\n    ) AS NumberOf,\n    venue.idVenue\nFROM venue\nINNER JOIN plans ON venue.idVenue=plans.endingAt \n      OR venue.idVenue=plans.startingAt \nWHERE \n    venue.idLocation = 3\nGROUP BY\n    venue.idVenue\n",
    "label": 1
  },
  {
    "text_1": "A database Schema to store a content type and a sub content (ANDROID _ SQLITE :)",
    "text_2": "_id, company_name\n",
    "label": 1
  },
  {
    "text_1": "Passing a variable into an IN clause within a SQL function?",
    "text_2": "SELECT  *\nFROM    tblMyTable\nWHERE   ID IN ( SELECT Value FROM fnNTextToIntTable(@MyList) )\n",
    "label": 1
  },
  {
    "text_1": "Oracle SQL academic issue. Cursors, Loops and Functions",
    "text_2": "DECLARE\nl_max_date DATE:=TO_DATE(1, 'J');--minimum date that can be entered in oracle database\ncursor carcur IS \nSELECT * FROM i_car;\nCURSOR c1(v_car_registration VARCHAR2) IS \n  SELECT * from i_booking a\n  WHERE a.registration=v_car_registration;\n BEGIN\n For car_rec in carcur \n LOOP\n l_max_date:=TO_DATE(1, 'J');\n  for rec in c1(car_rec.registration)\n  loop\n   IF rec.date_reserved > l_max_date \n   then\n    l_max_date:=rec.date_reserved ;\n   end IF;\n  end loop;\n dbms_output.put_line('car_registration--'||car_rec.registration||'the recent date--'||l_max_date);\n END LOOP;\n end;\n",
    "label": 1
  },
  {
    "text_1": "SQL Server : group by week off by 1 day",
    "text_2": "print dateadd(week, datediff(week, 0, '27 jan 2012 00:00'),-1)\nprint dateadd(week, datediff(week, 0, '28 jan 2012 00:00'),-1)\nprint dateadd(week, datediff(week, 0, '29 jan 2012 00:00'),-1)\nprint dateadd(week, datediff(week, 0, '30 jan 2012 00:00'),-1)\nprint dateadd(week, datediff(week, 0, '31 jan 2012 00:00'),-1)\n",
    "label": 1
  },
  {
    "text_1": "How do I extract the elements of xml column?",
    "text_2": "SELECT colunaxml.query('(/(v | a | b | c)/r)')\n",
    "label": 1
  },
  {
    "text_1": "Replacing/Converting 1 to A with Oracle/PLSQL",
    "text_2": "WITH service_level as (select 1 service_level from dual\nunion all\nselect 2 service_level from dual union all\nselect 3 service_level from dual)\nselect decode(service_level,1,'A',2,'B',3,'C') from service_level\nunion all\nSELECT v_wv_wp_crew.*,\n   Substr(v_wv_wp_crew.winter_supp_id, 1, 6)  AS CostCenter,\n   Substr(v_wv_wp_crew.winter_supp_id, 8, 11) AS Crew_Supp_ID\nFROM   v_wv_wp_crew\nWHERE  crew_on_road >= '13-FEB-12'\nAND ( operation = 2\n          OR operation = 3 );\n",
    "label": 1
  },
  {
    "text_1": "LibreOffice Base - Difficulties with SQL query",
    "text_2": "SELECT X.\"Type\", \n       SUM(X.\"Bad\") AS \"Bad\",\n       SUM(X.\"Good\") AS \"Good\",\n       SUM(X.\"Delicious\") AS \"Delicious\",\n       SUM(X.\"Total\") AS \"Total\" \nFROM (SELECT \"Type\",\n          CASEWHEN(\"Taste\" = 'Bad',1,0) AS \"Bad\",\n          CASEWHEN(\"Taste\" = 'Good',1,0) AS \"Good\",\n          CASEWHEN(\"Taste\" = 'Delicious',1,0) AS \"Delicious\",\n          1 AS \"Total\" FROM \"YourTableName\") X \nGROUP BY \"Type\"\n",
    "label": 1
  },
  {
    "text_1": "Redis: Wrong data in wrong tables",
    "text_2": "client1.set(\"someKey\", \"teacherID\", function(err){\n    // ...\n});\n\nclient2.set(\"someKey\", \"studentID\", function(err){\n    // ...\n});\n",
    "label": 1
  },
  {
    "text_1": "Renumbering items in a list with SQL queries?",
    "text_2": "AND id_list = '$id_pl'\n",
    "label": 1
  },
  {
    "text_1": "How to Implement Spring Integration int-jdbc:stored-proc-outbound-gateway with advanced Oracle type IN parameter",
    "text_2": "@Service\n@org.springframework.context.annotation.Lazy\nclass OracleArrayCreator {\n\n    @Autowired\n    DataSource dataSource\n\n    @Autowired\n    Properties internalProperties\n\n    ARRAY create(List<Map> data, String tableName, String recordName) {\n        def recordKeys = internalProperties.getProperty(recordName.replaceFirst(/.*\\./, '')).split(',')\n        def connection = nativeConnection\n        def structDescriptor = StructDescriptor.createDescriptor(recordName, connection)\n\n        def dataArray = []\n\n        data.each { recordMap ->\n            def record = []\n            if (recordMap) {\n                recordKeys.each {\n                    record << recordMap[it]\n                }\n                dataArray << new STRUCT(structDescriptor, connection, record.toArray())\n            }\n        }\n\n        new ARRAY(ArrayDescriptor.createDescriptor(tableName, connection), connection, dataArray.toArray())\n    }\n\n\n    ARRAY create(Map data, String tableName, String recordName) {\n        create([data], tableName, recordName)\n    }\n\n    CLOB convertToClob(String value) {\n        CLOB c = CLOB.createTemporary(nativeConnection, false, CLOB.DURATION_SESSION)\n        c.setString(1L, value)\n        return c\n    }\n\n    Connection getNativeConnection() {\n        DataSourceUtils.getConnection(dataSource).metaData.connection\n    }\n\n}\n",
    "label": 1
  },
  {
    "text_1": "Multi-user web app - Database design",
    "text_2": "Task_Status table\n(user_id, task_id, task_date, completed)\n",
    "label": 1
  },
  {
    "text_1": "Test Remote Database Access Host",
    "text_2": "mysql -h your_ddbb_server_ip -u your_user -p  your_database_name\n",
    "label": 1
  },
  {
    "text_1": "Basic SQL user-defined functions, not working properly",
    "text_2": "SELECT round(calc_winning_percentage(1000, 29), 3);\n",
    "label": 1
  },
  {
    "text_1": "MySQL: query to create a row for every primary key in parent row",
    "text_2": "insert into foo (user_id, name)\nselect id, 'This fixed string'\nfrom users\n",
    "label": 1
  },
  {
    "text_1": "Oracle - order by in subquery of union all",
    "text_2": "select max('MUHC')                                         as org\n     , max(aa)                                             as aa\n     , max(messagetime) keep (dense_rank last order by id) as messagetime \n from buffer_messages\ngroup by aa\n",
    "label": 1
  },
  {
    "text_1": "sql - getting the count of employee in each grade in a specific format",
    "text_2": "SELECT @Grades=coalesce(@Grades + ' ','') +Cast(COUNT(t1.EMP_GRADE) as Varchar(2))+' -'  From @tab1 t\nLeft Join @tab1 t1 On t1.EMP_GRADE= t.EMP_GRADE And  t1.Emp_id= t.Emp_id \nAnd t1.EMP_GRADE<>'A3' -- Replace conditions here\nGroup By t1.EMP_GRADE,t.EMP_GRADE\n",
    "label": 1
  },
  {
    "text_1": "SQL query for to get values from 2 combined table at very fast rate",
    "text_2": "UID     NAME\n1   a\n2   b\n",
    "label": 1
  },
  {
    "text_1": "Comparing partitions of a table and creating index for unique partition in TSQL (if it's possible)",
    "text_2": "    CREATE TABLE TempDB.dbo.Data \n   (\n   ID INT,\n   BusNr INT,\n   Seq INT,\n   StopName CHAR(1),\n   Date DATETIME       \n   )\n   INSERT INTO TempDB.dbo.Data VALUES\n   ( 1,789,1,'A','2015-04-08'),\n   ( 2,789,2,'B','2015-04-08'),\n   ( 3,789,3,'C','2015-04-08'),\n   ( 4,789,4,'D','2015-04-08'),\n   ( 5,789,1,'A','2015-04-16'),\n   ( 6,789,2,'B','2015-04-16'),\n   ( 7,789,3,'D','2015-04-16'),\n   ( 8,789,1,'A','2015-05-10'),\n   ( 9,789,2,'B','2015-05-10'),\n   (10,789,3,'C','2015-05-10'),\n   (11,789,4,'D','2015-05-10'),\n   (12,789,5,'E','2015-05-10')\n\n   CREATE FUNCTION fnConcatenateStopNames (@BusNr INT, @Date DATETIME)\n   RETURNS VARCHAR(MAX)\n   AS \n   BEGIN\nDECLARE @RouteStopList VARCHAR(MAX) = ''\n\nSELECT @RouteStopList = @RouteStopList + ',' + CONVERT(VARCHAR(10),StopName)\nFROM TempDB.dbo.Data D\nWHERE D.BusNr = @BusNr\nAND D.Date = @Date\nORDER BY Seq\n\nRETURN STUFF(@RouteStopList,1,1,'')\n  END\n\n   SELECT BusNr, Stops, ROW_NUMBER() OVER (ORDER BY BusNr, Stops) BusRouteNumber\n   FROM (\nSELECT DISTINCT D.BusNr, dbo.fnConcatenateStopNames (D.BusNr, D.Date) Stops \nFROM TempDB.dbo.Data D\n   ) Data\n",
    "label": 1
  },
  {
    "text_1": "Finding the spanning forest (WITH RECURSIVE, PostgreSQL 9.5)",
    "text_2": "|          allidents |\n|--------------------|\n|   Lydia,Mary,Nancy |\n| Albert,Bob,Charles |\n|                X,Y |\n|                Zoe |\n",
    "label": 1
  },
  {
    "text_1": "why does this insert statement not work in mysql?",
    "text_2": "INSERT INTO t1 \nSELECT * FROM t1;\n",
    "label": 1
  },
  {
    "text_1": "Combining 2 select statements in the same query on one column",
    "text_2": "WITH A AS\n(\n    select a,b,c,d from tablea;\n),\nB AS \n(\n    select d,e,f,g from tableb;\n)\nSELECT a, b, c, A.d, e, f, g \nFROM A\nINNER JOIN B\n  ON A.d = B.d\n",
    "label": 1
  },
  {
    "text_1": "run sql query from two tables with where clause from one table",
    "text_2": "SELECT SUM(t1.Payments) \nfrom Table1 t1 \nJOIN Table2 t2 on t1.SSN = t2.SSN and t2.City = 'New York'\n",
    "label": 1
  },
  {
    "text_1": "SQL Server 2005 \"FOR XML PATH\" Multiple tags with same name",
    "text_2": "<person xmlns:xsi=\"uri\">\n  <description xsi:type=\"me:age\">32</description>\n  <name>Alice</name>\n  <description xsi:type=\"me:height\">6 Foot</description>\n</person>\n<person xmlns:xsi=\"uri\">\n  <description xsi:type=\"me:age\">24</description>\n  <name>Bob</name>\n  <description xsi:type=\"me:height\">5 Feet 5 Inches</description>\n</person>\n",
    "label": 1
  },
  {
    "text_1": "MySQL: Clone multiple rows in Table A and related rows in Table B",
    "text_2": "insert into b (a_fk, some_field)\nselect \n    (select max(a2.id) from a a2\n    where a2.id <> a1.id\n    and a2.field1 = a1.field1\n    and a2.field2 = a1.field2\n    and a2.field3 = a1.field3), \n    b.some_field\nfrom b\njoin a a1 on a1.id = b.a_fk\nwhere (criteria)\n",
    "label": 1
  },
  {
    "text_1": "Not retrieving any data from a search query",
    "text_2": "SELECT u FROM Userdetails u WHERE u.username = :username\n",
    "label": 1
  },
  {
    "text_1": "Group query and top n records SQL",
    "text_2": "SELECT pid, min(Price)\nfrom table\nWhere Color='green'\ngroup by pid\n",
    "label": 1
  },
  {
    "text_1": "Update with nested subquery (sum) to get restricton on update clause",
    "text_2": "UPDATE table1 W\n  INNER JOIN (\n    SELECT B.field6, SUM(A.field2) AS field2 \n    FROM table2 A\n      INNER JOIN table3 B ON A.id = B.id\n      INNER JOIN table4 P ON P.field6 = B.field6\n    GROUP BY B.field6\n  ) B ON W.field6 = B.field6\nSET W.Field1 = B.Field2\n",
    "label": 1
  },
  {
    "text_1": "SQL Query. limit an update per rows if condition is X and Y for the same ID number",
    "text_2": "update customers c\n    set Customer_OverallPoints = (select (case when sum(t.Trans_PointsEarned) > 4 then 4\n                                               else sum(t.Trans_PointsEarned)\n                                          end)\n                                   from tblTrans t\n                                   where t.TransId = c.CustomerId\n                                  );\n",
    "label": 1
  },
  {
    "text_1": "Scala ActiveRecord performance issue when used with play framework",
    "text_2": "User.where(_.email === \"test\")\n    .select(u => User(u.email, u.firstName, u.surname))\n    .headOption\n",
    "label": 1
  },
  {
    "text_1": "MYSQL SELECT statement inside CONCAT function",
    "text_2": "SELECT\n  foo.latest_id,\n  CONCAT_WS('<-', a.date, foo.group_concat) AS date_chain\nFROM(\n  SELECT  \n    latest_id, \n    GROUP_CONCAT(date ORDER BY date DESC SEPARATOR '<-') AS group_concat\n  FROM alias\n  WHERE latest_id IS NOT NULL\n  GROUP BY latest_id\n) foo\nLEFT JOIN alias a ON\n  foo.latest_id = a.id\n",
    "label": 1
  },
  {
    "text_1": "How to do Group by operation in SQL?",
    "text_2": "|           FORM_TITLE | COLUMN_1 |\n|----------------------|----------|\n| EXTERNAL - pass/fail |        2 |\n|     Test - pass/fail |        0 |\n",
    "label": 1
  },
  {
    "text_1": "Append results from one column into results of another column",
    "text_2": "use test\nDROP TABLE IF EXISTS colors;\nCREATE TABLE colors (color VARCHAR(20),old_color VARCHAR(20));\nINSERT INTO colors VALUES\n('red','dark red '),\n('blue','navy blue'),\n('red','light red'),\n('green','green');\nSELECT * FROM colors;\nSELECT * FROM\n(SELECT DISTINCT color FROM colors\nUNION SELECT DISTINCT old_color color FROM colors) A;\n",
    "label": 1
  },
  {
    "text_1": "MySQL Delete From Select",
    "text_2": "DELETE \n  FROM tbl_rate \n WHERE Rate_ID IN\n(\n  SELECT Rate_ID\n    FROM\n  (\n    SELECT Rate_ID...  --- Your original query goes here\n  ) q\n);\n",
    "label": 1
  },
  {
    "text_1": "Best way to exclude outdated data from a search in PostgreSQL",
    "text_2": "INSERT INTO idx_control(tbl, value)\nVALUES ('mytbl', '2013-1-1 0:0');\n",
    "label": 1
  },
  {
    "text_1": "Getting a sum for every distinct value in a database",
    "text_2": "SELECT m.name, count(mp.player_id) as count\nFROM managers_players mp\ninner join managers m\non  mp.manager_id =  m.id\ninner join players p\non p.id = mp.player_id\ngroup by m.id\norder by count DESC;\n",
    "label": 1
  },
  {
    "text_1": "Dynamic Multi Insert with DBI placeholders for many sets of VALUES",
    "text_2": "my $stmt = 'UPDATE Widget SET foo=?'\nmy @params = $foo;\n\nif ($set_far) {\n   $stmt .= ', far=?';\n   push @params, $far;\n}\n\n{\n   my @where;\n\n   if ($check_boo) {\n      push @where, 'boo=?';\n      push @params, $boo;\n   }\n\n   if ($check_bar) {\n      push @where, 'bar=?';\n      push @params, $bar;\n   }\n\n   $stmt .= ' WHERE ' . join ' AND ', map \"($_)\", @where\n      if @where;\n}\n\n$dbh->do($stmt, undef, @params);\n",
    "label": 1
  },
  {
    "text_1": "Oracle where condition priority",
    "text_2": "SELECT COUNT(*) FROM TAB WHERE B = 0 AND IS_NUMBER(A) = 123;\n",
    "label": 1
  },
  {
    "text_1": "SQL: group by -1 is doing nothing with grouping by other columns?",
    "text_2": "group by a, c, (case when a = 'F' then b end)\n",
    "label": 1
  },
  {
    "text_1": "delete results of a select with a JOIN",
    "text_2": "DELETE FROM users \nUSING users AS u LEFT JOIN images AS i ON u.id = i.user_id \nWHERE i.user_id IS NULL;\n",
    "label": 1
  },
  {
    "text_1": "Compare dates same column mySQL Laravel",
    "text_2": "$tasks = DB::table('tasks')\n->select(array(DB::raw(\"TIMESTAMPDIFF(DAY, (SELECT MIN(start) FROM tasks), start) AS offset\"), DB::raw(\"TIMESTAMPDIFF(DAY, start, end) AS length\"), 'user_id', 'name', 'desc','start','end','finished'))\n->where('temp_id', $id)\n->orderBy('start')\n->get();\n",
    "label": 1
  },
  {
    "text_1": "Database design with multiple nested tables",
    "text_2": "    ; with Property1 as(\n    SELECT\n    proc.Id as ProcessId,\n    prop.Name,\n    rrp.Value\n    FROM Subject s\n    LEFT JOIN Process proc\n    ON s.SubjectId = proc.SubjectId\n    LEFT JOIN RelationshipProcessProperty rpp\n    on proc.ProcessId = rpp.ProcessId\n    LEFT JOIN Property prop\n    on rpp.PropertyId = prop.PropertyId\n    WHERE\n    s.Name = \"Subject1\"\n    AND\n    proc.Name = \"Process1\"\n    AND\n    prop.Name = \"Property1\"\n    )\n\n    , Property2 as(\n    SELECT\n    proc.Id as ProcessId,\n    prop.Name,\n    rrp.Value\n    FROM Subject s\n    LEFT JOIN Process proc\n    ON s.SubjectId = proc.SubjectId\n    LEFT JOIN RelationshipProcessProperty rpp\n    on proc.ProcessId = rpp.ProcessId\n    LEFT JOIN Property prop\n    on rpp.PropertyId = prop.PropertyId\n    WHERE\n    s.Name = \"Subject1\"\n    AND\n    proc.Name = \"Process1\"\n    AND\n    prop.Name = \"Property2\"\n    )\n\n    SELECT\n    p1.Name,\n    p1.Value,\n    p2.Name,\n    p2.Value\n    FROM\n    Property1 p1\n    LEFT JOIN Property2 p2\n    on p1.ProcessId = p2.ProcessId\n",
    "label": 1
  },
  {
    "text_1": "JFreeChart using numeric query ORACLE",
    "text_2": "select intrvl || ' with value '|| count(*) v\nfrom\n(select case \n           when time >= 23 then '23 =< TIME'\n           when time < 23 and time >= 22.3 then '23 > TIME >= 22,3'\n           when time < 22.3 and time >= 21.6 then '22,3 > TIME >= 21,6'\n           when time < 21.6 and time >= 20.9 then '21,6 > TIME >= 20,9'\n           else '20,9 > TIME'\n        end   intrvl, time\nfrom t)\ngroup by intrvl\n",
    "label": 1
  },
  {
    "text_1": "SQL How to transform ROWS to COLUMNS and COLUMNS TO ROWS? db2",
    "text_2": "CLASS       ADSL   VOIP   IPTV\n\nIN           1     15     20\nOUT          5     12     14\nINPROGRESS   10    11     17\n",
    "label": 1
  },
  {
    "text_1": "right join does not work properly",
    "text_2": "SELECT *\n  FROM (SELECT enid\n             , SUM(COMMENT) AS Comments\n          FROM entity_epoch\n          GROUP BY enid) a\n        RIGHT JOIN\n        entity B ON A.enid = B.enid\n",
    "label": 1
  },
  {
    "text_1": "@@IDENTITY and trigger issue",
    "text_2": "WITH\n  sorted_data AS\n(\n  SELECT\n    ROW_NUMBER() OVER (ORDER BY field1) AS set_id,   -- DO NOT include a PARTITION here\n    *\n  FROM\n    inserted\n)\nINSERT INTO\n  myTable (\n    id,\n    field1,\n    field2\n  )\nSELECT\n  (SELECT ISNULL(MAX(id), 0) FROM myTable WITH(TABLOCKX)) + set_id,\n  @p1,\n  @p2\nFROM\n  sorted_data\n",
    "label": 1
  },
  {
    "text_1": "Getting the value of no grouping column",
    "text_2": "with CTE AS (SELECT col1 , MAX( col3 ) AS mx3 FROM myTable GROUP BY col1)\nSELECT A.*\nFROM MyTable A\nINNER JOIN CTE\n on A.col1 = B.Col1\nand A.col3= cte.mx3\n",
    "label": 1
  },
  {
    "text_1": "Split string and iterate for each value in a stored procedure",
    "text_2": "SQL> set serveroutput on\nSQL> EXEC get_query('COMP1,COMP2,COMP3,COMP4');\nCompany code no.1 = COMP1\nCompany code no.2 = COMP2\nCompany code no.3 = COMP3\nCompany code no.4 = COMP4\n\nPL/SQL procedure successfully completed.\n\nSQL>\n",
    "label": 1
  },
  {
    "text_1": "How to do autoincrement based on last value from another table?",
    "text_2": "INSERT INTO @t (ID,VID,Sname,Rname)\nSelect (select MAX(ID) FROM @t) + id as Id,ROW_NUMBER()OVER(partition by id ORDER BY VID)VID,Sname,Rname from @tt\n",
    "label": 1
  },
  {
    "text_1": "How can I compare time in SQL Server?",
    "text_2": "declare @mytime datetime\nset @mytime = convert(datetime,@myfloat)\nselect @mytime\n-- Shows 1900-01-01 19:47:16.123\n",
    "label": 1
  },
  {
    "text_1": "Count columns of joined table",
    "text_2": "WHERE  l.local_date_time >= '2014-12-01'\nAND    l.local_date_time <  '2014-12-31'\n",
    "label": 1
  },
  {
    "text_1": "SQL If A Then B Else C",
    "text_2": "DECLARE @temp_Customers TABLE (@cust int)\n\nIF (@Customers IS NOT NULL)\nBEGIN\n INSERT INTO @temp_Custoers\n SELECT * FROM dbo.iter$ListToTable(@Customers)\nEND\n",
    "label": 1
  },
  {
    "text_1": "Sql Query to count same date entries",
    "text_2": "SELECT COUNT(1) AS entries, DATE_FORMAT(created_at,'%Y-%c') as month\nFROM wp_frm_items\nWHERE user_id =1\nGROUP BY DATE_FORMAT(created_at,'%Y-%c')\n",
    "label": 1
  },
  {
    "text_1": "Improving join query postgresql/postgis",
    "text_2": "SELECT statistics.*,\n       st_x(st_centroid(st_transform(geometry.geom, 2154))) AS x,\n       st_y(st_centroid(st_transform(geometry.geom, 2154))) AS y\nFROM statistics\nJOIN geometry ON statistics.id = geometry.id \n",
    "label": 1
  },
  {
    "text_1": "replace value in varchar(max) field with join",
    "text_2": "--setup\n    if object_id('dbo.[Lookup]') is not null\n        drop table dbo.[Lookup];\n    go\n    if object_id('dbo.fn_ReplaceLookups') is not null\n        drop function dbo.fn_ReplaceLookups;\n    go\n\n    create table dbo.[Lookup] (LookupName varchar(100) primary key, LookupValue varchar(100));\n    insert into dbo.[Lookup]\n        select '##placeholder130##','Dog' union all\n        select '##myPlaceholder##','Cat' union all\n        select '##oneMore##','Cow' union all\n        select '##test##','Horse';\n    go\n\n    create function [dbo].[fn_ReplaceLookups](@input varchar(max))\n    returns varchar(max)\n    as\n    begin\n\n        declare @xml xml;\n        select @xml = cast(('<r><i>'+replace(@input,'##' ,'</i><i>')+'</i></r>') as xml);\n\n        --extract the potential tokens\n        declare @LookupsInString table (LookupName varchar(100) primary key);\n        insert into @LookupsInString\n            select  distinct '##'+v+'##'\n            from    (   select  [v] = r.n.value('(./text())[1]', 'varchar(100)'),\n                                [r] = row_number() over (order by n)\n                        from    @xml.nodes('r/i') r(n)\n                    )d(v,r)\n            where   r%2=0;\n\n        --tokenize the input\n        select  @input = replace(@input, l.LookupName, l.LookupValue)\n        from    dbo.[Lookup] l\n        join    @LookupsInString lis on \n                l.LookupName = lis.LookupName;\n\n        return @input;\n    end\n    go          \n    return            \n\n--usage\n    declare @Notes table ([Id] int primary key, notes varchar(100));\n    insert into @Notes\n        select 1, 'This is some notes ##placeholder130## this ##myPlaceholder##, ##oneMore##. End.' union all\n        select 2, 'Second row...just a ##test##.';\n\n    select  *,\n            dbo.fn_ReplaceLookups(notes)\n    from    @Notes;\n",
    "label": 1
  },
  {
    "text_1": "How to get number of occurance and the field value from a table",
    "text_2": "SELECT name, count(*) cnt\nFROM your_table\nGROUP BY name\nHAVING cnt > 1;\n",
    "label": 1
  },
  {
    "text_1": "How to implement a cross-table global unique ID in MySQL5 (for comments assignment)",
    "text_2": "some_id\ncomment_id\n",
    "label": 1
  },
  {
    "text_1": "How can I put a condition on a column on creation",
    "text_2": "ALTER TABLE `movies`\nADD constraint checkyear check (`year`in (2014,2015))\n",
    "label": 1
  },
  {
    "text_1": "MySQL ORDER BY keyword match",
    "text_2": "select *\nfrom test\norder by\n    CASE WHEN instr(name, 'tac') = 0 then 1 else 0 end,\n    instr(name, 'tac') desc;\n",
    "label": 1
  },
  {
    "text_1": "Combine three tables into one, or too many columns?",
    "text_2": "SELECT link_id, SUM(clicks)\nFROM period_stats\nWHERE period between @dateTime1 AND @dateTime2\nGROUP BY ...\n",
    "label": 1
  },
  {
    "text_1": "CakePHP. Where to put scripts that populate database?",
    "text_2": "class AltersController extends AppController {\n\n    public function edit($param1, $param2) {\n         // code here to access the model\n         $this->Alter->do_stuff();\n    }\n\n}\n",
    "label": 1
  },
  {
    "text_1": "Detect duplicated registries in Oracle",
    "text_2": "ColumnA ColumnB\n1       A\n2       A\n3       A\n",
    "label": 1
  },
  {
    "text_1": "Working with multiple tables",
    "text_2": "   SELECT o.itemID, \n          i.description \n     FROM orders o \nLEFT JOIN items i\n       ON i.id = o.itemID\n GROUP BY o.itemID\n   HAVING COUNT(*) = 1;\n",
    "label": 1
  },
  {
    "text_1": "complex join in scope in Rails ActiveRecord",
    "text_2": "scope :event_stream_for, lambda{ |user\n  joins(:events). # or joins(\"LEFT JOIN events ON events.user_id = users.id\").\n  where([\"target_type=?\", \"Event\"]) \n}\n",
    "label": 1
  },
  {
    "text_1": "Can an INSERT operation result in a deadlock?",
    "text_2": "begin transaction\ninsert into A values(1)\n",
    "label": 1
  },
  {
    "text_1": "Fast way to get the difference of 2 columns in MySQL",
    "text_2": "SELECT DISTINCT page_title FROM a\n",
    "label": 1
  },
  {
    "text_1": "Can I update two identical tables in with one query - MySQL",
    "text_2": "UPDATE tablea, tableb\nSET    tablea.value = 'z', tableb.value = 'z'\nWHERE  (tablea.id = tableb.id) AND (tablea.id = '3');\n",
    "label": 1
  },
  {
    "text_1": "Separate tables for 1-1 relationship",
    "text_2": "Internship 1-----0,n Answer 0,n------1 Question\n",
    "label": 1
  },
  {
    "text_1": "Access alias in subquery",
    "text_2": "SELECT INC.OIN\n  ,(SELECT COUNT(*)\n    FROM Incident \n    WHERE CreatedOn BETWEEN '2011/1/1' AND '2011/1/31'\n    AND Incident.OwnerIdName = INC.OIN ) as CasesOpened\n  ,(SELECT COUNT(*)\n    FROM IncidentResolution \n    WHERE ActualEnd BETWEEN '2011/1/1' AND '2011/1/31'\n            AND Incident.OwnerIdName = INC.OIN ) as CasesClosed\nfrom \n(Select OwnerIdName OIN\n  FROM Incident) INc \n",
    "label": 1
  },
  {
    "text_1": "INSERTs with sequential GUID key on clustered index not significantly faster",
    "text_2": "batchNumber          NEWSEQUENTIALID()\n-------------------- -----------------\n1                    2016\n2                    1820\n3                    1886\n4                    1870\n5                    4873\n6                    3473\n7                    3730\n8                    3690\n9                    1983\n10                   2020\n11                   1906\n12                   5596\n13                   2100\n14                   1950\n15                   2096\n16                   1876\n17                   5196\n18                   2110\n19                   2113\n20                   7713\n",
    "label": 1
  },
  {
    "text_1": "How can I get a COUNT(col) ... GROUP BY to use an index?",
    "text_2": "SQL> desc big_table\n Name                                  Null?    Type\n -----------------------------------  ------    -------------------\n ID                                             NUMBER\n COL1                                           NUMBER\n COL2                                           VARCHAR2(30 CHAR)\n COL3                                           DATE\n COL4                                           NUMBER\n",
    "label": 1
  },
  {
    "text_1": "Like statment not returning correct values",
    "text_2": " $keyword =  (int) $_GET['term']. \"%\" ;\n",
    "label": 1
  },
  {
    "text_1": "Import DayOfWeek Name as Bit in SQL",
    "text_2": "JobID   JobDescription  M   Tu  W   Th  F   Sa  Su\n100     Backup          1   0   0   0   0   0   0\n101     Reports         1   0   0   0   0   0   0\n102     Cleaning        0   1   0   0   0   0   0\n",
    "label": 1
  },
  {
    "text_1": "SQL Query: How to rearrange the output (Transpose?)",
    "text_2": "| COL | CENTRAL |  EAST | NORTH | SOUTH |  WEST |\n-------------------------------------------------\n|  M1 |    6233 |  3944 |  6233 | 12440 | 33736 |\n|  M2 |    3636 | 14584 | 17743 | 20017 | 30532 |\n|  M3 |       2 |     2 |     2 |     7 |     5 |\n|  M4 |    6233 |   728 |  6233 |  8057 |  2184 |\n|  M5 |    6717 |   953 |  6717 |  9724 |  2056 |\n|  M6 |    6825 |   970 |  7369 | 13418 |  1944 |\n|  M7 |    6825 |   970 |  7369 | 13418 |  1944 |\n",
    "label": 1
  },
  {
    "text_1": "Concatenate fields using connect by prior",
    "text_2": "with my_tabe as\n(\n    select 'M01' as scycle, '1' as sdate from dual union\n    select 'M01' as scycle, '2' as sdate from dual union\n    select 'M02' as scycle, '1' as sdate from dual\n)\nselect scycle, listagg (sdate, ',') \nwithin group (order by sdate) res\nfrom my_tabe\ngroup by scycle\n/ \n",
    "label": 1
  },
  {
    "text_1": "Oracle Spatial Geometry covered by the most",
    "text_2": "STATE                                AREA\n------------------------------ ----------\nWyoming                        8100.64988\n\n1 row selected.\n",
    "label": 1
  },
  {
    "text_1": "Should I split this table into two?",
    "text_2": "1    bis\n",
    "label": 1
  },
  {
    "text_1": "Sql query - getting rid of hard-coded values",
    "text_2": "CREATE TABLE constants (\n  constant_set_id  AS INT,\n  constant_name    AS VARCHAR(16),\n  value            AS AS VARCHAR(3)\n)\n\nINSERT INTO constants SELECT 1, 'Illustrated',  'I'\nINSERT INTO constants SELECT 1, 'FrontPage',    'FP'\nINSERT INTO constants SELECT 1, 'BackPage',     'BP'\nINSERT INTO constants SELECT 1, 'EDLP',         'ELP'\nINSERT INTO constants SELECT 1, 'SpecialPromo', 'PR'\n\nSELECT\n  Name,\n  MAX(CASE WHEN constants.constant_name = 'Illustrated' AND CHARINDEX(constants.value, data.S_Data) > 0 THEN 1 ELSE 0 END)   AS Illustrated,\n  etc, etc\nFROM\n  data\nINNER JOIN\n  constants\n    ON constants.constant_set_id = 1\nGROUP BY\n  data.name\n",
    "label": 1
  },
  {
    "text_1": "Getting Access to return blank records?",
    "text_2": "Table: timeworked\nemployeeid  fiscalmonth projectcode hoursworked\n1           janfy13     101         16\n2           janfy13     101         11\n1           janfy13     102         8\n\nTable: employees\n[employee id]   manager\n1               Manager A\n2               Manager B\n\nTable: kronoscodes\nprojectcode projectname\n101         Project 101\n102         Project 102\n103         Project 103\n",
    "label": 1
  },
  {
    "text_1": "Merge NAME query into second query matching ID numbers",
    "text_2": "DECLARE @FROM DATETIME, @TO DATETIME\n\n    SET @FROM = '6/1/12 3:00 AM'\n    SET @TO   = '8/1/12 3:00 AM'\n\nSELECT et.EntityName, Note, X.EntityName \"CSR\", ModifiedDate FROM EntityRelations.AssistanceFlags af WITH (nolock) \n  JOIN EntityRelations.Entities et WITH (nolock) ON af.EntityId = et.EntityId \nLEFT OUTER JOIN (SELECT EntityID, EntityName FROM EntityRelations.Entities  \n         WHERE EntityID IN (SELECT ModifiedByEntityID FROM EntityRelations.AssistanceFlags af WITH (nolock) \n         JOIN EntityRelations.Entities et WITH (nolock) ON af.EntityId = et.EntityId \n         WHERE ModifiedDate BETWEEN @FROM AND @TO))X ON X.EntityID = af.ModifiedByEntityID  \n WHERE ModifiedDate BETWEEN @FROM AND @TO\n ORDER BY ModifiedDate ASC \n",
    "label": 1
  },
  {
    "text_1": "Get xmltype in field in Oracle column CLOB",
    "text_2": "select xmlquery('/*/@type'\n  passing xmltype(<clob column>)\n  returning content)\nfrom <your table>;\n",
    "label": 1
  },
  {
    "text_1": "How to get the latest message in each conversation of a certain user in SQL?",
    "text_2": "SELECT DISTINCT ON (user_id) *\nFROM (\n   SELECT 'out' AS type, id, receiver_id AS user_id, body, created_at\n   FROM   messages \n   WHERE  sender_id = 1\n\n   UNION  ALL\n   SELECT 'in' AS type, id, sender_id AS user_id, body, created_at\n   FROM   messages \n   WHERE  receiver_id = 1\n   ) sub\nORDER  BY user_id, created_at DESC;\n",
    "label": 1
  },
  {
    "text_1": "Dynamic SQL column value duplicate and difference detection merge query",
    "text_2": "UPDATE myTable \n    INNER JOIN temp \n      ON [myTable].ID=temp.ID \nSET myTable.merged= [temp].[merged];\n",
    "label": 1
  },
  {
    "text_1": "sql select most recent datetime for each member",
    "text_2": "SELECT \n    cm.FNAME, \n    cm.LNAME, \n    cl.entry_access_point, \n    cl.date_entered, \n    cl.res_id, \n    dbo.HourMinuteSecond(cl.date_entered, getUTCDate())[Day:Hour:Minute:Second]\n    FROM cred.members cm, cred.allocate_log cl\n    WHERE cm.member_id = cl.member_id AND\n        cl.date_exited IS NULL AND \n        cl.evt_id = @eventId AND\n        date_entered >= ALL (\n            SELECT cl.date_entered\n            FROM cred.allocate_log cls\n            WHERE cls.member_id = cm.member_id AND cls.evt_id = cl.evt_id)\n    ORDER BY cl.date_entered\n",
    "label": 1
  },
  {
    "text_1": "Sql: determine an event's active period from start date and end date split in 2 tables",
    "text_2": "CREATE TABLE eventstart\n        ( event VARCHAR NOT NULL\n        , zdate date\n        );\nINSERT INTO eventstart(event,zdate) VALUES\n ( 'Core training' , '2011-01-01' )\n,( 'Certification reviews' , '2011-02-23' )\n,( 'Core training' , '2011-05-15' )\n,( 'Abc Event' , '2011-11-24' )\n        ;\n\n\nCREATE TABLE eventend\n        ( event VARCHAR NOT NULL\n        , zdate date\n        );\nINSERT INTO eventend(event,zdate) VALUES\n ('Core training' , '2011-01-05' )\n,('Certification reviews' , '2011-02-24' )\n,('Core training' , '2011-05-18' )\n,('Abc Event' , '2011-11-30' )\n        ;\n\nWITH    s AS (\n        SELECT ss.event, ss.zdate\n        , ROW_NUMBER() OVER( PARTITION BY ss.event ORDER BY ss.zdate) AS zrnk\n        FROM eventstart ss\n        )\n        ,e AS (\n        SELECT ee.event, ee.zdate\n        , ROW_NUMBER() OVER( PARTITION BY ee.event ORDER BY ee.zdate) AS zrnk\n        FROM eventend ee\n        )\nSELECT s.event\n       , s.zdate AS sdate\n       , e.zdate AS edate\nFROM s\nLEFT JOIN e ON e.event = s.event AND s.zrnk = e.zrnk\nWHERE s.zdate <= COALESCE(e.zdate , s.zdate) -- safety valve ;-)\n        ;\n",
    "label": 1
  },
  {
    "text_1": "how to store data to database in HTML5",
    "text_2": "Blog Entry:\nMy Safari Browser SQLite Database Hello World Example\n\nAuthor:\nBen Nadel / Kinky Solutions\n\nLink:\n[http://www.bennadel.com/index.cfm?event=blog.view&id=1940][2]\n\nDate Posted:\nJun 11, 2010 at 9:38 AM\n",
    "label": 1
  },
  {
    "text_1": "SQL qn:- comparing data in rows",
    "text_2": "seq  number\n---  ------\n  1    1.88\n  2    9.99\n  3    8.76\n  4    9.88\n",
    "label": 1
  },
  {
    "text_1": "Getting Ranges from a series of numbers from a table and storing all ranges in a string variable in PLSQL/Oracle Forms",
    "text_2": "SQL> SET SERVEROUTPUT ON\nSQL> BEGIN\n  2     p_get_list;\n  3  END;\n  4  /\n1-3,5-7,10-12,20-20\n\nPL/SQL procedure successfully completed.\n",
    "label": 1
  },
  {
    "text_1": "SQL Server 2005: Scale of numeric expression changes when adding SUM()",
    "text_2": "--Test [1] SELECT t.code, t.total - t.rem AS diff\ncode diff   diff_BaseType  diff_Precision diff_Scale\n---- ------ -------------- -------------- ----------\n001  6.1011 numeric        16             4\n\n--Test [2] SELECT t.code, SUM(t.total - t.rem) AS diff\ncode diff   diff_BaseType diff_Precision diff_Scale\n---- ------ ------------- -------------- ----------\n001  6.1011 numeric       38             4\n\n--Test [3] SELECT t.code, ..., SUM(t.total) - SUM(t.rem) AS diff\ncode SUM_total SUM_rem diff SUM_total_BaseType SUM_total_Precision SUM_total_Scale SUM_rem_BaseType SUM_rem_Precision SUM_rem_Scale diff_BaseType diff_Precision diff_Scale\n---- --------- ------- ---- ------------------ ------------------- --------------- ---------------- ------------------------------- ------------- -------------- ----------\n001  11.78     5.6789  6.10 numeric            38                  2               numeric          38                4             numeric       38             2\n",
    "label": 1
  },
  {
    "text_1": "Order Tables Schema Issue",
    "text_2": "OrderId (Primary Key)\nProductGroupId \n^(Now here with a ProductGroupId you will get a list of products(Multiple))\nCategoryId (Foreign Key)\nQuantity \nCost \nEmployeeId (Foreign Key)\n",
    "label": 1
  },
  {
    "text_1": "Employees and departments database query with Sql ",
    "text_2": "select a.employeeid \nfrom dbo.EmpDept a, dbo.EmpDept b\nwhere a.employeeid = b.employeeid \n  and a.deptid = 1\n  and b.deptid = 2;\n",
    "label": 1
  },
  {
    "text_1": "Optimize tables MySQL",
    "text_2": "select ng.*,\n       (select kw_kd\n        from kw_domain kd\n        where kd.domain_kd = ng.id_domain and kd.selected_kd = 1\n        order by kd.id_kd desc\n        limit 1\n       ) as kw_kd\nfrom domain ng;\n",
    "label": 1
  },
  {
    "text_1": "Check if field in SQL contains specific alphanumeric format",
    "text_2": "SELECT * FROM [dbo].[TableName] \nWHERE [FieldName] NOT LIKE '[A-Z][0-9][0-9][0-9][0-9][0-9][0-9]'\n",
    "label": 1
  },
  {
    "text_1": "SQL Join Query help",
    "text_2": ";with TravoltaMovies as\n(\n    select\n     m.yr\n    ,count(*) as [Count]\n    from actor as a\n        join casting as c\n            join movie as m\n            on m.movieid = c.movieid\n        on c.actorid = a.actorid\n    where a.name = 'John Travolta'\n    group by m.yr\n)\nselect\n*\nfrom TravoltaMovies as tm\nwhere tm.[Count] = (select max([Count]) from TravoltaMovies)\n",
    "label": 1
  },
  {
    "text_1": "Recursive SQL - count number of descendants in hierarchical structure",
    "text_2": "WITH\nCTE\nAS\n(\n    SELECT\n        T.ID AS StartID\n        ,T.ID\n        ,T.name\n        ,T.Advisor1ID\n        ,T.Advisor2ID\n        ,1 AS Lvl\n    FROM @T AS T\n\n    UNION ALL\n\n    SELECT\n        CTE.StartID\n        ,T.ID\n        ,T.name\n        ,T.Advisor1ID\n        ,T.Advisor2ID\n        ,CTE.Lvl + 1 AS Lvl\n    FROM\n        @T AS T\n        INNER JOIN CTE \n            ON CTE.ID = T.Advisor1ID\n            OR CTE.ID = T.Advisor2ID\n)\n,CTE_Distinct\nAS\n(\n    SELECT DISTINCT\n        StartID\n        ,ID\n    FROM CTE\n)\nSELECT\n    CTE_Distinct.StartID\n    ,T.name\n    ,COUNT(*) AS DescendantCount\nFROM\n    CTE_Distinct\n    INNER JOIN @T AS T ON T.ID = CTE_Distinct.StartID\nGROUP BY\n    CTE_Distinct.StartID\n    ,T.name\nORDER BY CTE_Distinct.StartID;\n",
    "label": 1
  },
  {
    "text_1": "Splitting a table into two join tables",
    "text_2": "insert into phone(phone,type,user_id)\nselect phone,type,user_id from userphone\n",
    "label": 1
  },
  {
    "text_1": "SQL optional join and default value",
    "text_2": "ORDER BY parent.data->>'f27' ASC NULLS LAST\n",
    "label": 1
  },
  {
    "text_1": "Get counts of UNIQUE records OVERALL per value",
    "text_2": "create table nr_pvo_120 (\n   otherid,\n   fax\n)\nas\nselect 12365092    , 2762364204 from dual union all\nselect 12005656    , 2762364204 from dual union all\nselect 12484936    , 2762364204 from dual union all\nselect 39003042    , 2762364204 from dual union all\nselect 12365597    , 2762364204 from dual union all\nselect 12635922    , 2762364204 from dual union all\nselect 12332346    , 2762364204 from dual union all\nselect 12365092    , 4387267572 from dual union all\nselect 12005656    , 4387267572 from dual union all\nselect 12365092    , 4422911281 from dual union all\nselect 12005656    , 4422911281 from dual union all\nselect 12484936    , 4422911281 from dual union all\nselect 12651239    , 4422911281 from dual union all\nselect 12388710    , 4422911281 from dual union all\nselect 12686953    , 4422911281 from dual union all\nselect 12365092    , 4423311213 from dual union all\nselect 12005656    , 4423311213 from dual union all\nselect 12709544    , 4423311213 from dual union all\nselect 12484936    , 4423311213 from dual union all\nselect 12005656    , 4424450542 from dual union all\nselect 12346839    , 4424450542 from dual union all\nselect 12365120    , 4424450542 from dual union all\nselect 12484936    , 4424450542 from dual union all\nselect 12086512    , 4424450542 from dual\n/\n",
    "label": 1
  },
  {
    "text_1": "SAS 9.2 running Oracle query indefinitely",
    "text_2": "proc sql;\n    connect to oracle as db1 (user=user1 pw=pasw1 path=DB1);\n    create table test_table as\n    select *\n    from connection to db1\n        ( /* here we're in oracle */\n                  select * from test.table1 where rownum <20 \n                )\n    ;\n    disconnect from db1;\nquit;\n",
    "label": 1
  },
  {
    "text_1": "Is it bad practice to have some tables within a schema and some not?",
    "text_2": "SELECT columns \nFROM dbo.Table\n",
    "label": 1
  },
  {
    "text_1": "Check for two decimal digit number in string",
    "text_2": "WITH cte AS (\nSELECT Col\nFROM set1\nWHERE Col = '' OR Col LIKE'+%' AND (CAST(REPLACE(REPLACE(Col,'+',''),'-','') AS INT) > 125)\n)\nSELECT * FROM cte\nUNION ALL\nSELECT Col\nFROM set2\nWHERE Col LIKE '%._'\n",
    "label": 1
  },
  {
    "text_1": "Stripping a string in SQL Server",
    "text_2": "SELECT SUBSTRING(your_field, 1, \n    LEN(your_field) - CHARINDEX('-', REVERSE(your_field)))\n",
    "label": 1
  },
  {
    "text_1": "Help with a query count with multiple conditions?",
    "text_2": "SELECT COUNT(DISTINCT nid)\nFROM taxonomy_index a\nWHERE NOT EXISTS\n      ( SELECT *\n        FROM taxonomy_index b\n        WHERE b.tid IN (35,45)\n          AND NOT EXISTS\n              ( SELECT *\n                FROM taxonomy_index c\n                WHERE c.tid = b.tid\n                  AND c.nid = a.nid\n              )\n      ) \n",
    "label": 1
  },
  {
    "text_1": "Inline BLOB / BINARY data types in SQL / JDBC",
    "text_2": "-- SQL actually defines binary literals as such \n-- (as implemented by DB2, Derby, H2, HSQLDB, Ingres, MySQL, SQLite):\n<binary string literal> ::=\n  X <quote> [ <space>... ] \n  [ { <hexit> [ <space>... ] <hexit> [ <space>... ] }... ] <quote>\n\n<hexit> ::=\n  <digit> | A | B | C | D | E | F | a | b | c | d | e | f\n",
    "label": 1
  },
  {
    "text_1": "oracle 8 extract strings from string",
    "text_2": "select GetSurroundedText(mycolumn, '<>', '<>', ' ') from mytable;\n",
    "label": 1
  },
  {
    "text_1": "Best database/solution for searching if any of db.item.tags is contained in given string",
    "text_2": "db.item.ensureIndex({ tags: 1 });\n",
    "label": 1
  },
  {
    "text_1": "SQL, how to INSERT INTO table from a specific start number ID",
    "text_2": "...\nFROM table2\nWHERE ID > 10\n",
    "label": 1
  },
  {
    "text_1": "sql query NVL string with apostrophes (')",
    "text_2": "SELECT * from tableA\nwhere COALESCE(parameter,CASE WHEN status in ('OPEN','CLOSED') then status ELSE '' END) = status\n  and delete_flag != 'Y'\n",
    "label": 1
  },
  {
    "text_1": "Table design and query to report rolling average of multiple site scores",
    "text_2": "SELECT MAX(score_key) & '06' AS roll_key, site_code, 'roll06' AS roll_period, MAX(score_date) AS roll_date, ROUND(AVG(audit_score),4) AS roll_score \nFROM (\nSELECT TOP 06 score_key, site_code, score_date, audit_score \nFROM strTable  \nWHERE site_code='<<site_code>>' \nAND score_date BETWEEN DATESERIAL(YEAR(DATEADD('m',-6,DATE())),MONTH(DATEADD('m',-6,DATE()))+1,1) AND DATE() \nORDER BY score_date DESC) AS u\nGROUP BY site_code\nHAVING COUNT(audit_score) >= 5 \n",
    "label": 1
  },
  {
    "text_1": "what join is caused by \"and\"?",
    "text_2": "SELECT UserId, RoleID\nFROM (select u.*, row_number() over (order by (select NULL)) as seqnum\n      from UserProfile u\n      where u.UserName = 'Adam'\n     ) u join\n     (select w.*, row_number() over (order by (select NULL)) as seqnum\n      from webpages_Roles w\n      WHERE w.RoleName = 'admin'\n     ) w\n     on u.seqnum = w.seqnum\n",
    "label": 1
  },
  {
    "text_1": "MySQL Make it faster,add members count to family table",
    "text_2": "SELECT \n    f.family_id,\n    f.family_code,\n    f.lname,\n    f.fname,\n    f.mname,\n    f.exname,\n    f.remark,\n    p.*,\n    b.*,\n    m.*,\n    MEMCOUNT.cnt AS MEMCOUNT\nFROM family_profile f\n        LEFT JOIN purok p on f.home_address=p.purok_id \n        LEFT JOIN barangay b on p.brgy_id=b.brgy_id\n        LEFT JOIN municipality m on b.mun_id=m.mun_id\n        LEFT JOIN \n            (\n                SELECT family_id, SUM(member_id!=0) AS cnt\n                FROM family_members \n                GROUP BY family_id\n            ) AS MEMCOUNT ON MEMCOUNT.family_id = f.family_id\nWHERE\n    f.family_id != 0 \nAND family_code != '' \nORDER BY\n    mun_name,\n    brgy_name,\n    purok_name,\n    f.lname,\n    f.fname\n",
    "label": 1
  },
  {
    "text_1": "Hive Insert Overwrite Table",
    "text_2": "     INSERT OVERWRITE TABLE tabB SELECT a.Age FROM TableA WHERE a.Age > = 18\n",
    "label": 1
  },
  {
    "text_1": "INSERTing a list of values received as input",
    "text_2": "DECLARE @List dbo.MyList;\n\nINSERT @List VALUES(4),(55),(66),(88),(978);\n\nEXEC dbo.MyProcedure @List = @List;\n",
    "label": 1
  },
  {
    "text_1": "Is there possible to use in CASE statement in WHEN more columns?",
    "text_2": "CASE\nWHEN column_01 = 5 AND column_02 = 'NO' THEN\n  value\nELSE\n  value_other\n",
    "label": 1
  },
  {
    "text_1": "Postgres date subtraction in a query",
    "text_2": "SELECT day::date\nFROM   generate_series(CURRENT_DATE, CURRENT_DATE - interval '30 days', -interval '1 week') day\n",
    "label": 1
  },
  {
    "text_1": "How select tablename from user_table",
    "text_2": "create table t1(n number)\n/\ncreate table t2(n number)\n/\ncreate table t13(n number)\n/\ninsert into t1(n) values(1)\n/\ninsert into t2(n) values(2)\n/\ninsert into t13(n) values(13)\n/\n",
    "label": 1
  },
  {
    "text_1": "SQL 'Or' operator. How does it work in the following scenario?",
    "text_2": "TRUE and UNKNOWN: UNKNOWN\nTRUE or UNKNOWN: TRUE\n\nFALSE and UNKNOWN: FALSE\nFALSE or UNKNOWN: UNKNOWN\n",
    "label": 1
  },
  {
    "text_1": "Comparing int value with null returns zero records",
    "text_2": "Column IS NULL\n",
    "label": 1
  },
  {
    "text_1": "SQL: Redundant WHERE clause specifying column is > 0?",
    "text_2": "SELECT x.region, x.name, x.population \n  FROM bbc x \n  JOIN (SELECT y.region, \n               MAX(y.population) AS max_pop\n          FROM bbc y \n      GROUP BY y.region) z ON z.region = x.region \n                          AND z.max_pop = x.population\n",
    "label": 1
  },
  {
    "text_1": "Multiple Updates with table comparison in MySQL",
    "text_2": "UPDATE  temporary_table\n        INNER JOIN Devices_table\n            ON Devices_table.Brand = temporary_table.Brand\n            AND Devices_table.SerialNumber = temporary_table.SerialNumber\nSET     temporary_table.DeviceID = Devices_table.DeviceID;\n",
    "label": 1
  },
  {
    "text_1": "Find top N receipt records that fulfill quantity on hand",
    "text_2": "SELECT  *\nFROM    (\n        SELECT  *,\n                SUM(quantityReceived) OVER (ORDER BY dateReceived DESC) psum\n        FROM    mytable\n        ) q\nWHERE   onHand > psum - quantityReceived\n",
    "label": 1
  },
  {
    "text_1": "MYSQL Update two tables with their values",
    "text_2": "set @rn := 0;\n\nupdate b\n    set field1 = (@rn := @rn + 1)\n    where b.field1 is null\n    order by b.id;\n",
    "label": 1
  },
  {
    "text_1": "Android: SQLite Databasing -- ADDING and CURSORS",
    "text_2": " Comment newComment = cursorToComment(cursor);\n",
    "label": 1
  },
  {
    "text_1": "insert values into a table's column and update that column",
    "text_2": "DECLARE @i INT = 1;\nWHILE @i <= (SELECT COUNT(rN) FROM MyFirstTable WHERE rN IN ('abc_1y','abc_2y','abc_3y','abc_4y','abc_5y','abc_7y','abc_10y','abc_15y','abc_30y')) -- getting number of desired loops based on rows to be affected\nBEGIN\n   UPDATE MyFirstTable\n   SET rID = 4+@i -- using number 4 as a starting point for incrementation and @i variable to perform the actual incrementation\n   WHERE \n        rN = ( -- specifying which row should be affected in each loop\n            SELECT SUBQUERY.rN\n            FROM ( -- assigning temporary row number for each desired row\n                SELECT ROW_NUMBER() OVER (ORDER BY value1) as row_num, rN -- using value1 in order to keep the current order (this doesn't seem to be a good practice, but it works)\n                FROM MyFirstTable\n                WHERE rN IN ('abc_1y','abc_2y','abc_3y','abc_4y','abc_5y','abc_7y','abc_10y','abc_15y','abc_30y')\n                ) as SUBQUERY\n            WHERE SUBQUERY.row_num = @i\n            )\n   SET @i = @i + 1;\nEND;\n",
    "label": 1
  },
  {
    "text_1": "trouble creating headers using spool in sqlplus",
    "text_2": "create table test1 (col1 number,\n                    col2 date,\n                    col3 varchar2(10),\n                    col4 clob);\n\ninsert into test1 values (1, sysdate, 'hello', 'hello');\n\ncommit;\n\nselect 'col1' col1, 'col2' col2, 'col3' col3, 'col4' col4 from dual\nunion all\nselect col1, col2, col3, col4\nfrom   test1;\n       *\nError at line 1\nORA-01790: expression must have same datatype as corresponding expression\n\nset heading off;\n\nselect 'col1' col1, 'col2' col2, 'col3' col3, to_clob('col4') col4 from dual\nunion all\nselect to_char(col1), to_char(col2, 'dd/mm/yyyy hh24:mi:ss'), col3, col4\nfrom   test1;\n\ncol1                                     col2                col3       col4    \n1                                        05/08/2015 11:23:15 hello      hello   \n",
    "label": 1
  },
  {
    "text_1": "Arrange duplicates and number the records in a sequence - MySQL",
    "text_2": "╔════╦══════╦═════════╦════════════════╗\n║ ID ║ NAME ║ ACCOUNT ║ DUPLICATESR_NO ║\n╠════╬══════╬═════════╬════════════════╣\n║  1 ║ ABC  ║ PQR     ║              1 ║\n║  2 ║ DEF  ║ PQR     ║              1 ║\n║  3 ║ ABC  ║ PQR     ║              2 ║\n║  4 ║ XYZ  ║ ABC     ║              1 ║\n║  5 ║ DEF  ║ PQR     ║              2 ║\n║  6 ║ DEF  ║ ABC     ║              1 ║\n╚════╩══════╩═════════╩════════════════╝\n",
    "label": 1
  },
  {
    "text_1": "how to get a percentage depending on a column value?",
    "text_2": "Date       CustomerName percentage\n---------- ------------ ---------------------\n2015-04-29 Sam          50%\n2015-04-30 Sam          0%\n2015-05-01 Sam          0%\n",
    "label": 1
  },
  {
    "text_1": "DELETE records which do not have a match in another table",
    "text_2": "PostgreSQL 9.1.2 on x86_64-unknown-linux-gnu, compiled by gcc (Ubuntu/Linaro 4.6.1-9ubuntu3) 4.6.1, 64-bit\nNOT EXISTS()\n                                                           QUERY PLAN\n--------------------------------------------------------------------------------------------------------------------------------\n Delete on one o  (cost=6736.00..7623.94 rows=27962 width=12) (actual time=80.596..80.596 rows=0 loops=1)\n   ->  Hash Anti Join  (cost=6736.00..7623.94 rows=27962 width=12) (actual time=49.174..61.327 rows=27050 loops=1)\n         Hash Cond: (o.id = t.one_id)\n         ->  Seq Scan on one o  (cost=0.00..463.00 rows=30000 width=10) (actual time=0.003..5.156 rows=30000 loops=1)\n         ->  Hash  (cost=3736.00..3736.00 rows=240000 width=10) (actual time=49.121..49.121 rows=23600 loops=1)\n               Buckets: 32768  Batches: 1  Memory Usage: 1015kB\n               ->  Seq Scan on two t  (cost=0.00..3736.00 rows=240000 width=10) (actual time=0.006..33.790 rows=240000 loops=1)\n Trigger for constraint two_one_id_fkey: time=467720.117 calls=27050\n Total runtime: 467824.652 ms\n(9 rows)\n",
    "label": 1
  },
  {
    "text_1": "MySQL - Select data from relational tables A, B, C, D, E if record was not found on Table F",
    "text_2": "LEFT JOIN attends ON attends.lecture_id = users_lectures.lecture_id\n",
    "label": 1
  },
  {
    "text_1": "How to select top N rows with the sum of certain column meet some requirement in SQLite?",
    "text_2": "id          value\n----------  ----------\n1           50\n2           150\n3           80\n",
    "label": 1
  },
  {
    "text_1": "Player to class database relationship in a game",
    "text_2": "ClassSkills:\nClassID\nSkillID\n",
    "label": 1
  },
  {
    "text_1": "automatically set the value of one variable depending on another variable's value in sql table",
    "text_2": "UPDATE Order\nSet TotalPrice = NumberOfItems * \n                 (SELECT Price FROM Food WHERE Food.FoodId = Order.FoodId)\n",
    "label": 1
  },
  {
    "text_1": "calculate the difference of the time between In and out",
    "text_2": "SELECT *, \n       ROW_NUMBER() \n         OVER ( \n           ORDER BY TIME)RN \nINTO   #TEMP1 \nFROM   TABLE1 \n\nSELECT T.EMP_ID, \n       T.TIME, \n       T.[IN/OUT], \n       CASE WHEN DIFF/3600 <10 THEN '0' ELSE '' END + CAST(DIFF/3600 AS VARCHAR( \n       2)) + \n       ':' \n       + CASE WHEN DIFF%3600/60 < 10 THEN '0' ELSE '' END + CAST(DIFF%3600/60 AS \n       VARCHAR(2)) \n       + ':00' minutes \nFROM   (SELECT t1.*, \n               DATEDIFF(SECOND, t1.TIME, t2.TIME) diff \n        FROM   #TEMP1 t1 \n               LEFT JOIN #TEMP1 t2 \n                      ON t1.RN = t2.RN - 1)T \n",
    "label": 1
  },
  {
    "text_1": "Compute percents from SUM() in the same SELECT sql query",
    "text_2": "SELECT property_name\n      ,round((count(value_a = value_b OR NULL) * 100.0) / count(*), 2) AS pct\nFROM   my_obj\nGROUP  BY 1;\n",
    "label": 1
  },
  {
    "text_1": "Transposing many columns in Hive",
    "text_2": "select t.customer, p.parameter,\n       (case p.parameter\n            where 'a' then status_a\n            where 'b' then status_b\n            . . .\n        end) as status\nfrom t cross join\n     (select 'a' as parameter union all\n      select 'b' union all\n      . . .\n     ) p;\n",
    "label": 1
  },
  {
    "text_1": "How do i design database and get data by Category in android",
    "text_2": "id      title           content          address\n1     GeneralPark      xxxxxxxxxxx      1234road\n2     GreatMuseum       wwwwwwwwww      9877road\n",
    "label": 1
  },
  {
    "text_1": "How to grant sendmail permission to sql server user?",
    "text_2": "USE msdb;\n--add our user\nCREATE USER  ClarkKent FOR LOGIN  ClarkKent; \n--give this user rights to use dbmail\nexec sp_addrolemember 'DatabaseMailUserRole', 'ClarkKent'\n",
    "label": 1
  },
  {
    "text_1": "Get SQL xml attribute value using variable",
    "text_2": "set @Attribute = 'Keyword/Word)[1]'', ''varchar(max)'') select @@version --'\n",
    "label": 1
  },
  {
    "text_1": "Optimizing bulk update with two inner joins and calculation",
    "text_2": "UPDATE offer_lines ol\n    SET discounted_price = (p.price - (p.price * o.discount_percentage / 100))\nFROM products p, offers o\nWHERE ol.offer_id = o.id AND\n      ol.product_id = p.id AND\n      ol.offer_id = 2;\n",
    "label": 1
  },
  {
    "text_1": "regular expression for line seperated different lengthy words",
    "text_2": " select regexp_substr('abc\n def\n ghi', '[[:alpha:]]+', 1 ,level)\n   from dual\nconnect by regexp_substr('abc\ndef\nghi', '[[:alpha:]]+', 1 ,level) is not null\n",
    "label": 1
  },
  {
    "text_1": "Designing a table with a column need to stored in four different languages",
    "text_2": "2  en  The English text for article 2\n2  dr  The French text for article 2\n2  de  The German text for article 2\n3  en  The English text for article 3\n3  dr  The French text for article 3\n3  de  The German text for article 3\n3  sw  Oh wait, article 3 also needed Swahili text!\n",
    "label": 1
  },
  {
    "text_1": "Summarize totals given multiple conditions",
    "text_2": "with cte_winners as (\n    select\n        case when winner then m.player1 else m.player2 end as player,\n        count(*) as wins_v_opp,\n        sum(count(*)) over() - count(*) as loses_v_opp\n    from matches as m\n    where player1 in (4200, 4201) and player2 in (4200, 4201)\n    group by player\n)\nselect *\nfrom players as p\n    left outer join cte_winners as cw on cw.player = p.id\nwhere p.id in (4200, 4201)\n",
    "label": 1
  },
  {
    "text_1": "Alter All Triggers via T-SQL",
    "text_2": "EXEC sp_helptext 'TriggerName'\n",
    "label": 1
  },
  {
    "text_1": "SQL query not returning expected date time range",
    "text_2": "SELECT  DATEPART(hour, DATEADD(HH,-DATEDIFF(Hour,GETDATE(),GETUTCDATE()),Documents.CreationTime)) AS Hours ,COUNT(*) AS Faxes,SUM(goodpagecount) AS [Good Page Count]\nFROM Documents\nJOIN Users ON Documents.OwnerID=Users.handle\nJOIN Groups ON Users.GroupID=Groups.handle\nJOIN History ON History.Owner=Documents.handle\nJOIN HistoryTRX ON History.handle=HistoryTRX.handle\nWHERE DATEADD(HH,-DATEDIFF(Hour,GETDATE(),GETUTCDATE()),Documents.CreationTime) >= '2014-10-01 00:00:00.000' and DATEADD(HH,-DATEDIFF(Hour,GETDATE(),GETUTCDATE()),Documents.CreationTime) <= '2014-10-03 08:00:00.000'\nGROUP BY  DATEPART(hour, DATEADD(HH,-DATEDIFF(Hour,GETDATE(),GETUTCDATE()),Documents.CreationTime))\nORDER BY  DATEPART(hour, DATEADD(HH,-DATEDIFF(Hour,GETDATE(),GETUTCDATE()),Documents.CreationTime))\n",
    "label": 1
  },
  {
    "text_1": "How can I use SQL Server to determine the number of minutes someone worked in every Hour of the day?",
    "text_2": "empid       hour        minutes_worked\n----------- ----------- --------------\n103         10          30\n103         11          60\n103         12          45\n",
    "label": 1
  },
  {
    "text_1": "case statement if table present",
    "text_2": "WHEN  EXEC('(select COUNT(*) from SYSSET..chqpass  D where D.COMP_DIR =''xyz'' and D.DOCU_DT >''01/01/2015'' and D.AMT = 2556 )') <> 0 \n",
    "label": 1
  },
  {
    "text_1": "How do I get all rows that contains a string in a field (SQL)?",
    "text_2": "select * from articles where tag like '%php,%' or tag like '%,php%'\n",
    "label": 1
  },
  {
    "text_1": "Select appointments for a specific date for a specific staff member",
    "text_2": "SELECT *\nFROM appointment a\nJOIN tattoo t ON t.id = a.tattooID\nJOIN staff s ON s.id = t.staffID\nWHERE a.date = '2015-10-03' AND s.name = 'Bob';\n",
    "label": 1
  },
  {
    "text_1": "Trigger: BEFORE INSERT",
    "text_2": "ALTER TABLE SubActivity\n    ADD CONSTRAINT CK_SubActivity_Date CHECK (dbo.ufnIsSubactivityDateValid(ActivityID, SubActivityDate) = 1);\n",
    "label": 1
  },
  {
    "text_1": "Sum fields created with case when statement",
    "text_2": "SELECT m . * , max( m.id ) as max_id, max( submitted_on ) AS max_submitted_on, \n       ifnull( max(CASE WHEN mission =1 THEN score END ) , 0 ) AS mission_1_score, \n       ifnull( max(CASE WHEN mission =2 THEN score END ) , 0 ) AS mission_2_score,\n       (ifnull( max(CASE WHEN mission =1 THEN score END ) , 0 ) +\n        ifnull( max(CASE WHEN mission =2 THEN score END ) , 0 )\n       ) AS total_score\n",
    "label": 1
  },
  {
    "text_1": "setting the column of a table as the result of a calculation between another column in the same table and a column on a different table",
    "text_2": "CREATE TRIGGER calc_col_trigger\nON table1\n AFTER INSERT,UPDATE\nAS\n\nDECLARE @id int;\nSET @id = (SELECT id FROM inserted)\n-- get a unique identifier from the inserted record\n\nUPDATE table1 \nset    calculated_column = <calculation>\nFROM   table1 \n       JOIN table2 \n       ON   table1.column1 = table2.column2 \nwhere  table1.id = @id;\n",
    "label": 1
  },
  {
    "text_1": "PL/SQL Trigger in Oracle errors",
    "text_2": "CREATE TABLE equipe\n( ID_EQ number(6) not null,\nNOM varchar2(50),\nENREGIS number(6),\nID_CAPITAINE number(6),\nID_ENT number(6),\nCONSTRAINT equipe_pk PRIMARY KEY (ID_EQ)\n);\n",
    "label": 1
  },
  {
    "text_1": "Convert a Text to a DateTime in access",
    "text_2": "Tue Jan 18 10:10:57 2011\n",
    "label": 1
  },
  {
    "text_1": "Find value using EXIST keyword",
    "text_2": "Select DISTINCT dbo.Course.Code\nFrom dbo.Course c\nWhere dbo.Course.CourseYear = 2000 AND \nEXISTS (Select * From dbo.course Where (dbo.course.day = 'Sunday' and dbo.Course.CourseYear = 2000 and dbo.course.Code = c.Code))and \nEXISTS (Select * From dbo.course Where (dbo.course.day = 'Monday' and dbo.Course.CourseYear = 2000 and dbo.course.Code = c.Code))\n",
    "label": 1
  },
  {
    "text_1": "How to get substring before first numeric value with TSQL?",
    "text_2": "| COLUMN_0 |\n|----------|\n|    ABC-X |\n|   ABC-XY |\n|    XYZ-A |\n|      OP- |\n|      HJK |\n",
    "label": 1
  },
  {
    "text_1": "Left join with nearest value without duplicates",
    "text_2": "if((select 1 from sys.tables where name = 'temp_tableb') is not null) begin drop table temp_tableb end\nselect * into temp_tableb from tableb\n",
    "label": 1
  },
  {
    "text_1": "Database script issues with linked server",
    "text_2": "SELECT * FROM [UVWXYZ].[DB2].[your_schema].[your_table];\n",
    "label": 1
  },
  {
    "text_1": "How to find the SQL medians for a grouping",
    "text_2": "WITH CTE AS\n(   SELECT  Code,\n            Value, \n            [half1] = NTILE(2) OVER(PARTITION BY Code ORDER BY Value), \n            [half2] = NTILE(2) OVER(PARTITION BY Code ORDER BY Value DESC)\n    FROM    T\n    WHERE   Value IS NOT NULL\n)\nSELECT  Code,\n        (MAX(CASE WHEN Half1 = 1 THEN Value END) + \n        MIN(CASE WHEN Half2 = 1 THEN Value END)) / 2.0\nFROM    CTE\nGROUP BY Code;\n",
    "label": 1
  },
  {
    "text_1": "How to Search Using Multiple Parameters While Including Nulls in Results in SQL-Server",
    "text_2": "SELECT D.Name\nFROM demographics D\nWHERE (D.City LIKE @cityVar OR @cityVar == '%')\n    AND (D.Sex LIKE @sexVar OR @sexVar == '%')\n    AND (D.Age LIKE @ageVar OR @ageVar == '%')\n",
    "label": 1
  },
  {
    "text_1": "SQL Date Modification",
    "text_2": "    = CURDATE() - DAYOFYEAR(CURDATE()) + 1\n",
    "label": 1
  },
  {
    "text_1": "How to combine multiple rows into one with nulled values where row values differ",
    "text_2": "declare @t table(A int, b varchar(10), c varchar(max), d int)\n\ninsert @t values(10, null, 'text', null)\ninsert @t values(4, 'abc', 'text', null)\ninsert @t values(10, 'def', 'text', null)\n\n\nselect case when max(rna) > 1 then null else min(a) end, \ncase when max(rnb) > 1 then null else min(b) end, \ncase when max(rnc) > 1 then null else min(c) end, \ncase when max(rnd) > 1 then null else min(d) end \n from \n(\nselect rna = rank() over(order by a),\nrnb = rank() over(order by b),\nrnc = rank() over(order by c),\nrnd = rank() over(order by d),\na, b,c,d\n from @t\n ) e\n",
    "label": 1
  },
  {
    "text_1": "Multiple WHERE clause inputs to T-SQL stored procedure",
    "text_2": "IF @ActivityCode IS NOT NULL\nBEGIN\n\n  SELECT ...\n    FROM ...\n   WHERE ActivityCode = @ActivityCode\n\nEND\nELSE\nBEGIN\n\n  SELECT ...\n    FROM ...\n\nEND\n",
    "label": 1
  },
  {
    "text_1": "Outer Join One table with result of Select Query",
    "text_2": "timestamp           phase_1 phase_2 phase_3\n2014-03-04 12:00:00   0       0        0\n2014-03-05 02:00:00   0       0        0\n2014=03-06 01:00:00   0       0        0\n2014-03-07 00:00:00   0       0        0\n",
    "label": 1
  },
  {
    "text_1": "For loop in SQL",
    "text_2": "INSERT INTO t (colname) VALUES ('value1'), ('value2'), ..., ('value70');\n",
    "label": 1
  },
  {
    "text_1": "Create stored procedure which returns in one OUT param database version (Oracle)",
    "text_2": "var mycursor refcursor\nexec getVersion(:mycursor)\nprint mycursor\n",
    "label": 1
  },
  {
    "text_1": "if field E contain \"MSD__CMT_Change\" then",
    "text_2": "select id\n      , d\n      , decode(d, 'MSD_CHANGE', \n               decode(lead(d, 1, d) over(order by id), 'MSD_CMT_CHANGE', \n                      lead(e, 1, e) over(order by id) , e \n                      ) \n              ,e) e\n  from t1\n  order by id\n",
    "label": 1
  },
  {
    "text_1": "two where conditions on the same column",
    "text_2": "DELETE FROM demo2  WHERE `id` \n not in ('s1', 's2', 's3')\nAND `id` not like 'c%';\n",
    "label": 1
  },
  {
    "text_1": "Auto-increment column: differences in SQL syntax between Oracle and MySQL",
    "text_2": "INSERT INTO category\nVALUES (seq_category_id.nextval, 'some title');\n",
    "label": 1
  },
  {
    "text_1": "Replace REGEXP_SUBSTR in SQL Server",
    "text_2": "CREATE TABLE table_name ( name VARCHAR(50) );\nINSERT INTO table_name\nSELECT 'AE 344592001H 6186694' UNION ALL\nSELECT 'AE_161038002_6044777' UNION ALL\nSELECT 'BC_VIVS_HNB011A_1WAM' UNION ALL\nSELECT 'BC_56230A_30SP' UNION ALL\nSELECT 'CG_3334902_NETWK_ ACTLM_3334912' UNION ALL\nSELECT 'CG_3334574_HMO1_CORACT_3334575' UNION ALL\nSELECT 'CG_3207160_POSC_1502AH_3207161' UNION ALL\nSELECT 'UH_141015_RHM' UNION ALL\nSELECT 'UH_127757_RIV' UNION ALL\nSELECT 'UH 523725 RIV' UNION ALL\nSELECT 'BS_W0055785_C500_M0005672';\n",
    "label": 1
  },
  {
    "text_1": "Simple select query not working?",
    "text_2": "SELECT * FROM listings WHERE PROVINCE LIKE '%Bakersfield%'\n",
    "label": 1
  },
  {
    "text_1": "Conditional aggregate database queries and their performance implications",
    "text_2": "Select SUM(Case When bitcol = 1 Then 1 Else 0 End) as True_Count\n    , SUM(Case When bitcol = 0 Then 1 Else 0 End) as False_Count\n\nFrom Table;\n",
    "label": 1
  },
  {
    "text_1": "Extracting specific column values embedded within composite Strings of codes",
    "text_2": "SELECT SUBSTRING(@s, PATINDEX('%[^0-9][0-9][0-9][0-9][^0-9]%', @s) + 1, 3)\n",
    "label": 1
  },
  {
    "text_1": "how would I make this query in microsoft access",
    "text_2": "SELECT NameTable.ID,[Name],Age,location,[time],[grade],NameTable.[and so on]\nFROM NameTable\nINNER JOIN AdditonalTable\nON NameTable.ID=AdditionalTable.ID\nWHERE [Name] = [Enter name:]\n",
    "label": 1
  },
  {
    "text_1": "Multiplicate two fields from different columns - SQL",
    "text_2": "select p.Product,\np.Game,\np.Quantity * q.Price as calculated_column\nfrom Producttab p\ninner join gametab q on p.Game = q.GameID\nwhere p.Product = 3;\n",
    "label": 1
  },
  {
    "text_1": "Referencing a XML database file",
    "text_2": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<attributes>\n     <attr path=\"/service-calls/companyA/floor[@num='1']/error\" status=\"fixed\" \n         cause=\"user clicked malformed attachment\" />\n     <attr path=\"/service-calls/companyB/floor[@num='4']/error\" status=\"replaced computer\" \n         cause=\"malware worm\" />\n</attributes>\n",
    "label": 1
  },
  {
    "text_1": "MySQL Iterate over column names",
    "text_2": "(SELECT 'Column1' AS `COLUMN_NAME`, COUNT(Column1) AS Count FROM my_table)\nUNION ALL\n(SELECT 'Column2' AS `COLUMN_NAME`, COUNT(Column2) AS Count FROM my_table)\n-- ...\nORDER BY Count DESC\n",
    "label": 1
  },
  {
    "text_1": "sql query group",
    "text_2": "select x.Id\n    ,   CASE counter\n            WHEN 1 THEN x.Account_Type\n            ELSE 'BOTH'\n        END AS Account_Type\nfrom (\n    select  Id, Count(DISTINCT(acc)) AS counter, MAX(acc) As Account_Type\n    from @table\n    GROUP BY Id\n) x\n",
    "label": 1
  },
  {
    "text_1": "appending row number in sql select statement with row value",
    "text_2": "|                NAME |\n-----------------------\n| 1 ABC, 2 DEF, 3 GHI |\n",
    "label": 1
  },
  {
    "text_1": "Spring Batch - Is it suitable for this usecase?",
    "text_2": "<int-jdbc:stored-proc-inbound-channel-adapter/>\n",
    "label": 1
  },
  {
    "text_1": "How to find all connected subgraphs of an undirected graph",
    "text_2": "+-------+--------------+---------+\n| Ident | GroupMembers | GroupID |\n+-------+--------------+---------+\n| a     | a,b,c,       |       1 |\n| b     | a,b,c,       |       1 |\n| c     | a,b,c,       |       1 |\n+-------+--------------+---------+\n",
    "label": 1
  },
  {
    "text_1": "Postgresql substring to extract between angle brackets and quotes",
    "text_2": "SELECT (regexp_matches(myxml, '<Request[^>]*?\\s+scale=\"\"(\\d+)\"\"'))[1] AS scale FROM mytable;\n",
    "label": 1
  },
  {
    "text_1": "postgres equivalent to all_constraints",
    "text_2": "select tc.constraint_name, rc.delete_rule\nfrom information_schema.table_constraints tc\njoin information_schema.referential_constraints rc using (constraint_name)\nwhere tc.table_name = 'my_table';\n",
    "label": 1
  },
  {
    "text_1": "Is it possible to do so without using nested SELECTS?",
    "text_2": "select *\n  from table\n where qty = (select max(qty) from table)\n",
    "label": 1
  },
  {
    "text_1": "Reference alias (calculated in SELECT) in WHERE clause",
    "text_2": "SELECT BalanceDue FROM (\n  SELECT (InvoiceTotal - PaymentTotal - CreditTotal) AS BalanceDue\n  FROM Invoices\n) AS x\nWHERE BalanceDue > 0;\n",
    "label": 1
  },
  {
    "text_1": "Atomic Read and Write with Entity Framework",
    "text_2": "public class Record\n{\n    public int Id { get; set; }\n\n    public string State { get; set; }\n\n    // Add this property.\n    public byte[] Concurrency { get; set; }\n\n    public class Configuration : EntityTypeConfiguration<Record>\n    {\n        public Configuration()\n        {\n            this.HasKey(t => t.Id);\n\n            this.Property(t => t.State)\n                .HasMaxLength(50)\n                .IsRequired();\n\n            // Add this config to tell EF that this\n            // property/column should be used for \n            // concurrency checking.\n            this.Property(t => t.Concurrency)\n                .IsRowVersion();\n        }\n    }\n}\n",
    "label": 1
  },
  {
    "text_1": "Database as fileformat",
    "text_2": "select * from <tablename>                                order by measurementNum\nselect * from Measurement where measurementSetID=<setID> order by measurementNum\n",
    "label": 1
  },
  {
    "text_1": "SQL: Getting items which have a max value in another tables column, but also match some cross table clauses",
    "text_2": "select Files.*\nfrom\n    Files inner join\n    (\n        select first_value(FolderId)\n            over (partition by TypeId, Path order by Version desc) as FolderId\n        from Folders\n    ) Folders\n        on Folders.FolderId = Files.FolderId\n",
    "label": 1
  },
  {
    "text_1": "How to vectorize an SQL update query in R",
    "text_2": "sapply(unname(split(res, time(res))), function(z) paste0(\n    \"UPDATE table SET \", \n    toString(paste0(names(z), \"=\", z)), \n    \" WHERE dt='\", time(z), \"'\"))\n",
    "label": 1
  },
  {
    "text_1": "SQL: Is there a possibility to convert numbers (1,2,3,4...) to letters (A,B,C,D...)",
    "text_2": "WITH Ranks AS (\n   SELECT\n      Num = Dense_Rank() OVER (ORDER BY T.Sequence),\n      T.Col1,\n      T.Col2\n   FROM\n      dbo.YourTable T\n)\nSELECT\n   *,\n   LetterCode =\n      (\n         SELECT Char(65 + (R.Num - X.Low) / X.Div % 26)\n         FROM\n            (\n               SELECT 18279, 475254, 17576\n               UNION ALL SELECT 703, 18278, 676\n               UNION ALL SELECT 27, 702, 26\n               UNION ALL SELECT 1, 26, 1\n            ) X (Low, High, Div)      \n         WHERE R.Num >= X.Low\n         FOR XML PATH(''), TYPE\n      ).value('.[1]', 'varchar(4)')\nFROM Ranks R\nORDER BY R.Num\n;\n",
    "label": 1
  },
  {
    "text_1": "SQL where equal to expression",
    "text_2": "select * \nfrom tableA JOIN \ntableB ON tableA.id=tableB.id \nwhere tableB.someId IN (select id \n                    from otherTable \n                    where anotherId = 1)\n",
    "label": 1
  },
  {
    "text_1": "LINQ to SQL SOUNDEX - possible?",
    "text_2": "    [Function(Name=\"SoundEx\", IsComposable = true)]\n    public string SoundsLike(string input)\n    {\n        throw new NotImplementedException();\n    }\n",
    "label": 1
  },
  {
    "text_1": "Generate KML in SQL 2008",
    "text_2": "declare @T table\n(\n  Name varchar(50),\n  Description varchar(50),\n  Point varchar(50),\n  Extrude int,\n  AltitudeMode varchar(50),\n  Coordinates varchar(200)\n);\n\ninsert into @T values\n('example', 'dafdafdsaf', '102.594411,14.998518', 1, 'relativeToGround', \n'-77.05788457660967,38.87253259892824,100\n-77.05465973756702,38.87291016281703,100\n-77.05315536854791,38.87053267794386,100\n-77.05788457660967,38.87253259892824,100');\n\nwith xmlnamespaces(default 'http://www.opengis.net/kml/2.2')\nselect (\n       select Name as name,\n              Description as description,\n              Point as 'Point/coordinates',\n              (\n                select Extrude as extrude,\n                       AltitudeMode as altitudeMode,\n                       Coordinates as 'outerBoundaryIs/LinearRing/coordinates'\n                for xml path('Polygon'), type\n              )\n       from @T       \n       for xml path('Placemark'), type\n       )\nfor xml path('Document'), root('kml');\n",
    "label": 1
  },
  {
    "text_1": "Oracle Constraints",
    "text_2": "SQL> insert into owner_mobile values(1,1);\n",
    "label": 1
  },
  {
    "text_1": "SQL Query WITH CASE in WHERE clause",
    "text_2": "ID  Name             AddressID  CompanyID   Address      IsHQ   RowNum\n1   Company 1        1          1           Address 1    1      1\n2   Company 2        5          2           Address 5    1      1\n3   Company 3        7          3           Address 7    0      1\n",
    "label": 1
  },
  {
    "text_1": "SELECT TOP COALESCE and bigint",
    "text_2": "\nDECLARE @limit bigint\nSELECT SQL_VARIANT_PROPERTY(COALESCE(@limit, 9223372036854775807),'BaseType') \nSELECT SQL_VARIANT_PROPERTY(9223372036854775807, 'BaseType') BaseType\n",
    "label": 1
  },
  {
    "text_1": "SQL LIKE with special characters",
    "text_2": "SELECT ASCII('æ' COLLATE Albanian_CI_AI), ASCII('æ' COLLATE Latin1_General_CI_AS) \n",
    "label": 1
  },
  {
    "text_1": "Strange delete query, is it written correctly?",
    "text_2": "delete v1 from vaccine_patient_details as v1\nwhere v1.vacc_pat_guid <> \n    (Select top 1 v.vacc_pat_guid \n     from vaccine_patient_details as v \n     where v.patient_guid = v1.patient_guid and \n           v.vaccine_guid = v1.vaccine_guid \n     order by v.date_given desc)\n",
    "label": 1
  },
  {
    "text_1": "Update values of column so that it forms unique constraint with other column",
    "text_2": "MERGE INTO a\nUSING (\n  SELECT * FROM\n   (SELECT\n        a.ROWID as ID,\n        a1,\n        ROW_NUMBER() OVER (PARTITION BY a1 ORDER BY a2) AS RowA\n      FROM a) TableA\n  INNER JOIN\n   (SELECT b2, ROW_NUMBER() OVER (Order by b2) AS RowB\n      FROM b) TableB\n  ON Tablea.RowA = TableB.RowB) AtoB\nON (a.ROWID = AtoB.ID)\nWHEN MATCHED THEN UPDATE SET a.a2 = AtoB.b2\n",
    "label": 1
  },
  {
    "text_1": "Best way to implement a database of lottery numbers?",
    "text_2": "table lottery\n---------------\nid | total_numbers | country | whatever\n",
    "label": 1
  },
  {
    "text_1": "Copy specific data from one table to another in sql",
    "text_2": "SELECT c.ChallanNo, c.REFERENCENO , c.STEPNO FROM CHALLAN c\nINNER JOIN CURRENTREPORT cr\non c.REFERENCENO = cr.REFERENCENO\nWHERE RECEIVEDDATE IN (SELECT MIN(RECEIVEDDATE)\nFROM CHALLAN cn\nGROUP BY (STEPNO))\n",
    "label": 1
  },
  {
    "text_1": "customer expense query",
    "text_2": "Spent       Year\n----------- -----------\n65          2010\n220         2011\n\nSpent       Year        Month\n----------- ----------- -----------\n60          2010        1\n220         2011        1\n5           2010        12\n\nSpent       Year        HalfYear\n----------- ----------- --------\n60          2010        First\n220         2011        First\n5           2010        Second\n\nSpent       Year        Quarter\n----------- ----------- -----------\n60          2010        1\n220         2011        1\n5           2010        4\n\nSpent       Year        Week\n----------- ----------- -----------\n220         2011        1\n5           2010        52\n60          2010        53\n",
    "label": 1
  },
  {
    "text_1": "Trigger not working correctly",
    "text_2": "UPDATE invoices\n    SET Amount = Amount - OLD.amount\nWHERE id = OLD.InvoiceId;\n",
    "label": 1
  },
  {
    "text_1": "How to include these requirements in my database design?",
    "text_2": "Id  EmployeeId OrganisationLevelId StartDate  EndDate IsActive\n271    110           13            20/09/2011   NULL     true\n",
    "label": 1
  },
  {
    "text_1": "Find rows based on two coloumns in two tables",
    "text_2": "SELECT ...\nFROM MyTable JOIN Table2 USING (OID)\nWHERE Table2.PID = 47;\n",
    "label": 1
  },
  {
    "text_1": "Filter results if not contained in another column",
    "text_2": "nodetochild.objects.exclude(childid=nodetochild.objects.values_list('Nodeid', flat=True)).only('id', 'childid')\n",
    "label": 1
  },
  {
    "text_1": "performance related to join and where",
    "text_2": "\nSTEP 1\n    The type of query is SELECT.\n\n    FROM TABLE\n        b\n    Nested iteration.\n    Table Scan.\n    Forward scan.\n    Positioning at start of table.\n    Using I/O Size 2 Kbytes for data pages.\n    With LRU Buffer Replacement Strategy for data pages.\n\n    FROM TABLE\n        a\n    Nested iteration.\n    Table Scan.\n    Forward scan.\n    Positioning at start of table.\n    Using I/O Size 2 Kbytes for data pages.\n    With LRU Buffer Replacement Strategy for data pages.\n",
    "label": 1
  },
  {
    "text_1": "Pivot table to turn rows into columns",
    "text_2": "DECLARE @cols AS NVARCHAR(MAX),\n    @query  AS NVARCHAR(MAX)\n\nselect @cols = STUFF((SELECT ',' + QUOTENAME(cast(attributeid as varchar(10))+'_'+ col) \n                    from\n                    (\n                      select distinct attributeid\n                      from priceattribute\n                    ) d\n                    cross apply\n                    (\n                      select 'comp', 1 union all\n                      select 'min', 2 union all\n                      select 'max', 3 \n                    ) c (col, so)\n                    group by attributeid, col, so\n                    order by attributeid, so\n            FOR XML PATH(''), TYPE\n            ).value('.', 'NVARCHAR(MAX)') \n        ,1,1,'')\n\nset @query = 'SELECT priceid, ' + @cols + ' \n            from \n            (\n                select priceid, \n                  col = cast(attributeid as varchar(10))+''_''+ col, \n                  value\n                from \n                (\n                  select PriceID, \n                    AttributeID, \n                    comp = cast(PriceAttributeComparator as varchar(10)),\n                    [min] = cast(PriceAttributeMin as varchar(10)), \n                    [max] = cast(PriceAttributeMax as varchar(10))\n                  from PriceAttribute\n                ) d\n                cross apply\n                (\n                  select ''comp'', comp union all\n                  select ''min'', [min] union all\n                  select ''max'', [max] \n                ) c (col, value)\n            ) x\n            pivot \n            (\n                max(value)\n                for col in (' + @cols + ')\n            ) p '\n\nexecute sp_executesql @query;\n",
    "label": 1
  },
  {
    "text_1": "Oracle 11gR2 - View Function Columns Evaluation",
    "text_2": " Column Projection Information (identified by operation id):\n -----------------------------------------------------------\n ...\n    3 - \"A\".\"ID\"[NUMBER,22], \"A\".\"FUNCTION_COLUMN\"[NUMBER,22]\n    4 - (#keys=1) \"ID\"[NUMBER,22]\n    5 - \"ID\"[NUMBER,22]        \n",
    "label": 1
  },
  {
    "text_1": "Duplicating group by clause in select",
    "text_2": "SELECT \n    expr.dayhour, \n    COUNT(*) as qty,\n    AVG(workms+queuems+0.0) as avgTimeMs\nFROM    datalog d\nOUTER APPLY (\n    SELECT DATEADD(HOUR,datepart(hour,d.inquirydate),cast(cast(d.inquirydate as date) as datetime)) as dayhour\n) AS expr\nWHERE   inquirydate>'20140101' \nGROUP BY expr.dayhour;\n",
    "label": 1
  },
  {
    "text_1": "Sql - Fetch next value to replace variable value",
    "text_2": "SELECT * \nINTO [bbb].[table1]\nFROM [aaa].[table1]\nWHERE 1 != 1\n\nSELECT * \nINTO [bbb].[table2]\nFROM [aaa].[table2]\nWHERE 1 != 1\n\nSELECT * \nINTO [bbb].[table3]\nFROM [aaa].[table3]\nWHERE 1 != 1\n",
    "label": 1
  },
  {
    "text_1": "SQL to get the one to many mapping (like reverse CASE WHEN THEN END or decode in Oracle)",
    "text_2": "WHERE (REGION = 1 and IOG in (1,2,14,37,72,101) ) or\n      (REGION = 7 and IOG in (11,22,48,77) ) or\n      (REGION = 3 and IOG in (7,13,18,24,39) )\n",
    "label": 1
  },
  {
    "text_1": "What is the best way to store 2d arrays in Redis?",
    "text_2": "  local maxCount = redis.call(\"GET\", KEYS[1]);\n  local ret = {};\n  for i = 0, maxCount, 1 do\n     table.insert(ret, redis.call(\"LRANGE\", \"entry:\" .. KEYS[1] .. \":\" .. i, 0, -1);\n  end\n  return ret ;\n",
    "label": 1
  },
  {
    "text_1": "How can I change an URL inside a field in MySQL?",
    "text_2": "cat my_sql_dump.sql | mysql -h hostname -u username -p databasename\n",
    "label": 1
  },
  {
    "text_1": "Find rows with duplicate values in a column",
    "text_2": "SELECT author_id, author_name  -- omit the name here, if you just need ids\nFROM (\n   SELECT author_id, author_name\n        , count(*) OVER (PARTITION BY author_name) AS ct\n   FROM   author_data\n   ) sub\nWHERE  ct > 1;\n",
    "label": 1
  },
  {
    "text_1": "Replace 44 to 0 in MYSQL?",
    "text_2": "mysql> SELECT CONCAT('0', SUBSTR(4476384424131, 3));\n+-----------------------------------------+\n| CONCAT('0', SUBSTR(4476384424131, 3))   |\n+-----------------------------------------+\n| 076384424131                            |\n+-----------------------------------------+\n",
    "label": 1
  },
  {
    "text_1": "Multiple locations and different user privileges for database",
    "text_2": "CREATE TABLE SomeTable -- with location-sensitive data\n(\n   Col1 ... Col N,\n   LocationId INT\n);\n",
    "label": 1
  },
  {
    "text_1": "Partial SQL insert in haskelldb",
    "text_2": "insC1 db x = insert db test_tbl1 (c1 <<- (Just x) # c2 << _default)\ninsC2 db x = insert db test_tbl2 (c1 << _default  # c2 <<- (Just x))\n",
    "label": 1
  },
  {
    "text_1": "SQL Server 2008: Count Number of Keys In Multiple Date Ranges",
    "text_2": "SELECT \n    sum(case when Year(pm.order_dts) = 1996 then 1 end) as Count1996,\n    sum(case when Year(pm.order_dts) = 1997 then 1 end) as Count1997,\n    sum(case when Year(pm.order_dts) = 1998 then 1 end) as Count1998,\n    sum(case when Year(pm.order_dts) = 1999 then 1 end) as Count1999,\n    sum(case when Year(pm.order_dts) = 2000 then 1 end) as Count2000,\n    sum(case when Year(pm.order_dts) = 2001 then 1 end) as Count2001,\n    sum(case when Year(pm.order_dts) = 2002 then 1 end) as Count2002,\n    sum(case when Year(pm.order_dts) = 2003 then 1 end) as Count2003,\n    sum(case when Year(pm.order_dts) = 2004 then 1 end) as Count2004,\n    sum(case when Year(pm.order_dts) = 2005 then 1 end) as Count2005,\n    sum(case when Year(pm.order_dts) = 2006 then 1 end) as Count2006,\n    sum(case when Year(pm.order_dts) = 2007 then 1 end) as Count2007,\n    sum(case when Year(pm.order_dts) = 2008 then 1 end) as Count2008\nFROM dm.medications pm\n",
    "label": 1
  },
  {
    "text_1": "How can I get time-based data for each state based on local server time?",
    "text_2": "state\n    id int\n    name text\n    tz varchar\n",
    "label": 1
  },
  {
    "text_1": "MySQL - GROUP_CONCAT() on names of temporary table columns?",
    "text_2": "<cfscript>    \n    // Select the data and use prefix to get column list\n    qr = qry.execute(sql='SELECT * FROM foo');\n    writedump(qr.getPrefix().columnlist);\n\n    // Also get the columns from SHOW COLUMNS using valuelist\n    colqr = qry.execute(sql='SHOW COLUMNS FROM foo');\n    writedump(ValueList(colqr.getResult().field));\n</cfscript>\n",
    "label": 1
  },
  {
    "text_1": "how to remove multiple semicolons from this data below using pl/sql",
    "text_2": "select \nREGEXP_REPLACE(';ghulam.nabi@yahoo.com.pk;NOCBSS@yahoo.com.pk;;;fo.n2@yahoo.com.pk;;mumtaz.akhta@yahoo.com.pk','(;){2,}',';') as s\nfrom dual\n",
    "label": 1
  },
  {
    "text_1": "SQL : count records per 5 minute intervals (including zeros)",
    "text_2": "select bucket_start, bucket_end, count(context_id)\nfrom buckets b\nleft join responses r \n       on (r.response_time >= b.bucket_start and \n           r.response_time <  b.bucket_end)\ngroup by b.bucket_start, b.bucket_end\n",
    "label": 1
  },
  {
    "text_1": "dd/MM/yyyy in SQL Server",
    "text_2": "SELECT ......\nWHERE so.entrydate BETWEEN '20091023' and '20091123 23:59:59'\n",
    "label": 1
  },
  {
    "text_1": "How do I add a key to a row based on its \"group\"?",
    "text_2": "proc sort data=test;\nby id;\nrun;\n",
    "label": 1
  },
  {
    "text_1": "Doing UPSERT when row is referenced by a FK",
    "text_2": "begin atomic\ndeclare addtl_id integer;\nset addtl_id = (select item_addtl_info_id from item where item.item_id = XXX);\nif addtl_id is null\nthen\n    set addtl_id = (select addtl_info_id from new table \n                    (insert into addtl_info\n                        (addtl_info_text)\n                        values ('My brand new additional info')\n                    )\n                  );\n    update item set item.item_addtl_info_id = addtl_id\n    where item.item_id = XXX;\n\nelse\n   update addtl_info set addtl_info_text = 'My updated additional info'\n   where addtl_info.addtl_info_id = addtl_id;\nend if;\nend\n",
    "label": 1
  },
  {
    "text_1": "Finding a Specific Date with SQL",
    "text_2": "SELECT * \nFROM TABLE_1\nWHERE CAL_DATE=DateSerial(2015, 1, 1);\n",
    "label": 1
  },
  {
    "text_1": "Getting average column value per day from mySQL",
    "text_2": "SELECT `datetime`,AVG(`Value`) as AvgValue\nFROM TableName\nGROUP BY `datetime`\n",
    "label": 1
  },
  {
    "text_1": "Multiple row's coulmns in one row's multiple columns",
    "text_2": "select id, patient, row_number() over (partition by id order by patient) as rnk\nfrom your_table\nwhere status='critical';\n",
    "label": 1
  },
  {
    "text_1": "Order SQL request when each row contains id of the next one",
    "text_2": "create temp sequence rownum;\n\nWITH final_route AS\n(\n  WITH RECURSIVE route AS\n  (\n    SELECT BusLineId, BusStopId, NextBusStopId\n    FROM BusLine_BusStop\n    WHERE IsFirstStop = 1\n    UNION ALL\n    SELECT b.BusLineId, b.BusStopId, b.NextBusStopId\n    FROM BusLine_BusStop b\n    INNER JOIN route r\n            ON r.BusLineId = b.BusLineId\n           AND r.NextBusStopId = b.BusStopId\n    WHERE IsFirstStop = 0 or IsFirstStop is null\n  )\n  SELECT BusLineId, BusStopId, nextval('rownum') as rownum\n  FROM route\n)\nSELECT BusLineId, BusStopId\nFROM final_route\nORDER BY BusLineId, rownum;\n",
    "label": 1
  },
  {
    "text_1": "Calculate average from JSON column",
    "text_2": "SELECT t.id, avg(x::text::numeric) AS avg_speed\nFROM   tbl t\n     , json_array_elements(speed_data->'speed') x\nGROUP  BY t.id;\n",
    "label": 1
  },
  {
    "text_1": "MYSQL select \"all\" of the values rather than \"any\" of them?",
    "text_2": "SELECT u1.firstname\nFROM users u1\nINNER JOIN users u2\n    ON u1.firstname = u2.firstname\n    AND u1.lastname = 'foo'\n    AND u2.lastname = 'bar'\nGROUP BY u1.firstname\n",
    "label": 1
  },
  {
    "text_1": "SQL View displaying current status of a \"unit\" for every date that something changes with the \"unit\"",
    "text_2": "eff_date                Name       Location   UnitSize\n----------------------- ---------- ---------- ----------\n2009-01-01 00:00:00.000 Unit 1     LocationA  NULL\n2009-02-20 00:00:00.000 Unit 1     LocationA  Size1\n2010-01-12 00:00:00.000 Unit 1     LocationA  Size2\n2010-03-01 00:00:00.000 Unit 1     LocationB  Size2\n2010-01-02 00:00:00.000 Unit 2     NULL       Size9\n2010-03-03 00:00:00.000 Unit 2     Locationz  Size9\n\n(6 row(s) affected)\n",
    "label": 1
  },
  {
    "text_1": "How to define recursive foreign key on 2 columns",
    "text_2": "alter table Menu add constraint fk_same_parent_app\nforeign key (ParentId, AppId) references Menu(Id, AppId)\n",
    "label": 1
  },
  {
    "text_1": "How to convert values between 2 columns into csv text",
    "text_2": "SQL> with the_times as ( \n  select starttime\n       , endtime\n       , trunc( ( to_date(starttime,'hh24:mi') \n               - trunc(sysdate) ) * 48) + 1 as starttime_x\n       , trunc( ( to_date(endtime,'hh24:mi') \n                - trunc(sysdate) ) * 48) + 1 as endtime_x\n    from times\n         )\n , all_times as (\n  select level as t\n    from dual\n connect by level <= 48\n         )\n select starttime, endtime\n      , 'x' || starttime_x as starttime_x, 'x' || endtime_x as endtime_x\n      , listagg('x' || t, ', ') within group ( order by t ) as range\n   from ( select a.*, b.t\n            from the_times a\n           cross join all_times b\n           where b.t between a.starttime_x and a.endtime_x\n                 )\n  group by starttime, endtime, 'x' || starttime_x, 'x' || endtime_x;\n\nSTARTTIME ENDTIME STA END RANGE\n--------- ------- --- --- ---------------------------------------------------------------------------\n00:30     07:30   x1  x16 x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16\n16:00     19:00   x33 x39 x33, x34, x35, x36, x37, x38, x39\n19:00     20:00   x39 x41 x39, x40, x41\n",
    "label": 1
  },
  {
    "text_1": "Duplicate data from one DB Table to another DB Table?",
    "text_2": "INSERT INTO dbo.DOG(list of columns)\n   SELECT (list of columns)\n   FROM SourceServer.ANIMAL2.dbo.DOG\n",
    "label": 1
  },
  {
    "text_1": "Oracle SQL query question",
    "text_2": "Department Average\n1          15\n2          16\n3          17\n4          18\n",
    "label": 1
  },
  {
    "text_1": "How to select 6 top records of each individual records at the database when selecting from all rows",
    "text_2": "select SUM(cast(PokemonExp as bigint)) as ToplamExp,\n       MAX(PokemonLevel) as MaxPokeLevel,\n       Count(PokemonId) as TotalPoke,UserId \nfrom (select p.*,\n             row_number() over (partition by userid order by pokemanexp desc) as seqnum\n      from tblUsersPokemons p\n     ) p\nwhere seqnum <= 6\ngroup by UserId;\n",
    "label": 1
  },
  {
    "text_1": "How to query for both posts and post upvotes in MySQL?",
    "text_2": "SELECT E.id\n    , E.googleID\n    , E.title\n    , L.likeCount\n    FROM elements E\n    LEFT JOIN (\n        SELECT elementId\n            , COUNT(id) AS likeCount\n            FROM likes\n            GROUP BY elementId\n    ) L ON L.elementId = E.id\n",
    "label": 1
  },
  {
    "text_1": "Count the version numbers owned by customers",
    "text_2": "SELECT\n    y.[Cust ID],\n    Max(y.Version) AS MaxOfVersion\nFROM YourTable AS y\nGROUP BY y.[Cust ID];\n",
    "label": 1
  },
  {
    "text_1": "Getting data from SQL Server database",
    "text_2": "SqlConnection conn = new SqlConnection(\"connection string goes here\");\nSqlCommand cmd = new SqlCommand(\"SELECT foo FROM ...\", conn);\n\nconn.Open();\nint age = (int)cmd.ExecuteScalar();\nconn.Close();\n",
    "label": 1
  },
  {
    "text_1": "Calculate in a table with different cells - SQL Server / T-SQL",
    "text_2": "Team                 Sum of the team\n-------------------- ---------------\nBarcelona            45\nChelsea              71\nReal Madrid          46\n",
    "label": 1
  },
  {
    "text_1": "Avoid repetition of rows in sqlite3",
    "text_2": "insert into t(col1, . . ., col14)\n    select val1, . . ., val14\n    where not exists (select 1 from t where col1 = val1 and col2 = val2 and . . .);\n",
    "label": 1
  },
  {
    "text_1": "How can I have NHibernate only generate the SQL without executing it?",
    "text_2": "public String GetGeneratedSql(System.Linq.IQueryable queryable, ISession session)\n{\n    var sessionImp = (ISessionImplementor) session;\n    var nhLinqExpression = new NhLinqExpression(queryable.Expression, sessionImp.Factory);\n    var translatorFactory = new ASTQueryTranslatorFactory();\n    var translators = translatorFactory.CreateQueryTranslators(nhLinqExpression, null, false, sessionImp.EnabledFilters, sessionImp.Factory);\n\n    return translators[0].SQLString;\n}\n",
    "label": 1
  },
  {
    "text_1": "SQL - Select what is not in second table from assocciative",
    "text_2": "CREATE TABLE VACCINATION ( VACCINATION_NUMBER, VACCINATION_NAME ) AS\n          SELECT 1, 'Vac 1' FROM DUAL\nUNION ALL SELECT 2, 'Vac 2' FROM DUAL\nUNION ALL SELECT 3, 'Vac 3' FROM DUAL\nUNION ALL SELECT 4, 'Vac 4' FROM DUAL;\n\nCREATE TABLE PERSON_VACCINATION ( VACCINATION_NUMBER, PERSON_NUMBER ) AS\n          SELECT 1, 1 FROM DUAL\nUNION ALL SELECT 2, 1 FROM DUAL\nUNION ALL SELECT 3, 1 FROM DUAL\nUNION ALL SELECT 4, 1 FROM DUAL\nUNION ALL SELECT 1, 2 FROM DUAL\nUNION ALL SELECT 2, 2 FROM DUAL\nUNION ALL SELECT 3, 2 FROM DUAL;\n\nCREATE TABLE PERSON ( PERSON_NUMBER, PERSON_NAME ) AS\n          SELECT 1, 'P1' FROM DUAL\nUNION ALL SELECT 2, 'P2' FROM DUAL\nUNION ALL SELECT 3, 'P3' FROM DUAL;\n",
    "label": 1
  },
  {
    "text_1": "Oracle connect by with aggregation",
    "text_2": "select employee_id, last_name, manager_id, sales, suma, prior suma psuma,\n    cast(suma / (prior suma + suma) as number(8, 4)) sumb\n  from (\n    with t as (SELECT employee_id, last_name, manager_id, sales, LEVEL lvl\n       FROM employees\n       where employee_id in (101, 108, 109, 110)\n       CONNECT BY PRIOR employee_id = manager_id\n       start with employee_id = 101)\n    select employee_id, last_name, manager_id, sales, lvl,\n      sum(sales) over (partition by manager_id) suma from t) t\n  connect by prior employee_id = manager_id\n  start with employee_id=101\n  order siblings by employee_id\n",
    "label": 1
  },
  {
    "text_1": "parse CSV file .. problem with managing primary key?",
    "text_2": "TRIGGER TABLE_OF_CSV_TRG BEFORE INSERT ON TABLE_OF_CSV \nFOR EACH ROW \nBEGIN\n  <<COLUMN_SEQUENCES>>\n  BEGIN\n    IF :NEW.FIELD_ID IS NULL THEN\n      SELECT FIELD_ID_SEQ.NEXTVAL INTO :NEW.FIELD_ID FROM DUAL;\n    END IF;\n  END COLUMN_SEQUENCES;\nEND;\n",
    "label": 1
  },
  {
    "text_1": "HAVING clause properties",
    "text_2": "Answer: COUNT(DISTINCT length) = COUNT(length)\n",
    "label": 1
  },
  {
    "text_1": "Filtering MySQL query result set to yield multiple occurences within a specific period of time",
    "text_2": "... ON cdr_records (originalCalledPartyNumber,dateTimeOrigination)\n",
    "label": 1
  },
  {
    "text_1": "sql table row - column conversion",
    "text_2": "DECLARE @cols AS VARCHAR(MAX),\n        @query AS VARCHAR(MAX)\n\nSET @cols = STUFF((SELECT distinct ',[' + Prodname +']'\n            FROM Product c\n            FOR XML PATH(''), TYPE\n            ).value('.', 'VARCHAR(MAX)') \n        ,1,1,'')\n\n\nSET @query = \n'    SELECT    * \n    FROM \n    (\n        SELECT    Prodname, \n                  pcode, \n                  Biiledamt\n        FROM      Product\n    ) p\n    PIVOT \n    (\n        SUM    (Biiledamt)\n        FOR    Prodname IN (' + @cols + ')\n    )   AS pvt\n'\n\n\nEXEC(@query)\n",
    "label": 1
  },
  {
    "text_1": "SQL Decode - SELECT & WHERE",
    "text_2": "SELECT \n firstName,\n lastName,\n decodeMath,\n decodeEng,\nFROM \n  (SELECT\n   firstName,\n   lastName,\n   decode(mathMrk, 80, 'A', mathMrk) as decodeMath,\n   decode(engMrk, 80, 'A', engMrk) as decodeEng,\n  FROM table) tableview\nWHERE\n decodeMath IN ('A','B','C')\nOR decodeEng IN ('A','B');\n",
    "label": 1
  },
  {
    "text_1": "Oracle Implicit Conversion of String to date?",
    "text_2": "WHERE mytable.mydatefield > TO_DATE('23-OCT-2015', 'DD-MON-YYYY')\n",
    "label": 1
  },
  {
    "text_1": "List of tables to safely truncate in Magento?",
    "text_2": "More report tables\nreport_viewed_product_aggregated_daily\nreport_viewed_product_aggregated_monthly\nreport_viewed_product_aggregated_yearly\n",
    "label": 1
  },
  {
    "text_1": "SQL query: only one dataset per specific attribut",
    "text_2": "╔════════════╦══════════╦═══════════╦══════════╗\n║ RESTAURANT ║ DISTRICT ║ LONGITUDE ║ LATITUDE ║\n╠════════════╬══════════╬═══════════╬══════════╣\n║ perseus    ║        1 ║ 80.879    ║ -56.00   ║\n║ artica     ║        2 ║ 67.708    ║ -69.89   ║\n║ petera     ║        3 ║ 89.00     ║ -78.89   ║\n╚════════════╩══════════╩═══════════╩══════════╝\n",
    "label": 1
  },
  {
    "text_1": "SQL FROM_UNIXTIME Not Correct",
    "text_2": "SELECT @@global.time_zone;\n",
    "label": 1
  },
  {
    "text_1": "Add timezone to Oracle 'DATE' result",
    "text_2": "SELECT TO_CHAR(FROM_TZ(CAST(x AS TIMESTAMP), 'America/New_York'),\n               'YYYY-MM-DD HH24:MI:SSTZHTZM') AS x\n",
    "label": 1
  },
  {
    "text_1": "What can be the best model of SQL tables to keep rows of data with 82 columns?",
    "text_2": "CREATE TABLE deviceData\n  ( deviceID INT\n  , sessionID INT\n  , setID INT\n  , a int\n  , b int\n  , c int\n  , d int\n  , e int\n  , f int\n  , g int\n  , h float\n  , i float\n  , j double\n  , PRIMARY KEY (deviceID, sessionID, setID)\n  ) ;\n",
    "label": 1
  },
  {
    "text_1": "Where, either or not both clause SQL",
    "text_2": "SELECT enrolled.StudentID, student.LastName, student.FirstName, enrolled.courseID, max(enrolled.Quarter) as quarter\nFROM enrolled \nINNER JOIN student ON enrolled.studentID = student.SID\nGROUP BY enrolled.StudentID, student.LastName, student.FirstName, enrolled.courseID\nHAVING count(*) = 1\n",
    "label": 1
  },
  {
    "text_1": "How to change the date format in sql queries",
    "text_2": "SELECT DATE_FORMAT(`date`,  '%W @ %l:%i%p %d/%m/%Y') FROM cms_content\n",
    "label": 1
  },
  {
    "text_1": "Join a Column with SELECT query in PostgreSQL",
    "text_2": "SELECT id, cast('ID1' AS varchar) AS \"ID1\" FROM \"supportContacts\"\n",
    "label": 1
  },
  {
    "text_1": "PARTITION BY Name, Id to compare and detect problems",
    "text_2": "select\n    distinct\n    s.name\n    ,case\n        when i.name is not null then 1\n        else 0\n    end as issue\nfrom\n    table1 as s\n    left outer join (\n                select \n                    name\n                    ,PersonalNo\n                    ,count(*) as numIDs\n                from(\n                    select\n                        a.name\n                        ,coalesce(a.PersonalNo,b.PersonalNo) as PersonalNo\n                        ,a.stringID\n                    from \n                        table1 as a\n                            left outer join table1 as b\n                                on a.name = b.name\n                                and a.stringid=b.stringid\n                                and a.personalNo != b.personalNo\n                                and b.personalNo Is Not Null\n                    group by\n                        a.name\n                        ,a.PersonalNo\n                        ,a.stringID\n                        ,b.PersonalNo\n                    ) as i\n                group by\n                    name\n                    ,PersonalNo\n                having \n                    count(*) > 1\n        )\n        as i\n        on s.name = i.name\n        and s.personalNo = i.personalNo\norder by issue desc\n",
    "label": 1
  },
  {
    "text_1": "Loop over datablock extremely slow (oracle forms, pl/sql)",
    "text_2": "    if :block.number > :gobal.maxvalue then   \n           :gobal.maxvalue := :block.number;\n    end if;\n    if :system.last_record = 'TRUE' then\n       do something with :global.maxvalue;  -- we are on the last record of the query, so do something with the max value\n    end if;\n",
    "label": 1
  },
  {
    "text_1": "How to count rows by group in a SQL query",
    "text_2": "SELECT DISTINCT \n       customer, \n       quote_type,\n       COUNT(*) OVER (partition by customer, quote_type order by customer) as type_total,\n       COUNT(*) OVER (partition by customer order by customer) as customer_total\nFROM customers\n",
    "label": 1
  },
  {
    "text_1": "Make a new user in SQL developer to create a new database",
    "text_2": "USER0> create user USER1 identified by PASSWORD;\n",
    "label": 1
  },
  {
    "text_1": "Oracle trimspool only trailing blanks (not leading blanks)",
    "text_2": "no indent\n   indent\n",
    "label": 1
  },
  {
    "text_1": "How do I add Time in SQL?",
    "text_2": "--this does a few things\n-- 1) converts the time stored as a varchar to the time datatype\n-- 2) adds 90 minutes\n-- 3) converts the time result back to the varchar datatype\n\nselect convert(varchar(10), dateadd(mi, 90, convert(time, '1:30 PM')), 100)\n\n\n--this will show a final result of \"3:00PM\"\n",
    "label": 1
  },
  {
    "text_1": "How do we control dynamic ordering by a Field in a table?",
    "text_2": "+----+--------------+----------+\n| id | question     | position |\n+----+--------------+----------+\n|  1 | Question 1   |        1 |\n|  2 | Question 2   |        2 |\n|  3 | Question 3   |        3 |\n+----+--------------+----------+\n",
    "label": 1
  },
  {
    "text_1": "Counting rows when generating XML data",
    "text_2": "<?xml version=\"1.0\" standalone=\"yes\"?>\n<table_description>\n  <table_name>ALL_APPLY_ENQUEUE</table_name>\n  <table_sequence>1</table_sequence>\n  <table_columns>\n    <column_description>\n      <column_name>DESTINATION_QUEUE_NAME</column_name>\n      <column_sequence>1</column_sequence>\n    </column_description>\n    <column_description>\n      <column_name>RULE_OWNER</column_name>\n      <column_sequence>3</column_sequence>\n    </column_description>\n    <column_description>\n      <column_name>RULE_NAME</column_name>\n      <column_sequence>2</column_sequence>\n    </column_description>\n  </table_columns>\n</table_description>\n<table_description>\n  <table_name>ALL_APPLY_EXECUTE</table_name>\n  <table_sequence>2</table_sequence>\n  <table_columns>\n    <column_description>\n      <column_name>EXECUTE_EVENT</column_name>\n      <column_sequence>1</column_sequence>\n    </column_description>\n    <column_description>\n      <column_name>RULE_OWNER</column_name>\n      <column_sequence>3</column_sequence>\n    </column_description>\n    <column_description>\n      <column_name>RULE_NAME</column_name>\n      <column_sequence>2</column_sequence>\n    </column_description>\n  </table_columns>\n</table_description>\n<table_description>\n  <table_name>ALL_APPLY_KEY_COLUMNS</table_name>\n  <table_sequence>3</table_sequence>\n  <table_columns>\n    <column_description>\n      <column_name>APPLY_DATABASE_LINK</column_name>\n      <column_sequence>1</column_sequence>\n    </column_description>\n    <column_description>\n      <column_name>OBJECT_OWNER</column_name>\n      <column_sequence>4</column_sequence>\n    </column_description>\n    <column_description>\n      <column_name>OBJECT_NAME</column_name>\n      <column_sequence>3</column_sequence>\n    </column_description>\n    <column_description>\n      <column_name>COLUMN_NAME</column_name>\n      <column_sequence>2</column_sequence>\n    </column_description>\n  </table_columns>\n</table_description>\n",
    "label": 1
  },
  {
    "text_1": "How to generate hours between two hours in SQL Server?",
    "text_2": "DECLARE @timeFrom TIME = '09:00'\nDECLARE @timeTo TIME = '18:00'\n\n;with SourceHrs\nas\n(\n    select @timeFrom as [Hours]\n    UNION ALL\n    SELECT DATEADD(MINUTE, 30, [Hours]) from SourceHrs WHERE [Hours] < @timeTo\n)\nSELECT CONVERT(VARCHAR(5),Hours,108) FROM SourceHrs\n",
    "label": 1
  },
  {
    "text_1": "REGEXP_SUBSTR find groups",
    "text_2": "^(\\$E\\[([A-Z|a-z|0-9|_]+)\\]#)(\\$D\\[(.*)\\]#)?$\n",
    "label": 1
  },
  {
    "text_1": "Having partitiion on all distinct values where new value can come",
    "text_2": "select * from shops partition (shops_unknown);\n",
    "label": 1
  },
  {
    "text_1": "Can I update two fields in a single set statement?",
    "text_2": "SET (column_name, column_name, ...) = (subquery4) \n",
    "label": 1
  },
  {
    "text_1": "Rolling calendar pivot in sql server?",
    "text_2": "Declare @sql nvarchar(max);\n\nSet @sql = '\n    SELECT *\n    FROM \n    (\n    SELECT \n        t1.customer_code,\n        t1.part_number,\n        LEFT(DATENAME(month, [formatted_date]),3) as [Month],\n        t1.quantity as [quantity] FROM FORECAST_VIEW as t1   \n        where\n            quantity <> 0 \n            and formatted_date >= DATEADD(month, DATEDIFF(month, 0, GETDATE()), 0)  \n    ) as p\n    pivot\n    (   sum(quantity)\n        for [Month] in ('+@cols+')\n    ) as p\n    order by customer_code, part_number;\n\nEXEC sp_executesql @sql;\n",
    "label": 1
  },
  {
    "text_1": "MySQL SUM by if statement",
    "text_2": " SELECT \n    `u.type`,\n    SUM(CASE WHEN `custom_sum` = '' THEN `sum` ELSE `custom_sum` END)\nFROM \n    `localhost-test` \nGROUP BY \n    `type`\n",
    "label": 1
  },
  {
    "text_1": "General rules for simplifying SQL statements",
    "text_2": "SELECT  mi.id, SUM(mo.value) AS running_sum\nFROM    mytable mi\nJOIN    mytable mo\nON      mo.id <= mi.id\nGROUP BY\n        mi.id\n",
    "label": 1
  },
  {
    "text_1": "Display row values as column header",
    "text_2": "       A       \n  ------------ \n   12/17/2014   \n  ------------ \n FREE   |USED   \n -------|-------\n 1      |0      \n 1      |0      \n 1      |0  \n",
    "label": 1
  },
  {
    "text_1": "SQL - Finding if a single value meets criteria from one column",
    "text_2": "SELECT EID \n FROM Assignment15\n JOIN Cottage15 ON Assignment15.Cnum = Cottage15.Cnum\n WHERE Category IN (3,4) \n GROUP BY EID\n HAVING COUNT(DISTINCT Category) = 2\n",
    "label": 1
  },
  {
    "text_1": "Sorting out in order a Convert to string Datetime in SQL Server and Crystal Report",
    "text_2": "ToText({datefield},”MMM dd”)\n",
    "label": 1
  },
  {
    "text_1": "Tricky T-SQL Query. Concatenate multiple values from a column between master/child tables",
    "text_2": "select t.*\nfrom\n(\n    select c.ChildId, c.ChildName\n\n        , STUFF((\n            select ', ' + m.MasterName\n            from\n            (\n                select l.MasterId1\n                from @LinkTable l\n                where l.ChildId = c.ChildId\n\n                union\n\n                select l.MasterId2\n                from @LinkTable l\n                where l.ChildId = c.ChildId\n            )t\n            join @masterTable m on m.MasterId = t.MasterId1\n            for xml path(''), type\n        ).value('.', 'varchar(max)'), 1, 2, '') [names]\n\n        , STUFF((\n            select ', ' + cast(t.MasterId1 as varchar(max))\n            from\n            (\n                select l.MasterId1\n                from @LinkTable l\n                where l.ChildId = c.ChildId\n\n                union\n\n                select l.MasterId2\n                from @LinkTable l\n                where l.ChildId = c.ChildId\n            )t\n            for xml path(''), type\n        ).value('.', 'varchar(max)'), 1, 2, '') [ids]\n    from @childrenTable c\n)t\nwhere t.ids is not null\n",
    "label": 1
  },
  {
    "text_1": "Copying data from one table to another different column names",
    "text_2": "BROWARD (broward_ID, name, dob, address) /*source*/\nTEMP (ID, name, address,dob) /*target*/\n",
    "label": 1
  },
  {
    "text_1": "rails/activerecord: how to get SQL COUNT and SUM to work with Postgres (at heroku)",
    "text_2": "Beep.where(:store_id => 123).where(:survey_num => 2).sum(:numeric_score)\n=> 5\n",
    "label": 1
  },
  {
    "text_1": "SQL Rows into Columns",
    "text_2": "PERSON          SENIOR               MID                  JUNIOR              \n--------------- -------------------- -------------------- --------------------\nCARL            JAVA                 PHP                  VB.NET              \nGARY                                 C#                                       \nGARY                                 VB.NET                                   \nRALPH           JAVASCRIPT                                RUBY                \nRALPH           PHP                                                           \n\n5 rows selected.\n",
    "label": 1
  },
  {
    "text_1": "MAX in SELECT statement",
    "text_2": "INSERT INTO oitc_test (username, xpboost_expiration, level, exp, kills, games) \nSELECT o.username, o.xpboost_expiration, MAX(o.level), MAX(o.exp), os.kills, os.games \nFROM oitc o\nINNER JOIN oitc_sum os\n    ON o.username = os.username\nGROUP BY o.username;\n",
    "label": 1
  },
  {
    "text_1": "How to select all rows with a unique field, and get all fields in that row in the result set in MySQL?",
    "text_2": "SELECT   (\n            SELECT   column_a \n            FROM     foo_table f2 \n            WHERE    f2.column_b = f1.column_b \n            ORDER BY f2.date DESC\n            LIMIT    1\n         ) column_a,\n         f1.column_b\nFROM     foo_table f1\nGROUP BY f1.column_b;\n",
    "label": 1
  },
  {
    "text_1": "How Non-Clustered affects Clustered Index (PK)",
    "text_2": "CREATE Table DTL_Event (ID INT not null , TYPE tinyint not null  , Severity tinyint  not null ,[Message] varchar(1000) not null , ReferenceTypeId int ,ReferenceId int\n\n ,ParentId int , ParentTypeId int ,Created datetime   , primary key (ID))\n",
    "label": 1
  },
  {
    "text_1": "MySQL Calculate Percentage from one table",
    "text_2": "select techUser_id, result, count(*) num\nfrom inspection \ngroup by techUser_id, result\norder by num\n",
    "label": 1
  },
  {
    "text_1": "Search between min and max in database from $_GET data in codeigniter",
    "text_2": "<a href=\"<?php echo base_url() ?>Controller/Method/MinYear/MaxYead\"></a>\n<a href=\"<?php echo base_url() ?>welome/diff/2013/2016\"></a>\n",
    "label": 1
  },
  {
    "text_1": "SQL: Combinations by Type",
    "text_2": "select row_number() over (order by combo_id) row_id\n     , pvt.*\n  from (select combo_id, type, val from Down)\n pivot (max(val) \"SET\"\n   for (type) in ('a' A\n                 ,'b' B\n                 ,'c' C)) pvt;\n",
    "label": 1
  },
  {
    "text_1": "Should order_products table be denormalized?",
    "text_2": "SELECT *\nFROM   product_history\nWHERE  product_id = $my_product_id\nAND    valid_from <= $my_date\nORDER  BY valid_from DESC\nLIMIT  1;\n",
    "label": 1
  },
  {
    "text_1": "Inserting and selecting row Id in one statement",
    "text_2": "insert into tTest \n  (  loca\n    ,name\n  )\nOUTPUT inserted.id\n  values (\n    @loc\n    ,@name\n  );\n",
    "label": 1
  },
  {
    "text_1": "Is it reasonable to stuff 1000 ids into a SELECT ... WHERE ... IN (...) query on Postgres?",
    "text_2": "# fetch 10\n Nested Loop  (cost=30.00..2341.27 rows=15002521 width=8) (actual time=0.110..84.494 rows=11 loops=1)\n   ->  HashAggregate  (cost=30.00..32.00 rows=200 width=4) (actual time=0.046..0.054 rows=11 loops=1)\n         ->  Function Scan on generate_series  (cost=0.00..17.50 rows=1000 width=0) (actual time=0.036..0.039 rows=11 loops=1)\n   ->  Index Scan using t_pkey on t  (cost=0.00..11.53 rows=1 width=8) (actual time=7.672..7.673 rows=1 loops=11)\n         Index Cond: (t.id = (((random() * 30000000::double precision))::integer))\n Total runtime: 84.580 ms\n\n\n# fetch 100\n Nested Loop  (cost=30.00..2341.27 rows=15002521 width=8) (actual time=12.405..1184.758 rows=101 loops=1)\n   ->  HashAggregate  (cost=30.00..32.00 rows=200 width=4) (actual time=0.095..0.210 rows=101 loops=1)\n         ->  Function Scan on generate_series  (cost=0.00..17.50 rows=1000 width=0) (actual time=0.046..0.067 rows=101 loops=1)\n   ->  Index Scan using t_pkey on t  (cost=0.00..11.53 rows=1 width=8) (actual time=11.723..11.725 rows=1 loops=101)\n         Index Cond: (t.id = (((random() * 30000000::double precision))::integer))\n Total runtime: 1184.843 ms\n\n# fetch 1,000\n Nested Loop  (cost=30.00..2341.27 rows=15002521 width=8) (actual time=14.403..12406.667 rows=1001 loops=1)\n   ->  HashAggregate  (cost=30.00..32.00 rows=200 width=4) (actual time=0.609..1.689 rows=1001 loops=1)\n         ->  Function Scan on generate_series  (cost=0.00..17.50 rows=1000 width=0) (actual time=0.128..0.332 rows=1001 loops=1)\n   ->  Index Scan using t_pkey on t  (cost=0.00..11.53 rows=1 width=8) (actual time=12.381..12.390 rows=1 loops=1001)\n         Index Cond: (t.id = (((random() * 30000000::double precision))::integer))\n Total runtime: 12407.059 ms\n\n# fetch 10,000\n Nested Loop  (cost=30.00..2341.27 rows=15002521 width=8) (actual time=21.884..109743.854 rows=9998 loops=1)\n   ->  HashAggregate  (cost=30.00..32.00 rows=200 width=4) (actual time=5.761..18.090 rows=9998 loops=1)\n         ->  Function Scan on generate_series  (cost=0.00..17.50 rows=1000 width=0) (actual time=1.004..3.087 rows=10001 loops=1)\n   ->  Index Scan using t_pkey on t  (cost=0.00..11.53 rows=1 width=8) (actual time=10.968..10.972 rows=1 loops=9998)\n         Index Cond: (t.id = (((random() * 30000000::double precision))::integer))\n Total runtime: 109747.169 ms\n\n# fetch 100,000\n Nested Loop  (cost=30.00..2341.27 rows=15002521 width=8) (actual time=110.244..1016781.944 rows=99816 loops=1)\n   ->  HashAggregate  (cost=30.00..32.00 rows=200 width=4) (actual time=110.169..253.947 rows=99816 loops=1)\n         ->  Function Scan on generate_series  (cost=0.00..17.50 rows=1000 width=0) (actual time=51.141..77.482 rows=100001 loops=1)\n   ->  Index Scan using t_pkey on t  (cost=0.00..11.53 rows=1 width=8) (actual time=10.176..10.181 rows=1 loops=99816)\n         Index Cond: (t.id = (((random() * 30000000::double precision))::integer))\n Total runtime: 1016842.772 ms\n",
    "label": 1
  },
  {
    "text_1": "sql to group sort and concat two columns into one text field",
    "text_2": "select y, max(sys_connect_by_path(x, ' | ')) trans\nfrom (\nselect y, x, row_number() over (partition by y order by x) cur, row_number() over (partition by y order by x) - 1 prev \nfrom (select col1 y, col2 x from test_table\nunion \nselect col1 y, col3 x from test_table)\n)\nconnect by prior cur = prev and prior y = y\nstart with cur = 1\ngroup by y\n",
    "label": 1
  },
  {
    "text_1": "How to join on multiple columns in sql server",
    "text_2": "SELECT r.IndusName, r.NTLogin\nFROM ResourceLevel r\nINNER JOIN HierarchyLevel h\nON r.NTLogin IN (h.NTLevel1, h.NTLevel2, h.NTLevel3, h.NTLevel4, h.NTLevel5)\n",
    "label": 1
  },
  {
    "text_1": "inner join with extra conditions",
    "text_2": "ID  VALUE   REF     TYPE\n6   200     15      image\n7   400     15      image\n8   250     15      image\n9   500     15      image\n",
    "label": 1
  },
  {
    "text_1": "How do you move a partitioned table from one tablespace to another in Oracle 11g?",
    "text_2": "procedure setDefNdxPart (a_tname in varchar2, a_destTS in varchar2) is\ncursor iCur(vTname varchar2) is\n  select index_name\n  from user_part_indexes\n  where index_name in (select index_name\n             from user_indexes where table_name = vTname);\nbegin\nfor iRow in iCur(a_tname) loop\n sqlStmnt := 'alter index '||iRow.index_name||\n             ' modify default attributes '||\n             ' tablespace '||a_destTS;\nexecute immediate sqlStmnt;\nend loop;\n\nend setDefNdxPart;\n",
    "label": 1
  },
  {
    "text_1": "Getting previous column values in a new column",
    "text_2": "SELECT @a as Prev, @a:=COL1 as Current\nFROM MYTABLE\nORDER BY COL1;\n",
    "label": 1
  },
  {
    "text_1": "Help calculating complex sum in hierarchical dataset",
    "text_2": "--  drop table assembly;\n\ncreate table assembly (\n  part_id              number, \n  parent_part_id       number,\n  quantity             number\n);\n\ninsert into assembly values (2, 1,  2);\ninsert into assembly values (3, 2, 10);\ninsert into assembly values (4, 1,  2);\ninsert into assembly values (5, 4,  1);\ninsert into assembly values (3, 5,  5);\n",
    "label": 1
  },
  {
    "text_1": "Efficiently joining/merging based on matching part of a string",
    "text_2": "pattern = cats('/\\b(',substr(upcase(first_name),1,1),'|',upcase(first_name),').?\\s?',upcase(last_name),'\\b/');\n",
    "label": 1
  },
  {
    "text_1": "Escaping ampersands in JSON for Oracle",
    "text_2": "SQL> SELECT '{\"this is the JSON '|| chr(38)||chr(38) ||' it contains an ampersand\"}' str FROM dual;\n\nSTR\n------------------------------------------------\n{\"this is the JSON && it contains an ampersand\"}\n\nSQL>\n",
    "label": 1
  },
  {
    "text_1": "Best Linq2Sql equivalent of IsNull(Max(id))",
    "text_2": "context.Table\n   .Select(row => row.Id)\n   .OrderBy(id => id)\n   .LastOrDefault()\n",
    "label": 1
  },
  {
    "text_1": "How do I calculate the difference over time using one database table?",
    "text_2": "SELECT \n    cur.Date, \n    cur.Player, \n    prev.Score AS ScoreLastWeek,\n    cur.Score AS ScoreNow,\n    cur.Score - prev.Score AS Change\nFROM\n    Scores cur\n    INNER JOIN\n    Scores prev\n        ON cur.Player = prev.Player\n            AND cur.Date = DateAdd(\"d\", 7, prev.Date)\n",
    "label": 1
  },
  {
    "text_1": "Parse Dataframe string column into Street, City, State & Zip code",
    "text_2": "                  street       city state    zip country\n1 727 Wright Brothers Ln  Las Vegas    NV  89119     USA\n",
    "label": 1
  },
  {
    "text_1": "Dynamic cursor in inner loop. Multiple cursors",
    "text_2": "open department_cursor;  \nopen person_cursor;\n",
    "label": 1
  },
  {
    "text_1": "How to SELECT from a many to many linking-table with three Foreign Keys ??? Pic in desc",
    "text_2": "SELECT * FROM `st_glowne_others` go\nLEFT JOIN `st_glowne` ON `st_glowne`.name = go.st_glowne\nLEFT JOIN `st_pages` ON `st_pages`.name = go.st_pages\nLEFT JOIN `st_components` ON `st_components`.name = go.st_components\n",
    "label": 1
  },
  {
    "text_1": "Multiple insert SQL oracle",
    "text_2": "SQL> CREATE TABLE Table1 (\n  2    Table1Id NUMBER GENERATED ALWAYS AS IDENTITY,\n  3    column3 NUMBER,\n  4    CONSTRAINT A UNIQUE (Table1Id)\n  5  );\n\nTable created.\n\nSQL> INSERT ALL\n  2    INTO Table1 (column3) VALUES (1)\n  3    INTO Table1 (column3) VALUES (2)\n  4  SELECT * FROM dual;\nINSERT ALL\n*\nERROR at line 1:\nORA-00001: unique constraint (LALIT.A) violated\n\n\nSQL> SELECT * FROM table1;\n\nno rows selected\n\nSQL> ALTER TABLE table1\n  2  DISABLE CONSTRAINT a;\n\nTable altered.\n\nSQL> INSERT ALL\n  2    INTO Table1 (column3) VALUES (1)\n  3    INTO Table1 (column3) VALUES (2)\n  4  SELECT * FROM dual;\n\n2 rows created.\n\nSQL> SELECT * FROM table1;\n\n  TABLE1ID    COLUMN3\n---------- ----------\n         2          1\n         2          2\n\nSQL>\n",
    "label": 1
  },
  {
    "text_1": "mysql Why variable is not changing in if",
    "text_2": "SELECT rn, id, category_id, title\n  FROM\n(\n  SELECT *, @a := IF(@c = category_id, @a + 1, 1) rn, @c := category_id\n    FROM photos CROSS JOIN (SELECT @c := NULL, @a := 0) i\n   ORDER BY category_id\n) q\n WHERE rn <= 4;\n",
    "label": 1
  },
  {
    "text_1": "Multiple max results",
    "text_2": "select\n    max(t1.date) as date1,\n    max(t2.date) as date2,\n    t1.id2,\n    t1.id2\nfrom `table` t1\nleft join `table` t2 on t2.id1 = t1.id1 and t2.id2 = t1.id2 and t2.date < t1.date\ngroup by id1, id2;\n",
    "label": 1
  },
  {
    "text_1": "how to trim trailing spaces from every columns in all tables in PostgreSQL database",
    "text_2": "select \n       'UPDATE '||quote_ident(c.table_name)||' SET '||c.COLUMN_NAME||'=TRIM('||quote_ident(c.COLUMN_NAME)||')  \n        WHERE '||quote_ident(c.COLUMN_NAME)||' ILIKE ''% '' ' as script\nfrom (\n        select \n           table_name,COLUMN_NAME\n        from \n           INFORMATION_SCHEMA.COLUMNS \n        where \n           table_name LIKE 'tbl_%' and (data_type='text' or data_type='character varying')\n     ) c\n",
    "label": 1
  },
  {
    "text_1": "PostgresSQL Subqueries One-To-Many Relationship Search",
    "text_2": "SELECT e.employee_id, e.first_name, e.last_name\n  FROM employee e JOIN employee_skills es\n    ON es.employee_id = e.employee_id \n WHERE es.skill_id IN(1, 2)\n GROUP BY e.employee_id, e.first_name, e.last_name\nHAVING COUNT(DISTINCT es.skill_id) = 2\n",
    "label": 1
  },
  {
    "text_1": "Oracle VPD column masking, how can I change the default (null) value to XXX",
    "text_2": "SQL> set role none;\n\nRole set.\n\nSQL> select *\n  2    from tablea;\n\n        ID YOUR_SEC_COL\n---------- ------------------------------\n         1\n         2\n\nSQL> select *\n  2    from v_tablea;\n\n        ID YOUR_SEC_COL\n---------- ------------------------------\n         1 xxxxxx\n         2 xxxxxx\n\nSQL> set role all;\n\nRole set.\n\nSQL> select *\n  2    from v_tablea;\n\n        ID YOUR_SEC_COL\n---------- ------------------------------\n         1 secret text1\n         2 secret text2\n\nSQL> select *\n  2    from tablea;\n\n        ID YOUR_SEC_COL\n---------- ------------------------------\n         1 secret text1\n         2 secret text2\n",
    "label": 1
  },
  {
    "text_1": "SQL Logic doesn't work",
    "text_2": "Insert Into #Punch values ('04O')\nInsert into #Punch values ('02P')\nInsert into #Punch values ('00D')\nInsert into #Punch values ('02{')\nInsert into #Punch values ('09}')\n",
    "label": 1
  },
  {
    "text_1": "how to use group by in postgresql",
    "text_2": "create table country (\n  country_code char(2) primary key, -- ISO country code\n  country_name varchar(35) not null unique\n);\n\ninsert into country values \n('US', 'United States of America'),\n('IT', 'Italy'),\n('IN', 'India');\n\n-- The full name of a city is more than city name plus country name.\n-- In the US, there are a couple of dozen cities named Springfield,\n-- each in a different state. I'd be surprised if this weren't true\n-- in most countries.\ncreate table city (\n  country_code char(2) not null references country (country_code),\n  name varchar(35) not null,\n  population integer not null check (population > 0),\n  primary key (country_code, name)\n);\n\ninsert into city values \n('US', 'Rome, GA', 36303),\n('US', 'Washington, DC', 632323),\n('US', 'Springfield, VA', 30484),\n('IT', 'Rome', 277979),\n('IT', 'Milan', 1324110),\n('IT', 'Bari', 320475),\n('IN', 'Mumbai', 12478447),\n('IN', 'Patna', 1683200),\n('IN', 'Cuttack', 606007);\n",
    "label": 1
  },
  {
    "text_1": "How to decide which fields must be indexed in a database table",
    "text_2": "CREATE TABLE Business_hours\n( shop_id INT NOT NULL \n, day INT NOT NULL\n--- other columns\n, CONSTRAINT Business_hours_PK\n    PRIMARY KEY (shop_id, day, type, start_time, end_time)     -- your clustered index\n) \n",
    "label": 1
  },
  {
    "text_1": "Convert unknown number of comma separated varchars within 1 column into multiple columns",
    "text_2": "USE [db_name]\nGO\n\nSET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\n\nCREATE PROCEDURE [dbo].[usp_util_parse_out_axis] \n    (\n        @axis_tbl_prelim axisTable readonly\n    )\nAS\nBEGIN\n    -- SET NOCOUNT ON added to prevent extra result sets from\n    -- interfering with SELECT statements.\n    SET NOCOUNT ON;\n\n    declare @axis_tbl axisTable\n\n    --since TVP's are readonly, moving the data in the TVP to a local variable\n    --so that the update statement later on will work as expected\n    insert into @axis_tbl\n    select *\n    from @axis_tbl_prelim\n\n    declare @comma_cnt int\n        , @i int \n        , @sql_dyn nvarchar(max)\n        , @col_list nvarchar(max)\n\n    --dropping the global temp table if it already exists\n    if object_id('tempdb..##axis_unpvt') is not null\n        drop table ##axis_unpvt\n\n    create table ##axis_unpvt\n        (\n            axis_nbr varchar(25)\n            , row_num int\n            , axis_val varchar(max)\n        )\n\n    --getting the most commas\n    set @comma_cnt = (select max(len(a.axis1) - len(replace(a.axis1, ',', '')))\n                        from @axis_tbl as a)\n\n    set @i = 1\n    while @i <= @comma_cnt + 1\n    begin --while loop\n\n        --insert the data into the \"unpivot\" table one parsed value at a time (all rows) \n        insert into ##axis_unpvt\n        select 'axis' +  cast(@i as varchar(3))\n        , row_number() over (order by (select 100)) as row_num --making sure the data stays in the right row\n        , case when charindex(',', a.axis1, 0) = 0 and len(a.axis1) = 0 then NULL\n                when charindex(',', a.axis1, 0) = 0 and len(a.axis1) > 0 then a.axis1\n                when charindex(',', a.axis1, 0) > 0 then replace(left(a.axis1, charindex(',', a.axis1, 0)), ',', '')\n                else NULL\n        end as axis1\n        from @axis_tbl as a\n\n        --getting rid of the value that was just inserted from the source table\n        update a\n        set a.axis1 = case when charindex(',', a.axis1, 0) = 0 and len(a.axis1) > 0 then NULL\n                           when charindex(',', a.axis1, 0) > 0 then rtrim(ltrim(right(a.axis1, (len(a.axis1) - charindex(',', a.axis1, 0)))))\n                           else NULL\n                      end\n        from @axis_tbl as a\n        where 1=1\n        and (charindex(',', a.axis1, 0) = 0 and len(a.axis1) > 0\n             or charindex(',', a.axis1, 0) > 0) \n\n        --incrementing toward terminating condition\n        set @i += 1\n\n    end --while loop\n\n    --getting list of what the columns will be after pivoting\n    set @col_list = (select stuff((select distinct ', ' + axis_nbr\n                            from ##axis_unpvt as a\n                            for xml path ('')),1,1,''))\n\n    --building the pivot statement\n    set @sql_dyn = '\n    select '\n    + @col_list + \n    '\n    from ##axis_unpvt as a\n    pivot (max(a.axis_val)\n            for a.axis_nbr in ('\n                                + @col_list + \n                                ')) as p'\n\n    --executing the pivot statement\n    exec(@sql_dyn);\n\nEND\n",
    "label": 1
  },
  {
    "text_1": "Unpredictable query performance in Postgresql",
    "text_2": "with bc as (\nselect aid\nfrom b join c on b.cid = c.bid\nand b.timestamp between ? and ?\nand c.name = ?\n)\nselect a.id\nfrom a\nwhere exists (select 1 from bc)\nand exists (select 1 from bc where a.id = bc.aid)\nlimit 200\n",
    "label": 1
  },
  {
    "text_1": "Text replace with regex in SQL Server",
    "text_2": "<span class=\"myclass_12\"></span>\n<span class=\"myclass_234\"></span>\n<span class=\"myclass_4546\"></span>\n",
    "label": 1
  },
  {
    "text_1": "how to compare input with two columns of a table using a single sql statement?",
    "text_2": "SELECT id FROM admin WHERE Firstname+Lastname = 'testlast'\n",
    "label": 1
  },
  {
    "text_1": "how to query for items not in a set of id's - cleaning up data",
    "text_2": "10476 \n13212 \n",
    "label": 1
  },
  {
    "text_1": "MySQL count types per day",
    "text_2": "select date,\n       sum(case when type = 'type_a' then 1 else 0 end) as type_a,\n       sum(case when type = 'type_b' then 1 else 0 end) as type_b\nfrom   tbl\ngroup by date\n",
    "label": 1
  },
  {
    "text_1": "Write the array function from Postgres in Oracle Syntax",
    "text_2": "SELECT main.*\n    , cast( collect(SELECT columnA \n                      FROM tableB alt \n                    WHERE alt.columnB = main.columnB)\n            as typ_columnA_nt ) AS columnAs_to_tableA\nFROM tableA main\n",
    "label": 1
  },
  {
    "text_1": "SQL music playlist database design",
    "text_2": "id name\n",
    "label": 1
  },
  {
    "text_1": "Is the GROUP BY clause in SQL redundant?",
    "text_2": "SELECT (2 * (x + y)) / z + 1 AS a, MyFunction(x, y) AS b, SUM(z)\nFROM AnotherTable\nGROUP BY a, b\n",
    "label": 1
  },
  {
    "text_1": "Select query fetch data from 2 tables : sqlite",
    "text_2": "-- Check data\nSELECT * FROM Student_Id;\nSELECT * FROM Training_Status;\n\n-- 1.- Query (inner JOIN: only records that are on both tables)\nSELECT t1.groupId AS groupId, t1.GroupRollNo AS GroupRollNo, t1.Name AS Name, \n   t1.Age AS Age, t1.Level AS Level, t2.TrainingStatus AS TrainingStatus\nFROM Student_Id AS t1, Training_Status AS t2\nWHERE t1.groupID = t2.groupId AND t1.GroupRollNo = t2.GroupRollNo AND t1.groupId = \"G1\"\nORDER BY t1.groupId, t1.GroupRollNo;\n\n-- 2.- Query (outer join: Both tables are combined together showing all records)\nSELECT t1.groupId AS groupId, t1.GroupRollNo AS GroupRollNo, t1.Name AS Name, \n   t1.Age AS Age, t1.Level AS Level, t2.TrainingStatus AS TrainingStatus\nFROM Student_Id AS t1 LEFT JOIN Training_Status AS t2\nON t1.groupID = t2.groupId AND t1.GroupRollNo = t2.GroupRollNo\nWHERE t1.groupId = \"G1\"\nORDER BY t1.groupId, t1.GroupRollNo;\n\n-- 3.- Query for NOT NULL (outer join: Both tables are combined together showing all records)\nSELECT t1.groupId AS groupId, t1.GroupRollNo AS GroupRollNo, t1.Name AS Name, \n   t1.Age AS Age, t1.Level AS Level, t2.TrainingStatus AS TrainingStatus\nFROM Student_Id AS t1 LEFT JOIN Training_Status AS t2\nON t1.groupID = t2.groupId AND t1.GroupRollNo = t2.GroupRollNo\nWHERE t1.groupId = \"G1\" AND t2.TrainingStatus IS NOT NULL\nORDER BY t1.groupId, t1.GroupRollNo;\n\n-- 4.- Query for NULL (outer join: Both tables are combined together showing all records)\nSELECT t1.groupId AS groupId, t1.GroupRollNo AS GroupRollNo, t1.Name AS Name, \n   t1.Age AS Age, t1.Level AS Level, typeof(t2.TrainingStatus) AS TrainingStatus\nFROM Student_Id AS t1 LEFT JOIN Training_Status AS t2\nON t1.groupID = t2.groupId AND t1.GroupRollNo = t2.GroupRollNo\nWHERE t1.groupId = \"G1\" AND t2.TrainingStatus IS NULL\nORDER BY t1.groupId, t1.GroupRollNo;\n",
    "label": 1
  },
  {
    "text_1": "Is MySQL naturally slow at this kind of query, or do I have it misconfigured?",
    "text_2": "SELECT\n    r.whatever,\n    m.whatever,\n    -- ...\nFROM\n    recipients r\n    INNER JOIN messages m ON r.message_id = m.id\n    LEFT JOIN message_readers mr ON mr.read_by_id = r.id \n                                 AND mr.message_id = m.id\nWHERE\n    r.id = $user_id\n    AND mr.read_by_id IS NULL\n",
    "label": 1
  },
  {
    "text_1": "Synchronous MySQL query with NodeJS and KnexJS",
    "text_2": "var getNotes = function(owner) {\n    if(owner !== undefined) {\n        return knex.table('tblnotes').where('public',1).orWhere({ownerName : owner}).select('noteId');\n    }\n    else {\n        return knex.table('tblnotes').where('public',1).select('noteId');\n    }\n}\n",
    "label": 1
  },
  {
    "text_1": "SQL sum of 3 columns",
    "text_2": "SELECT SUM(A) + SUM(B) + SUM(C) as \"subtotal\" FROM alphabet WHERE id IN (1,5,378);\n",
    "label": 1
  },
  {
    "text_1": "Select user entries and following entries at the same time with MySQL",
    "text_2": "SELECT\n  photos.*\nFROM\n  photos\nWHERE\n  photos.uid = $current_uid\nOR\n  photos.uid IN (SELECT following FROM follows WHERE follower = $current_uid)\n",
    "label": 1
  },
  {
    "text_1": "Is there a `connect by` alternative in MySQL?",
    "text_2": "delete from paths where descendant in\n(select descendant from paths where ancestor = 6)\n",
    "label": 1
  },
  {
    "text_1": "SQL issue: Inserting values into one clumn, same amount of EMPTY values in every other column",
    "text_2": "COL_A    COL_B    COL_C\n=====    =====    =====\n1        Test     123\n2        NULL     NULL   \n3        NULL     234\n",
    "label": 1
  },
  {
    "text_1": "SQL Server : how to group values by month interval with offset",
    "text_2": "| INDEX |              FROM |                TO | 286    |\n----------------------------------------------------------\n|    -1 | December, 31 2011 | December, 31 2011 |  10*** |\n|     0 |  January, 01 2012 |  January, 02 2012 |  35    |\n|     4 |      May, 01 2012 |      May, 01 2012 |   5    |\n|     5 |     June, 01 2012 |     June, 01 2012 |   6    |\n",
    "label": 1
  },
  {
    "text_1": "SQL query to get customers based on other columns",
    "text_2": "SELECT customer_id, recipient_id, COUNT(DISTINCT product_id)\nFROM table_a\nGROUP BY customer_id, recipient_id\nHAVING COUNT(DISTINCT product_id)>1\n",
    "label": 1
  },
  {
    "text_1": "Finding most recent date based on consecutive dates",
    "text_2": ";WITH cte AS (\n    SELECT EmployeeID, AbsenceDate\n    FROM dbo.EmployeeAbsence\n    WHERE AbsenceDate = CAST(GETDATE() AS DATE)\n    UNION ALL\n    SELECT  e.EmployeeID, e.AbsenceDate\n    FROM cte\n    INNER JOIN dbo.EmployeeAbsence e ON e.EmployeeID = cte.EmployeeID \n           AND e.AbsenceDate = DATEADD(d,1,cte.AbsenceDate)\n    )\nSELECT cte.EmployeeID, MAX(cte.AbsenceDate) \nFROM cte\nGROUP BY cte.EmployeeID\n",
    "label": 1
  },
  {
    "text_1": "Composite foreign keys",
    "text_2": "PersonId int FOREIGN KEY REFERENCES People(PersonId)\n",
    "label": 1
  },
  {
    "text_1": "SQL MYSQL Select records excluding rows where any duplicates exist",
    "text_2": "UPDATE t\nJOIN (\n    SELECT bill_of_lading, COUNT(*)\n    FROM t\n    GROUP BY bill_of_lading\n    HAVING COUNT(*) = 1\n) AS selection USING (bill_of_lading)\nSET shipping_rate = 220\n",
    "label": 1
  },
  {
    "text_1": "Should I use the inserted table in this trigger to set a default value for a nullable foreign key?",
    "text_2": "ALTER TABLE [dbo].[Advertisers] ADD  CONSTRAINT [DF_Advertisers_Currency_Id]  DEFAULT ((101)) FOR [Currency_Id]\nGO\n",
    "label": 1
  },
  {
    "text_1": "Doing an atomic update of the first instance in a QuerySet",
    "text_2": "svn revert --recursive . \n",
    "label": 1
  },
  {
    "text_1": "mysql trigger to change user status after a certain amount of points has been reached",
    "text_2": "CREATE PROCEDURE refreshUserStatuses\n     UPDATE users u\n         JOIN statues s ON u.userPoints BETWEEN s.minimumPoints AND s.maximumPoints\n     SET u.userStatus = s.statusName;\n",
    "label": 1
  },
  {
    "text_1": "Get Last message loaded based on message type",
    "text_2": "RowNumber = ROW_NUMBER() OVER(PARTITION BY Messages.MessageTypeId \n                                ORDER BY Messages.MessageDate DESC,\n                                        Messages.MessageID DESC)\n",
    "label": 1
  },
  {
    "text_1": "vertica check if unique elements for each group from two columns are identical",
    "text_2": "select t.gid, max(val)\nfrom (select t.gid,\n             (case when not exists (select 1 from invertica t2 where t.gid = t2.gid and t.a = t2.b)\n                   then 0\n                   when not exists (select 1 from invertica t2 where t.gid = t2.gid and t.b = t2.a)\n                   then 0\n                   else 1\n              end) as val\n      from invertica t\n     ) t\ngroup by t.gid;\n",
    "label": 1
  },
  {
    "text_1": "SQL query to get customers based on other columns",
    "text_2": "SELECT customer_id, recipient_id, Product_ID\nFROM table_a\nGROUP BY customer_id, recipient_id, Product_ID\nHAVING COUNT(*)>1;\n",
    "label": 1
  },
  {
    "text_1": "SQL: Only Rounded numbers shown, everything else: Useless",
    "text_2": "select 2.0/7 as Value\n",
    "label": 1
  },
  {
    "text_1": "How to Multiply all values within a column with SQL like SUM()",
    "text_2": "3.1780538303479453\n",
    "label": 1
  },
  {
    "text_1": "SQL - Display two counts as columns from same table",
    "text_2": "select sum(case when column1 = 'x' and column2 = 'y' and column3 = 'z' then 1 else 0\n           end) as new_column1,\n       sum(case when column1 = 'xx' and column2 = 'yy' and column3 = 'zz' then 1 else 0\n           end) as new_column2\nfrom table1 ;\n",
    "label": 1
  },
  {
    "text_1": "Performance issue in case of SQL Match Against query for Multiple tables",
    "text_2": "select Score, Code, Cluster, Pathway, Role, Description\nfrom\n(\nSELECT MATCH(A.title, A.description) AGAINST('Computer Graphic Artist') AS 'Score',\n    A.code AS 'Code',\n    B.cluster AS 'Cluster',\n    B.pathway AS 'Pathway',\n    A.title AS 'Role',\n    A.description AS 'Description'\nFROM B\nINNER JOIN A ON B.code = A.code\nINNER JOIN C ON B.code = C.code\nWHERE MATCH(A.title, A.description) AGAINST('Computer Graphic Artist')\nUNION\nSELECT MATCH(A.title, A.description) AGAINST('Computer Graphic Artist') AS 'Score',\n    A.code AS 'Code',\n    B.cluster AS 'Cluster',\n    B.pathway AS 'Pathway',\n    A.title AS 'Role',\n    A.description AS 'Description'\nFROM B\nINNER JOIN A ON B.code = A.code\nINNER JOIN C ON B.code = C.code\nWHERE MATCH(B.cluster, B.pathway, B.descripton) AGAINST('Computer Graphic Artist')\nUNION\nSELECT MATCH(A.title, A.description) AGAINST('Computer Graphic Artist') AS 'Score',\n    A.code AS 'Code',\n    B.cluster AS 'Cluster',\n    B.pathway AS 'Pathway',\n    A.title AS 'Role',\n    A.description AS 'Description'\nFROM B\nINNER JOIN A ON B.code = A.code\nINNER JOIN C ON B.code = C.code\nWHERE MATCH(C.title) AGAINST('Computer Graphic Artist')\n) as sub_query\nORDER BY Score DESC, Cluster ASC\n",
    "label": 1
  },
  {
    "text_1": "Set autoincrement on a primary key without recreating the tables",
    "text_2": "CREATE TABLE dbo.table1\n(\nmycolumn INT PRIMARY KEY,\ncolumn1 CHAR(10),\ncolumn2 CHAR(10)\n)\n\nINSERT INTO dbo.table1\nSELECT TOP (100) ROW_NUMBER() OVER (ORDER BY (SELECT 0))\nFROM master..spt_values v1, master..spt_values v2\n",
    "label": 1
  },
  {
    "text_1": "Wufoo's Database Schema - How would you design it?",
    "text_2": "Filled_form (form_id, column_id, value)\n",
    "label": 1
  },
  {
    "text_1": "SQL: Update Multiple Rows With Different values",
    "text_2": "UPDATE [PO]\nSET TotalCost = (SELECT SUM(Cost) FROM [PO-Lines] WHERE [PO-Lines].POId = [PO].ID)\n",
    "label": 1
  },
  {
    "text_1": "Ordering results by the sum of each row",
    "text_2": "SELECT date, ( IFNULL(Count1,0) + IFNULL(Count2,0) + IFNULL(Count3,0) + IFNULL(Count4,0)) as TOTAL\nFROM TABLE\nGROUP BY data\nORDER BY ( IFNULL(Count1,0) + IFNULL(Count2,0) + IFNULL(Count3,0) + IFNULL(Count4,0)) DESC\nLIMIT 0,100;\n",
    "label": 1
  },
  {
    "text_1": "SQLPLUS saving to file",
    "text_2": "save test.sql create\n",
    "label": 1
  },
  {
    "text_1": "Recognize a sort order in a table",
    "text_2": "group_id  order_used_nr_times\n--------  -------------------\n1         3\n2         3\n3         1\n4         1\n5         3\n",
    "label": 1
  },
  {
    "text_1": "How to write trigger to update row in another table?",
    "text_2": "CREATE TRIGGER dbo.TrgEventsConfigInsert\nON dbo.EventsConfig\nAFTER INSERT\nAS \n    UPDATE insp\n    SET IsRepaired = 1\n    FROM dbo.Inspections insp\n    INNER JOIN Inserted i ON i.InspectionId = insp.Id\n    WHERE i.[Event] = -1\n",
    "label": 1
  },
  {
    "text_1": "How to pivot or 'merge' rows with column names?",
    "text_2": "create extension if not exists tablefunc;\n\nselect * from crosstab($ct$\n    select rank() over (partition by criterium order by crit_id), criterium, val\n    from (\n        select crit_id, criterium || '_v1' criterium, val1 val\n        from crit\n        union\n        select crit_id, criterium || '_v2' criterium, val2 val\n        from crit\n        ) sub\n    order by 1, 2\n    $ct$)\nas ct (rank bigint, \"T01_v1\" int, \"T01_v2\" int, \n                    \"T02_v1\" int, \"T02_v2\" int, \n                    \"T03_v1\" int, \"T03_v2\" int);\n\n rank | T01_v1 | T01_v2 | T02_v1 | T02_v2 | T03_v1 | T03_v2\n------+--------+--------+--------+--------+--------+--------\n    1 |      9 |      9 |      3 |      5 |      4 |      9\n    2 |      2 |      3 |      5 |      1 |      6 |      1\n(2 rows)\n",
    "label": 1
  },
  {
    "text_1": "How to select according to langague in sql?",
    "text_2": "where char_length(col) = length(col)\n",
    "label": 1
  },
  {
    "text_1": "How to decreasing value based on other column in SQL",
    "text_2": "with cte as (\n  Select ID_CLIent, Counter, Length, Amount, row_number()  \n  over (partition by ID_CLient order by counter) RN\nfrom foo)\n\nSelect ID_Client\n     , Counter\n     , Length\n     , Amount\n     , sum(Counter) over (Partition by ID_CLIENT order by ID_Client, RN) as Value1\n     , Amount - sum(Counter) over (Partition by ID_CLIENT order by ID_Client, RN) as Value2 \n  from cte c\n  order by ID_Client\n",
    "label": 1
  },
  {
    "text_1": "SQL Server: Best way to concatenate multiple columns?",
    "text_2": "SELECT  ISNULL(CAST(Col1 AS VARCHAR(50)),'')\n      + COALESCE(CONVERT(VARCHAR(50),Col2),'')\n",
    "label": 1
  },
  {
    "text_1": "Query 2 different items within the same field and the same table",
    "text_2": "SELECT s.master_id\n     , s.eventdate\n     , s.code\n     , s.term\n     , p.surname\n     , p.forename\n  FROM srch s\n INNER\n  JOIN person p \n    ON p.entity_id = s.master_id\n WHERE ( s.code LIKE 'C10..%' OR s.code LIKE 'R110%' )\n GROUP\n    BY s.master_id\n     , s.eventdate\n     , s.code\n     , s.term\n     , p.surname\n     , p.forename\nHAVING SUM(CASE WHEN s.code LIKE 'C10..%' THEN 1 ELSE 0 END) > 0\n   AND SUM(CASE WHEN s.code LIKE 'R110%'  THEN 1 ELSE 0 END) > 0\n ORDER BY s.master_id\n",
    "label": 1
  },
  {
    "text_1": "(SQL) Pulling specifc data from a big list where certain dates fall within a specific quarter",
    "text_2": ",DATEPART(year,lastchgdate) as Year,DATEPART(quarter,lastchgdate) AS Quarter,rank\n",
    "label": 1
  },
  {
    "text_1": "Override column value in WHERE clause?",
    "text_2": "$res = mysql_query(\"SELECT author FROM news WHERE id=\" . $_REQUEST['id'] .\" AND author LIKE ('a%')\");\n",
    "label": 1
  },
  {
    "text_1": "Changing a 0 or 1 value to \"Yes\" and \"No\" in APEX report",
    "text_2": "SELECT my_bool_to_str( cv_lodged ) cv_lodged,\n       other_columns\n  FROM students\n",
    "label": 1
  },
  {
    "text_1": "SQL Join for multiple tables",
    "text_2": "SELECT C.*\nFROM Class AS C \nWHERE c.ClassID NOT IN(SELECT bc.ClassID\n                       FROM BatchClass bc\n                       INNER JOIN Batch b ON B.BatchId = BC.BatchId\n                       WHERE b.status = 'Enrolled');\n",
    "label": 1
  },
  {
    "text_1": "sql double count in join statement",
    "text_2": "TableAID Value\n1        B1-1\n1        B1-2\n2        B2-1\n2        B2-2\n4        B4-1\n4        B4-2\n",
    "label": 1
  },
  {
    "text_1": "Only the latest data show on table",
    "text_2": "SELECT TOP 1 Data FROM Table ORDER BY Date DESC\n",
    "label": 1
  },
  {
    "text_1": "How can I return the total records from my SQL statement",
    "text_2": "SELECT COUNT(1)\n  FROM (\n          select year(createdat)\n               , count(id)\n            from memberevents\n           where memberid=22\n           group by year(createdat)\n       ) a\n",
    "label": 1
  },
  {
    "text_1": "Conversion failed when converting from a character string to uniqueidentifier",
    "text_2": " DECLARE @vPortalUID NVARCHAR(36)\n SET @vPortalUID='2A66057D-F4E5-4E2B-B2F1-38C51A96D385'\n DECLARE @nPortalUID AS UNIQUEIDENTIFIER\n SET @nPortalUID = CAST(@vPortalUID AS UNIQUEIDENTIFIER)\n PRINT @nPortalUID\n",
    "label": 1
  },
  {
    "text_1": "SQL - Creating multiple columns based on value",
    "text_2": "SELECT \n   pd.PID, pd.Observation_Date, pd.Observation_Time,\n   ss.Obs_Value,\n   bpd.Obs_Value,\n   bps.Obs_value,\n   h.Obs_Value,\n   w.Obs_Value\nFROM (SELECT DISTINCT PID, Observation_Date, Observation_Time FROM patient_data) AS pd\n     LEFT OUTER JOIN (SELECT PID, Observation_Date, Observation_Time, Obs_Value FROM patient_data WHERE Observation = 'Smoking Status') AS ss ON (pd.PID = ss.PID AND pd.Observation_Date = ss.Observation_Date AND pd.Observation_Time = ss.Observation_Time)\n     LEFT OUTER JOIN (SELECT PID, Observation_Date, Observation_Time, Obs_Value FROM patient_data WHERE Observation = 'BP Diastolic') AS bpd ON (pd.PID = bpd.PID AND pd.Observation_Date = bpd.Observation_Date AND pd.Observation_Time = bpd.Observation_Time)\n     LEFT OUTER JOIN (SELECT PID, Observation_Date, Observation_Time, Obs_Value FROM patient_data WHERE Observation = 'BP Systolic') AS bps ON (pd.PID = bps.PID AND pd.Observation_Date = bps.Observation_Date AND pd.Observation_Time = bps.Observation_Time)\n     LEFT OUTER JOIN (SELECT PID, Observation_Date, Observation_Time, Obs_Value FROM patient_data WHERE Observation = 'Height') AS h ON (pd.PID = h.PID AND pd.Observation_Date = h.Observation_Date AND pd.Observation_Time = h.Observation_Time)\n     LEFT OUTER JOIN (SELECT PID, Observation_Date, Observation_Time, Obs_Value FROM patient_data WHERE Observation = 'Weight') AS w ON (pd.PID = w.PID AND pd.Observation_Date = w.Observation_Date AND pd.Observation_Time = w.Observation_Time)\n",
    "label": 1
  },
  {
    "text_1": "Database Design for Orders and SubOrders",
    "text_2": "--using class table inheritance. postgresql syntax (sorry, but it's less verbose).\n\n-- a product is an abstract thing you can sell, ex good, combo, service, warranty.\ncreate table products (\n  product_id int primary key\n);\n\ncreate table goods (\n  product_id int primary key references products(product_id),\n  name text not null unique\n  ...other good columns\n); \n\ncreate table bundles (\n  product_id int primary key references products(product_id),\n  name text not null unique\n  ...other bundle columns\n);\n\n--map products to bundles:\ncreate table bundle_products (\n  bundle_id int references bundles(product_id),\n  product_id int references products(product_id),\n\n  primary key (bundle_id, product_id)\n);\n",
    "label": 1
  },
  {
    "text_1": "Create ranges of minutes (15) in select",
    "text_2": "with T2318(c3) as (\n  select 1434708000 - dbms_random.value(0, 80000) from dual\n  connect by level <= 10\n)\nselect to_char(secs_to_datetime(T2318.C3),'DD/MM/YYYY HH24:MI:SS') as datefield,\n  T2318.C3 as time_secs,\n  floor(T2318.C3/900) * 900 as fifteen_min_secs,\n  to_char(secs_to_datetime(floor(T2318.C3 / 900) * 900),\n    'DD/MM/YYYY HH24:MI:SS') as fifteen_min\nfrom T2318\norder by T2318.C3;\n\nDATEFIELD              TIME_SECS FIFTEEN_MIN_SECS FIFTEEN_MIN       \n------------------- ------------ ---------------- -------------------\n18/06/2015 12:34:02   1434630842       1434630600 18/06/2015 12:30:00\n18/06/2015 15:06:25   1434639985       1434639600 18/06/2015 15:00:00\n18/06/2015 16:43:27   1434645807       1434645000 18/06/2015 16:30:00\n18/06/2015 18:57:25   1434653845       1434653100 18/06/2015 18:45:00\n18/06/2015 19:01:09   1434654069       1434654000 18/06/2015 19:00:00\n18/06/2015 20:54:09   1434660849       1434660300 18/06/2015 20:45:00\n19/06/2015 03:59:48   1434686388       1434685500 19/06/2015 03:45:00\n19/06/2015 06:58:09   1434697089       1434696300 19/06/2015 06:45:00\n19/06/2015 07:36:36   1434699396       1434699000 19/06/2015 07:30:00\n19/06/2015 07:47:26   1434700046       1434699900 19/06/2015 07:45:00\n",
    "label": 1
  },
  {
    "text_1": "Dynamic Pivot Columns with related tables in Sql Server",
    "text_2": "set @query = 'SELECT * \n            from \n            (\n                select Q.courseId, C.className, Q.question, Q.questionID, A.answer,\n                    ''Answer''+cast(row_number() over(partition by q.questionid\n                                                        order by a.answer) as varchar(10)) seq\n                from questions Q \n                inner join classes C\n                    ON Q.courseId = C.courseId\n                inner join answers A  \n                    ON A.questionID = Q.questionID\n                where (Q.courseId = ''' + Str(@courseID) + ''')\n           ) x\n            pivot \n            (\n                max(answer)\n                for seq in (' + @cols + ')\n            ) AS p'\n\n\nexecute(@query)\n",
    "label": 1
  },
  {
    "text_1": "MSSQL stored procedure select all columns",
    "text_2": "CREATE PROCEDURE GET_FICONFIG\n   @IssuerKey INT,\n   @KeyName NVARCHAR(100)\nAS\ndeclare @s varchar(500) = 'SELECT ' + QUOTENAME(@KeyName) + ' FROM dbo.FiConfig WITH (NOLOCK) WHERE IssuerKey = ' + CAST(@IssuerKey as VARCHAR(10))\nexec(@s)\n",
    "label": 1
  },
  {
    "text_1": "Speeding up this SQL query",
    "text_2": "SELECT Delivery, \n       COUNT(*) AS Total, \n       COUNT(CASE WHEN Status = 2 THEN 1 END) AS Delivered \nFROM DeliveryItems \nGROUP BY Delivery\n",
    "label": 1
  },
  {
    "text_1": "Oracle REGEXP_LIKE to perform (case,space,special..etc)-insensitive column match with a search string",
    "text_2": "|            VAL |\n|----------------|\n|   Se ArCh TeRm |\n| S$EARCH ^term^ |\n",
    "label": 1
  },
  {
    "text_1": "\"Reference counting\" trigger in PostgreSQL",
    "text_2": "DELETE FROM refe r\nWHERE NOT EXISTS (SELECT 1 FROM foo WHERE refe = r.id)\nAND   NOT EXISTS (SELECT 1 FROM bar WHERE refe = r.id);\n",
    "label": 1
  },
  {
    "text_1": "Randomize Primary Keys Based on Existing Values",
    "text_2": "CREATE TABLE temp_old\n( ai INT NOT NULL AUTO_INCREMENT\n, id INT NOT NULL\n, PRIMARY KEY (ai)\n, INDEX old_idx (id, ai)\n) ENGINE = InnoDB ;\n\nCREATE TABLE temp_new\n( ai INT NOT NULL AUTO_INCREMENT\n, id INT NOT NULL\n, PRIMARY KEY (ai)\n, INDEX new_idx (id, ai)\n) ENGINE = InnoDB ;\n",
    "label": 1
  },
  {
    "text_1": "SQL Server : DELETE statement with rollback INSERT statement into a file",
    "text_2": "-- set up some test data\nDECLARE @table1 TABLE (id INT, name VARCHAR(32))\nINSERT INTO @table1 VALUES (1, 'Fred'),(2, 'Tom'),(3, 'Sally'),(4, 'Alice')\n\n-- drop and create a temporary table to hold the statements to output\nIF OBJECT_ID('TempOutputTable', 'U') IS NOT NULL\nDROP TABLE TempOutputTable \nCREATE TABLE TempOutputTable (SqlStatement VARCHAR(MAX))\n\n-- delete a couple of rows from @table1\nDELETE FROM @table1\nOUTPUT 'INSERT table1 (id, value) VALUES (' + CAST(deleted.id AS VARCHAR(10)) + ', ''' + deleted.name + ''')' AS SqlStatement \nINTO TempOutputTable\nWHERE id = 4 OR id = 2\n\n-- export using bcp\nDECLARE @SqlCommand sysname\nSELECT @SqlCommand = 'bcp \"select * from test.dbo.TempOutputTable\" queryout D:\\mytest.txt -c -T'\nEXEC xp_cmdshell @SqlCommand, NO_OUTPUT\n\n-- remove the temporary table\nDROP TABLE TempOutputTable\n",
    "label": 1
  },
  {
    "text_1": "Count number of concurrencies for each element of a list",
    "text_2": "CREATE GLOBAL TEMPORARY TABLE tmp (field NUMBER);\n\nINSERT INTO tmp (...);\n\nSELECT tmp.field, COUNT(t.field)\n  FROM table t\n RIGHT JOIN tmp ON t.field = tmp.field\n GROUP BY tmp.field;\n",
    "label": 1
  },
  {
    "text_1": "What is the best way to join between two table which have coma seperated columns",
    "text_2": "declare @Rows int = 1\ndeclare @Tag nvarchar(1024)\ndeclare @Id int = 0\n\nWHILE @Rows>0\nBEGIN\n    Select Top 1 @Tag=Tag,@Id=Id from #dt where Id>@Id\n    set @Rows =@@RowCount\n    if @Rows>0\n    begin\n        insert into #Tags(Tag)   SELECT Data FROM dbo.StringToTable(@Tag, ',')\n    end\nEND\n",
    "label": 1
  },
  {
    "text_1": "Combine strings from multiple rows and join onto another table",
    "text_2": "SELECT Id, FileName,\nSTUFF((SELECT ','+Name FROM @A a WHERE A.Id = B.Id FOR XML PATH('')), 1, 1, '') Name\nFROM @B b\n",
    "label": 1
  },
  {
    "text_1": "Create a SQL query to retrieve the most recent record by user",
    "text_2": "SELECT \n    USER_NAME, \n    max(ACTIVITY_DATE_TIME) as  ACTIVITY_DATE_TIME\nFROM \n    TRANSACTION_HISTORY \nWHERE \n    USER_NAME in ('a_user','b_user','c_user','d_user','e_user')\nGROUP BY user_name\n",
    "label": 1
  },
  {
    "text_1": "SQL add STUFF function into this query",
    "text_2": "SELECT OrderID\n, Codes\nFROM tblLines r1\nCROSS APPLY ( \n    SELECT\n        STUFF((SELECT ',' + CAST(Code AS NVARCHAR)\n        FROM tblLines r2\n        WHERE r2.OrderID = r1.OrderID\n        GROUP BY OrderID, Code\n        ORDER BY Code\n        FOR XML PATH (''), TYPE)\n        .value('.', 'varchar(max)')\n        , 1, 1, ''))  OrderLines(Codes)\nGROUP BY OrderID, OrderList\n",
    "label": 1
  },
  {
    "text_1": "SQL Server - Group by few columns and put in one row in appropriate columns",
    "text_2": "select id, ostart, oend, \n  Point1, Time1, Point2, Time2, \n  Point3, Time3, Point4, Time4, Point5, Time5\nfrom\n(\n  select id, ostart, oend, col+cast(seq as varchar(10)) col,\n    value\n  from\n  (\n    select id, [end], time, ostart, oend,\n      cast(row_number() over(partition by id, ostart \n                                order by start) as varchar(10)) seq\n    from yourtable\n  ) src\n  cross apply\n  (\n    select 'Time', convert(varchar(10), time, 120) union all\n    select 'Point', cast([end] as varchar(10))\n  ) c (col, value)\n) d\npivot\n(\n  max(value)\n  for col in (Point1, Time1, Point2, Time2, \n              Point3, Time3, Point4, Time4, Point5, Time5)\n) piv;\n",
    "label": 1
  },
  {
    "text_1": "Recursive SQL, have the last three values increased?",
    "text_2": "SELECT MIN(t1.`Value` > t2.`Value`) AS increasing\n  FROM tbl AS t1\n    JOIN tbl AS t2\n      ON t1.`DateTime` = t2.`DateTime` + INTERVAL 1 month\n  WHERE t1.`DateTime` > NOW() - INTERVAL 3 month;\n",
    "label": 1
  },
  {
    "text_1": "Update mysql big table hang too time",
    "text_2": "select im.* from images im inner join (\n  select photo_id from images order by hotel_id, idImageType, photo_id limit 20000000,10\n) k \non im.photo_id=k.photo_id \norder by im.hotel_id, im.idImageType, im.photo_id;\n",
    "label": 1
  },
  {
    "text_1": "select into issue of SQL Server",
    "text_2": "INSERT INTO [TargetDB].[dbo].[Orders]\nSELECT TOP 100 *\nFROM [SourceDB].[dbo].[Orders] S\nWHERE NOT EXISTS\n(\n SELECT 1 FROM [TargetDB].[dbo].[Orders] T1\n WHERE T1.OrderId = S.orderID\n)\n",
    "label": 1
  },
  {
    "text_1": "Is it possible to specify condition in Count()?",
    "text_2": "select count(case Position when 'Manager' then 1 else null end)\nfrom ...\n",
    "label": 1
  },
  {
    "text_1": "Populate a combobox with tables of a database in VB",
    "text_2": "using cnn = new MySqlConnection(...)\n    cnn.Open()\n    Dim dt = cnn.GetSchema(\"TABLES\")\n\n    ComboBox1.DataSource = dt\n    ComboBox1.DisplayMember = \"table_name\"\n    ComboBox1.ValueMember = \"table_name\"\nEnd Using\n",
    "label": 1
  },
  {
    "text_1": "Diffrence between these select queries",
    "text_2": "SELECT Users.Id,\n       Users.FirstName,\n       Users.LastName,\n       UserAddresses.City,\n       UserAddresses.AddressLine,\n       UserAddresses.PostalCode,\n       UserSettings.Language,\n       UserSettings.IsCookieEnabled,\n       LoginHistory.LastEnterDate\nFROM Users\nINNER JOIN UserAddresses\nON UserAddresses.UserId = Users.Id\nINNER JOIN UserSettings\nON UserSettings .UserId = Users.Id\nINNER JOIN LoginHistory\nON LoginHistory .UserId = Users.Id\n",
    "label": 1
  },
  {
    "text_1": "Queue algorithm to retrieve not shown",
    "text_2": "select top 1 Word\nfrom Words  \norder by newid()\n",
    "label": 1
  },
  {
    "text_1": "friendship database schema ideas comparison",
    "text_2": "create table Friends(\n  Friend1 int not null,\n  Friend2 int not null,\n  constraint Friends1_FK foreign key( Friend1 ) references Clients( ID ),\n  constraint Friends2_FK foreign key( Friend2 ) references Clients( ID ),\n  constraint Friends_PK primary key( Friend1, Friend2 )\n);\n",
    "label": 1
  },
  {
    "text_1": "MySQL - Join inside a correlated subquery",
    "text_2": "SELECT  INET_NTOA(MIN(INET_ATON(UserMap.VIP))) AS VIP,\n        NewUsers.User, \n        NewUsers.Domain\nFROM    NewUsers\n        CROSS JOIN UserMap\n        LEFT JOIN\n        (   SELECT  u.Domain, m.VIP\n            FROM    NewUsers u\n                    INNER JOIN UserMap m\n                        ON u.User = m.User\n        ) ex\n            ON ex.Domain = NewUsers.Domain\n            AND ex.VIP = UserMap.VIP\nWHERE   ex.Domain IS NULL\nGROUP BY NewUsers.User, NewUsers.Domain\nORDER BY VIP ASC;   \n",
    "label": 1
  },
  {
    "text_1": "Need multiple count of id in single row from a column of a table using different criteria",
    "text_2": "SELECT\nSUM(IF(status = 'Available', 1, 0)) AS `Available`,\nSUM(IF(status = 'Not Available', 1, 0)) AS `Not_Available`,\ncityName\nFROM\ntable_name\nWHERE cityName = 'Ahmeadabad'\n",
    "label": 1
  },
  {
    "text_1": "what is the statement for \"where\" condtion in pl/sql",
    "text_2": "select * from clients;\n\n        ID NAME     \n---------- ----------\n         1 Joe        \n         2 Anna       \n\nselect * from clients@site2;\n\n        ID NAME     \n---------- ----------\n         1 Joe        \n         3 Max        \n",
    "label": 1
  },
  {
    "text_1": "SQL Merging two or three tables with COUNT() and LEFT JOIN",
    "text_2": "SELECT \n    users.id,\n    users.username,\n    users.avatar_location,\n    users.datetime,\n    users.last_action,\n    users.last_action_description,\n    users.is_banned,\n    COUNT(questions.id) as number_of_questions #count each question\nFROM \n    `users` \nLEFT JOIN \n    `questions` \nON \n    users.id = questions.questioner_id\nGROUP BY\n    users.id # you need to have unique user id in each row\nORDER BY\n    questions.datetime # sort by question date right? \n    DESC \n",
    "label": 1
  },
  {
    "text_1": "add to existing value in mysql column using CONCAT function?",
    "text_2": "UPDATE ptb_messages \nSET subject = CONCAT( subject, 'newvalue')\nWHERE ... \n",
    "label": 1
  },
  {
    "text_1": "Insert into multiple tables",
    "text_2": "DECLARE @T TABLE (\n    CategorySet_Id int\n    ,AgeDivision_Id int\n    ,Gender int\n    ,BeltColor int);\n",
    "label": 1
  },
  {
    "text_1": "How do i structure a query where I am INSERTing into a new table and need to increment a column every time?",
    "text_2": "Category ID    ParentID    Sort\n2005           3637        1\n2008           3637        2\n2009           3637        3\n",
    "label": 1
  },
  {
    "text_1": "How to specify input format in SQL create table?",
    "text_2": "insert into test values ('testi'); -- this will fail\ninsert into test values ('12345'); -- this will fail\n",
    "label": 1
  },
  {
    "text_1": "poor Hibernate select performance comparing to running directly - how debug?",
    "text_2": "select * from sales_unit s left join sales_unit_relation r on (s.sales_unit_id = r.sales_unit_child_id) where r.sales_unit_child_id is null\n",
    "label": 1
  },
  {
    "text_1": "SQL Server : Sum over a field changed after adding a LEFT JOIN",
    "text_2": "SELECT \n    ISNULL(v2.pId, v1.pId) AS pId,\n    ISNULL(v2.pName, v1.pName) AS pName,\n    (SELECT COUNT(*) FROM view1 vi WHERE vi.kind = 1 AND vi.pId = ISNULL(v2.pId, v1.pId)) AS countKind1,\n    SUM(v2.price) AS sumPrice\nFROM \n    view1 v1\n    LEFT OUTER JOIN\n    view2 v2 ON v1.id = v2.id\nGROUP BY\n    ISNULL(v2.pId, v1.pId),\n    ISNULL(v2.pName, v1.pName)\n",
    "label": 1
  },
  {
    "text_1": "Write a PL/pgSQL function so that FOUND is not set when \"nothing\" is found?",
    "text_2": "IF id_exists() IS NOT NULL THEN\n   -- Do something\nEND IF;\n",
    "label": 1
  },
  {
    "text_1": "Interview : update table values using select statement",
    "text_2": "Update TableName Set Gender=Case when Gender='M' Then 'F' Else 'M' end\n",
    "label": 1
  },
  {
    "text_1": "Multiple grouping by",
    "text_2": "WITH CTE_TOP5 AS \n(\n    SELECT TOP 5  BusinessName, Date_Created, ROW_NUMBER() OVER (ORDER BY DATE_CREATED DESC) RN FROM dbo.YourTable\n    ORDER BY Date_Created DESC \n)\n, CTE_REST AS \n(\n    SELECT  BusinessName, Date_Created FROM dbo.YourTable\n    EXCEPT \n    SELECT  BusinessName, Date_Created  FROM CTE_TOP5\n)\n,CTE_RESTRANDOM AS\n(\n    SELECT  BusinessName, Date_Created, ROW_NUMBER() OVER (ORDER BY NEWID()) + 5 RN FROM CTE_REST\n)\nSELECT * FROM CTE_TOP5\nUNION ALL\nSELECT * FROM CTE_RESTRANDOM\nORDER BY RN\n",
    "label": 1
  },
  {
    "text_1": "How to conditionally adjust date on subsequent rows",
    "text_2": "LEFT JOIN T1 AS T1Next ON T1.propertyid = T1Next.propertyid \n    AND T1.isprimary = 0\n    AND T1Next.isprimary = 0\n    AND T1.PropNo = T1Next.PropNo - 1\n    AND T1Next.PropNo % 2 = 0\n",
    "label": 1
  },
  {
    "text_1": "Many to one relation, select only rows which ancestor met all criteria",
    "text_2": "with cte as (\n    select\n        qa.questionare_id as quest, qa.id as accepted,\n        sum(case when qa.accept_id is not null and qa.impact_id is not null then 1 else 0 end) over(partition by qa.questionare_id) as cnt1,\n        count(*) over(partition by qa.questionare_id) as cnt2  \n    from questionareacceptance as qa\n)\nselect quest, accepted\nfrom cte\nwhere cnt1 = cnt2;\n",
    "label": 1
  },
  {
    "text_1": "I need help with a SQL query. Fetching an entry, it's most recent revision and it's fields",
    "text_2": "Select ...\nFrom section_entry_revisions As SER\n    Join section_revision_fields As SRF\n        On SRF.section_id = SER.section_id\n            And SRF.section_revision_id = SER.section_revision_id\n    ...\nWhere SER.sectionId = @SectionId\n    And SER.section_entry_id = @SectionEntryId\n    And SER.id =    (\n                    Select Max(SER1.id)\n                    From section_entry_revisions As SER1\n                    Where SER1.section_Id = SER.section_Id\n                        And SER1.section_entry_id = SER.section_entry_id \n                    )\n",
    "label": 1
  },
  {
    "text_1": "Composite clustered PK behavior vs Nonclustered PK + nonunique clustered index",
    "text_2": "SELECT  cnt\nFROM    v_appCount\nWHERE   appId = @myAppId\n",
    "label": 1
  },
  {
    "text_1": "Order rows according to which condition is met?",
    "text_2": "ORDER BY\n  IIF( name LIKE \"I%\",     0,\n  IIF( name LIKE \"%ster%\", 1,\n  IIF( name LIKE \"%lo%\",   2,\n    3\n  ) ) ) ASC\n",
    "label": 1
  },
  {
    "text_1": "Audit logging for products data?",
    "text_2": "/* Trigger for INSERT statements on the items table */\nCREATE DEFINER=`root`@`localhost` TRIGGER trigger_items_insert_audit \nAFTER INSERT ON items \n  FOR EACH ROW BEGIN\n    INSERT INTO items_audit (\n                  item_id, item_name, item_description, \n                  item_active, modified_by, change_by,  \n                  change_date, action\n                ) VALUES (\n                  NEW.item_id, NEW.item_name, NEW.item_description,  \n                  NEW.item_active, NEW.modified_by, USER(),  \n                  NOW(), 'INSERT'\n                ); \n  END;\n\n/* Trigger for UPDATE statements on the items table */\nCREATE DEFINER=`root`@`localhost` TRIGGER trigger_items_update_audit \nAFTER UPDATE ON items \n  FOR EACH ROW BEGIN\n    INSERT INTO items_audit (\n                  item_id, item_name, item_description, \n                  item_active, modified_by, change_by,  \n                  change_date, action\n                ) VALUES (\n                  NEW.item_id, NEW.item_name, NEW.item_description,  \n                  NEW.item_active, NEW.modified_by, USER(),  \n                  NOW(), 'UPDATE'\n                ); \n  END;\n",
    "label": 1
  },
  {
    "text_1": "SQL Access 2010 Calculate Stock Daily Gap",
    "text_2": "select t.*, open_price - lastclose as gap\nfrom (select t.ticker, t.date, t.open_price, t.close_price,\n             (select t.close_price from t t2 where t2.ticker = t.ticker and t2.date < t.date order by DATE desc limit 1\n             ) as lastclose\n      from t\n     ) t\n",
    "label": 1
  },
  {
    "text_1": "SQL query performance statistics messages returned multiple times",
    "text_2": "SQL Server Execution Times:\n   CPU time = 0 ms,  elapsed time = 264 ms..\n",
    "label": 1
  },
  {
    "text_1": "Get list of what special characters and how many times in oracle column",
    "text_2": "SELECT  t.id,\n        --MAX( t.value ) AS value,\n        CAST( c.COLUMN_VALUE AS CHAR(1 CHAR) ) AS character,\n        COUNT(1) AS frequency\nFROM    table_name t,\n        TABLE(\n          CAST(\n            MULTISET(\n              SELECT SUBSTR( t.value, LEVEL, 1 )\n              FROM   DUAL\n              WHERE  REGEXP_LIKE( SUBSTR( t.value, LEVEL, 1 ), '[^a-zA-Z0-9]' )\n              CONNECT BY LEVEL <= LENGTH( t.value )\n            ) AS CHAR_LIST\n          )\n        ) c\nGROUP BY t.id, c.COLUMN_VALUE\nORDER BY id, character;\n",
    "label": 1
  },
  {
    "text_1": "Aggregate Function/Group-By Query Performance",
    "text_2": "alter table dbo.QP_HISTORY\n   add constraint pk_qphist  primary key (Symbol, dSeqKey)\n , add constraint fk1_qphist foreign key (dSeqKey)\n                             references dbo.DATE_MASTER(dSeqKey) ;\n",
    "label": 1
  },
  {
    "text_1": "How to update a pattern in a column in SQL Server",
    "text_2": "UPDATE A\n    SET Text = SUBSTRING(Text, 1, LEN(Text)-15)\n    WHERE Text LIKE '%,,,,,,,,,,,,,,,'\n",
    "label": 1
  },
  {
    "text_1": "SQLite previous select value in where clause",
    "text_2": "CREATE TEMP TABLE markers_distance (distance);\nCREATE UNIQUE INDEX markers_idx ON markers_distance (distance);\nINSERT OR IGNORE INTO markers_distance \n       SELECT distance FROM feature WHERE is_marker;\n",
    "label": 1
  },
  {
    "text_1": "MS Access / SQL Joining Large Data Sets",
    "text_2": "Select ColA, ColB, ColC, ColD, SourceA, SourceB from SUMMARY where ((SourceA <> SourceB) or (SourceA is null) or (SourceB is null))\n",
    "label": 1
  },
  {
    "text_1": "Creation of specific table for Oracle DB",
    "text_2": "    CREATE TABLE A0 (\n          a0_pk         NUMBER\n        , a0_date       DATE\n        , a0_interval   VARCHAR2(20)\n        , a0_value      NUMBER\n        , CONSTRAINT c_a0_pk        PRIMARY KEY (a0_pk)\n        , CONSTRAINT c_a0_date      CHECK ( a0_date >= TO_DATE ( '01.01.2013 00:00:00', 'DD.MM.YYYY HH24:MI:SS' ) AND a0_date < TO_DATE ( '01.01.2014 00:00:00', 'DD.MM.YYYY HH24:MI:SS' ) )\n        , CONSTRAINT c_a0_value     CHECK ( a0_value BETWEEN 0 AND 100 )\n    );\n\n\n    BEGIN\n        FOR i IN 1 .. 100 LOOP\n            INSERT\n              INTO A0\n                 ( a0_pk\n                 , a0_date\n                 , a0_value\n                 )\n            VALUES\n                 ( i\n                 , TO_DATE ( '01.01.2013 00:00:00', 'DD.MM.YYYY HH24:MI:SS' ) + 365 * DBMS_RANDOM.VALUE\n                 , TO_CHAR ( a0_date, 'YYYYMMDD' )\n                 , FLOOR ( DBMS_RANDOM.VALUE ( 0, 101 ) )\n                 )\n                 ;\n        END LOOP;\n    END;\n\n    UPDATE A0\n       SET a0_interval = TO_CHAR ( a0_date, 'YYYYMMDD' )\n         ;\n\n    COMMIT;\n\n    ALTER TABLE A0 ADD CONSTRAINT c_a0_interval  CHECK ( TO_CHAR ( a0_date, 'YYYYMMDD' ) = a0_interval );\n",
    "label": 1
  },
  {
    "text_1": "Mysql event not running after database migration",
    "text_2": "show variables like 'event_scheduler';\n",
    "label": 1
  },
  {
    "text_1": "Insert into a many-to-many table based on current row information",
    "text_2": "SELECT DISTINCT p_id\nFROM myTable\nWHERE m_id = 2;\n",
    "label": 1
  },
  {
    "text_1": "Re-number MySQL field",
    "text_2": "SET @n := 0, @l := NULL;\n\nUPDATE class c JOIN\n(\n  SELECT classid, lane, @n := IF(@l = lane, @n, @n + 1) new_lane, @l := lane\n    FROM class\n   ORDER BY classid, lane\n) t \n    ON c.classid = t.classid\n   SET c.lane = t.new_lane;\n",
    "label": 1
  },
  {
    "text_1": "Check value in every month",
    "text_2": "create view sum_data_v\nas\nselect month(dDay) as mnth, sum(data) as sum_data\nfrom [table]\ngroup by month(dDay)\n;\n",
    "label": 1
  },
  {
    "text_1": "setting a valid value for textbox",
    "text_2": "Dim upper as string = (UCase(txtMI.text))\n",
    "label": 1
  },
  {
    "text_1": "How can I find all the tables of db that contains primary key or particular column of a single table in Postgresql",
    "text_2": "SELECT table_name\nFROM information_schema.columns\nWHERE table_schema = 'public'\n  AND column_name   = 'YOUR_COLUMN_NAME'\n",
    "label": 1
  },
  {
    "text_1": "SQL Comparing Two Columns in same table and update in another table",
    "text_2": "SELECT MIN(Col1) AS Col, MAX(Col2) AS New FROM \n(\n    SELECT SUM(SeqIDStart) OVER (ORDER BY Col1 ASC) AS SeqID, * \n    FROM (\n        SELECT\n            CASE WHEN LAG(B.Col1, 0, NULL) OVER (ORDER BY a.Col1 ASC) IS NULL THEN 1 ELSE 0 END AS SeqIDStart,\n            a.col1 AS Col1, a.Col2 AS Col2, B.Col1 AS adjsCol\n        FROM\n            #t a\n        LEFT JOIN\n            #t b\n        ON a.col1 = b.col2\n        WHERE a.Col1 IS NOT NULL\n    ) a\n) b\nGROUP BY SeqID\n",
    "label": 1
  },
  {
    "text_1": "take each maximum value of a column and get information from another table",
    "text_2": "SELECT branch, id_saller, name, amount\n  FROM\n(\n  SELECT r.branch, s.id_saller, r.name, s.amount, \n         ROW_NUMBER() OVER (PARTITION BY r.branch ORDER BY s.amount DESC) rnum\n    FROM sale s JOIN saller r\n      ON s.id_saller = r.id_saller\n) q\n WHERE q.rnum = 1\n",
    "label": 1
  },
  {
    "text_1": "What is the meaning of a constant in a SELECT query?",
    "text_2": "select lastname||','||firstname, year(birthday)\nfrom person;\n",
    "label": 1
  },
  {
    "text_1": "How to add Values of multiple Select Cases",
    "text_2": "MsgBox(sum)\n",
    "label": 1
  },
  {
    "text_1": "foreign key in databases and creating a join table",
    "text_2": "customer_id | load_id\n1           | 1\n1           | 2\n",
    "label": 1
  },
  {
    "text_1": "auditing 50 columns using oracle trigger",
    "text_2": "        select id,\n            col1, lag(col1) over (partition by id order by when) as prev_col1,\n            col2, lag(col2) over (partition by id order by when) as prev_col2,\n            col3, lag(col3) over (partition by id order by when) as prev_col3,\n            action, when\n        from temp12_audit\n",
    "label": 1
  },
  {
    "text_1": "Simplify SQL query",
    "text_2": "select avg \nfrom aggregates,\n     (select t0 as period\n      union all\n      select t0+03:00  as period\n      union all\n      select t0+06:00  as period\n...\n      union all\n      select t1 as period) periods \nwhere name=tag2 \n  and ts between periods.period -03:00  and periods.period\n  and period=01:00\n",
    "label": 1
  },
  {
    "text_1": "percentage calculation from previous record",
    "text_2": "merge into user_multi_base_salary t using(    \n      select \n         user_id, salary, salary_change_date, \n         salary/(lag(salary) over (partition by user_id order by salary_change_date))*100 as percent_increase\n      from user_multi_base_salary;\n    )S\non (s.user_id = t.user_id and s.salary_change_date = t.salary_change_date)\nwhen matched then update set\nT.percent_increase = S.percent_increase\n",
    "label": 1
  },
  {
    "text_1": "Custom format example for serial number creation in mysql",
    "text_2": "CREATE TRIGGER ins_sn BEFORE INSERT ON tbl\nFOR EACH ROW\n    SET NEW.sn = CONCAT(LEFT(NEW.sn, 4), '_', RIGHT(NEW.sn,5));\n",
    "label": 1
  },
  {
    "text_1": "oracle sql field from cross reference table",
    "text_2": "SELECT LBKEY,\n       MAX( CASE OIDID WHEN 4 THEN VALUE END ) AS \"Post Code\",\n       MAX( CASE OIDID WHEN 5 THEN VALUE END ) AS \"City\"\nFROM   ACCOUNT a\n       INNER JOIN\n       CrossReference c\n       ON ( a.ACCOUNTID = c.ACCOUNTID )\nWHERE  c.OIDID IN ( 4, 5 )\nGROUP BY LBKEY\n",
    "label": 1
  },
  {
    "text_1": "MySQL Query with multiple joins",
    "text_2": "SELECT\n  Shot,\n  CASE lay WHEN 1863 THEN 'lay' ELSE 'NA' END AS 'Stage1',\n  CASE WHEN lay=1863 THEN lay_status ELSE 'NA' END AS 'Status-lay',\n  CASE blk WHEN 1863 THEN 'blk' ELSE 'NA' END AS 'Stage2',\n  CASE WHEN blk=1863 THEN blk_status ELSE 'NA' END AS 'Status-blk',\n  CASE pri WHEN 1863 THEN 'pri' ELSE 'NA' END AS 'Stage3',\n  CASE WHEN pri=1863 THEN pri_status ELSE 'NA' END AS 'Status-pri',\n  CASE ani WHEN 1863 THEN 'ani' ELSE 'NA' END AS 'Stage4',\n  CASE WHEN ani=1863 THEN ani_status ELSE 'NA' END AS 'Status-ani'\nFROM\n  my_table\nWHERE\n  lay = 1863\nOR\n  blk = 1863\nOR\n  pri = 1863\nOR\n  ani = 1863\n",
    "label": 1
  },
  {
    "text_1": "Row_num and Partition by DATE?",
    "text_2": "2143    2015-09-02  1\n2143    2015-09-15  1\n2143    2015-09-16  2\n2143    2015-09-17  3\n2144    2015-09-02  1\n2144    2015-09-03  2\n2144    2015-09-16  1\n2144    2015-09-17  2\n",
    "label": 1
  },
  {
    "text_1": "I need to create a view that unions all tables based on their prefix (new tables added monthly)",
    "text_2": "    SET ANSI_NULLS ON\n    GO\n    SET QUOTED_IDENTIFIER ON\n    GO\n    CREATE PROCEDURE spCreateUnionedView\n        @BaseTableName varchar(100)\n    AS\n    BEGIN\n        SET NOCOUNT ON;\n\n        declare @v nvarchar(max) =\n        (\n            select stuff((\n            select cast(' union all select * from ' as nvarchar(max)) + quotename(name)\n              from sys.tables\n             where name like replace(@BaseTableName, '_', '\\_') + '\\____\\_[0-9][0-9][0-9][0-9][a-Z][a-Z][a-Z]' escape '\\'\n               for xml path('a'), type\n            ).value('.','nvarchar(max)'),1,11,'')\n        );\n\n        declare @s nvarchar(max) = 'DROP VIEW ' + @BaseTableName;\n        exec (@s);\n\n        set @v = 'CREATE VIEW ' + @BaseTableName + ' AS ' + @v;\n        exec (@v);\n\n    END\n    GO\n",
    "label": 1
  },
  {
    "text_1": "How to derive years of service for employees that have termed and returned several times",
    "text_2": "select emplid,\n  round((months_between(nvl(term_1, sysdate), hire_1)\n    + case when bridge_1 = 'Yes' then months_between(hire_2, term_1) else 0 end\n    + months_between(nvl(term_2, sysdate), nvl(hire_2, sysdate))\n    + case when bridge_2 = 'Yes' then months_between(hire_3, term_2) else 0 end\n    + months_between(sysdate, nvl(hire_3, sysdate))) / 12, 2) as total_years\nfrom t42\norder by emplid;\n\n    EMPLID TOTAL_YEARS\n---------- -----------\n      1001        3.74\n      1002       12.62\n      1003        5.84\n      1004        7.90\n      1005        5.10\n      1006        6.42\n      1007        7.21\n      1008        4.29\n      1009        6.68\n      1010        6.85\n      1011        3.31\n      1012        2.21\n      5011       20.22\n",
    "label": 1
  },
  {
    "text_1": "row-level trigger vs statement-level trigger",
    "text_2": "Before the triggering statement executes\nBefore each row that the triggering statement affects\nAfter each row that the triggering statement affects\nAfter the triggering statement executes\n",
    "label": 1
  },
  {
    "text_1": "Adding data to column to activate a trigger then removing it",
    "text_2": "Update table set lname = substr(lname,1,length(lname)-1)\n where active = 1\n",
    "label": 1
  },
  {
    "text_1": "Find completely non-distinct rows",
    "text_2": "select * from \n    (SELECT cd.*,\n            ROW_NUMBER ()\n            OVER (PARTITION BY id1\n                  ORDER BY id1)\n               seq_no\n       FROM sample_table cd)\n    where seq_no=1;\n",
    "label": 1
  },
  {
    "text_1": "Aggregate function to detect trend in PostgreSQL",
    "text_2": "SELECT   user_id, regr_slope (rank1, timestamp1) AS slope\nFROM     my_table\nGROUP BY user_id\n",
    "label": 1
  },
  {
    "text_1": "Smart SQL Merge - n rows, coalesce",
    "text_2": "using System;\nusing System.Data;\nusing System.Data.SqlClient;\nusing System.Data.SqlTypes;\nusing System.IO;\nusing Microsoft.SqlServer.Server;\n\n[Serializable]\n[SqlUserDefinedAggregate(Format.UserDefined, MaxByteSize = -1, IsNullIfEmpty = true)]\npublic struct LowestRankString : IBinarySerialize\n{\n    public int currentRank;\n    public SqlString currentValue;\n\n    public void Init()\n    {\n        currentRank = int.MaxValue;\n        currentValue = SqlString.Null;\n    }\n\n    public void Accumulate(int Rank, SqlString Value)\n    {\n        if (!Value.IsNull)\n        {\n            if (Rank <= currentRank)\n            {\n                currentRank = Rank;\n                currentValue = Value;\n            }\n        }\n    }\n\n    public void Merge(LowestRankString Group)\n    {\n        Accumulate(Group.currentRank, Group.currentValue);\n    }\n\n    public SqlString Terminate()\n    {\n        return currentValue;\n    }\n\n    public void Read(BinaryReader r)\n    {\n        currentRank = r.ReadInt32();\n        bool hasValue = r.ReadBoolean();\n        if (hasValue)\n        {\n            currentValue = new SqlString(r.ReadString());\n        }\n        else\n        {\n            currentValue = SqlString.Null;\n        }\n    }\n\n    public void Write(BinaryWriter w)\n    {\n        w.Write(currentRank);\n\n        bool hasValue = !currentValue.IsNull;\n        w.Write(hasValue);\n        if (hasValue)\n        {\n            w.Write(currentValue.Value);\n        }\n    }\n}\n",
    "label": 1
  },
  {
    "text_1": "Unable to create table (errno: 150)",
    "text_2": "CREATE TABLE `admins` \n(\n     `admin_id` int(11) NOT NULL AUTO_INCREMENT,\n     `admin_user` varchar(15) NOT NULL,\n     `admin_password` varchar(15) NOT NULL,\n     `admin_fName` varchar(20) NOT NULL,\n     `admin_lName` varchar(20) NOT NULL,\n     PRIMARY KEY (`admin_id`)\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=latin1;\n\nCREATE TABLE IF NOT EXISTS posts\n(\n        post_id INT NOT NULL AUTO_INCREMENT,\n        post_title varchar(50),\n        post_content varchar(255),\n        admin_id int(11) NOT NULL,\n        PRIMARY KEY (post_id),\n        FOREIGN KEY (admin_id) REFERENCES admins(admin_id)\n) ENGINE = INNODB; \n",
    "label": 1
  },
  {
    "text_1": "In Oracle VPD / RLS, how are malicious user predicates prevented from leaking info?",
    "text_2": "SELECT * FROM orders WHERE my_malicious_function(secret_column);\n",
    "label": 1
  },
  {
    "text_1": "Postgresql function per row",
    "text_2": "select width, length, area(width, length) from rectangle;\n",
    "label": 1
  },
  {
    "text_1": "How to use DML on Oracle temporary table without generating much undo log",
    "text_2": "SSN2> r\n   1* select space, noundo, used_ublk, used_urec from v$transaction\n\nSPA NOU  USED_UBLK  USED_UREC\n--- --- ---------- ----------\nNO  NO       11123     435605\n\nSSN2> r\n   1* select space, noundo, used_ublk, used_urec from v$transaction\n\nSPA NOU  USED_UBLK  USED_UREC\n--- --- ---------- ----------\nNO  NO       13413     525452\n\nSSN2> r\n   1* select space, noundo, used_ublk, used_urec from v$transaction\n\nSPA NOU  USED_UBLK  USED_UREC\n--- --- ---------- ----------\nNO  NO       14552     570567\n\nSSN2>\n",
    "label": 1
  },
  {
    "text_1": "Need SQL that list of names of suppliers offering only computers and trucks",
    "text_2": "SELECT DISTINCT t1.SuppliarName\nFROM Tbl t1\nWHERE t1.ProductName IN('Truck', 'Computer')\nAND NOT EXISTS(\n  SELECT 1\n  FROM Tbl t2\n  WHERE t1.SuppliarName = t2.SuppliarName \n  AND t2.ProductName NOT IN('Truck', 'Computer')\n)\n",
    "label": 1
  },
  {
    "text_1": "Send key-value objects to postgres in queries",
    "text_2": "name | location\n-----+---------\nGin  | Au      \nBeer | US      \n",
    "label": 1
  },
  {
    "text_1": "In Oracle what is the fastest way to limit the characters in a string?",
    "text_2": "Procedural approach timing: +00 00:02:04.0320\nSQL approach timing: +00 00:02:49.4326\nExisting approach timing: +00 00:05:50.1607\n",
    "label": 1
  },
  {
    "text_1": "How to assign value to oracle cursor while iterating",
    "text_2": "         for EMPLOYEE_RECORD in EMPLOYEE_RECORD_CUR \n          loop\n         dbms_output.put_line(mycollection(EMPLOYEE_RECORD.employee_name).salary);\n         end loop;\n",
    "label": 1
  },
  {
    "text_1": "Adding filters to increase SQL performance",
    "text_2": " where something > 35\n",
    "label": 1
  },
  {
    "text_1": "Last record of Join table",
    "text_2": "select a.dealid\n, a.dealname\n, a.dealdetails\n, b.dcid\n, b.commenttime\n, b.commentperson\n, b.comment\nfrom deals a left outer join (select x.dcid\n, x.dealid\n, x.commenttime\n, x.commentperson\n, x.comment\nfrom dealcomments x\nwhere x.commenttime = (select max(x1.commenttime)\n                       from dealcomments x1\n                       where x1.dealid = x.dealid)) b\non (a.dealid = b.dealid)\n",
    "label": 1
  },
  {
    "text_1": "Dynamic sql query for broken hours data",
    "text_2": "   default-time-zone=ASIA/CALCUTTA\n",
    "label": 1
  },
  {
    "text_1": "using outer alias in mysql subquery",
    "text_2": "SELECT AVG (rating) AS average_rating, \n       user_id,\n       (SELECT Count(*) \n          FROM teachers_rating t1 \n         WHERE teacher_id = 3 \n           AND t1.user_id = t2.user_id) AS user_rated_frequency \n  FROM teachers_rating t2\n WHERE teacher_id = 3\n GROUP BY user_rated_frequency;\n",
    "label": 1
  },
  {
    "text_1": "Join much slower using table() function",
    "text_2": "SELECT /*+ cardinality(t, 20) */ count(*) into l_result FROM project p JOIN TABLE(in_project_ids) t ON p.project_id = t.val;\n",
    "label": 1
  },
  {
    "text_1": "Common way to compare timestamp in Oracle, PostgreSQL and SQL Server",
    "text_2": "AND creation_date < (CURRENT_TIMESTAMP - interval '5' day)\nAND creation_date >= (CURRENT_TIMESTAMP - interval '15' day)\n",
    "label": 1
  },
  {
    "text_1": "Can I access DB from django template?",
    "text_2": "def photo_view(request):\n    return render_to_response('app_name/photos.html', {\n        'photos': Photo.objects.all()\n        })\n",
    "label": 1
  },
  {
    "text_1": "What would be the most efficient way in Oracle database to update a column for each row from a join query result?",
    "text_2": "UPDATE products\nSET    customer_id = (\n    SELECT customer_id\n    FROM   customers\n    WHERE  customers.card_id = products.card_id);\n",
    "label": 1
  },
  {
    "text_1": "Group by an advanced way",
    "text_2": "SELECT * FROM messages m GROUP BY m._from HAVING (m._to!=0 AND m.group_1=0 AND m.group_2=0)\n\nSELECT * FROM messages m WHERE m.group_1=m._from OR m.group_2=m._to;\n",
    "label": 1
  },
  {
    "text_1": "How do I get the current records based on it's Effective Date?",
    "text_2": "DECLARE \n  @OrganizationID varchar(40)\n\nSET @OrganizationID = 'SMESM1HTOVEOVE'\n\nSELECT\n  ro.ResourceID,\n  ro.OrganizationID,\n  max(ro.EffectiveDate)\nFROM\n  ResourceOrganization ro\nWHERE\n  ro.OrganizationID = @OrganizationID\nGROUP BY\n  ro.ResourceID,\n  ro.OrganizationID\nHAVING\n  max(ro.EffectiveDate) = (\n    SELECT \n      max(EffectiveDate)\n    FROM \n      ResourceOrganization\n    WHERE \n      ResourceID = ro.ResourceID)\n",
    "label": 1
  },
  {
    "text_1": "Convert Text to Date",
    "text_2": "? Format(CDate(Mid(\"Mon, Oct 6, 2014\", 5)), \"yyyy/mm/dd\")\n2014/10/06\n",
    "label": 1
  },
  {
    "text_1": "VB: Formating Mysql Timestamp",
    "text_2": "Dim sql As String = \"UPDATE `Table` Set MyColumn= current_timestamp WHERE ID= @ID\"\n",
    "label": 1
  },
  {
    "text_1": "Performant aggregation where clause",
    "text_2": "with cutoffs as (\n  select id, state,\n         (select max(creationdate)\n          from users\n          where users.state_id = states.id) - '3 months'::interval as cutoff\n  from states)\nselect count(*) as numberofusers, state\nfrom users\n     join cutoffs on users.state_id = cutoffs.id\nwhere users.creationdate > cutoff\ngroup by state\n",
    "label": 1
  },
  {
    "text_1": "SQL Server - Only Select Latest Date",
    "text_2": "with location_data as (\n  select \n    lctn_id as Location,\n    invntryitm_id as InventoryItemID,\n    invntryitm_nme as InventoryItemName,\n    prchseordrlst_dte_rqstd as DateRequested,\n    prchseordrlst_unt_cst as UnitCost,\n    max (prchseordrlst_dte_rqstd) over (partition by lctn_id) as max_date\n  from\n    invntryitm\n    JOIN prchseordrlst on prchseordrlst.invntryitm_rn = invntryitm.invntryitm_rn\n    JOIN prchseordr on prchseordr.prchseordr_rn = prchseordrlst.prchseordr_rn\n    JOIN lctn on lctn.lctn_rn = prchseordr.lctn_rn\n  where\n    invntryitm.invntryitm_nme ='REFRIGERANT R-22 30#' and\n    lctn_obslte = 'N'\n)\nselect *\nfrom location_data\nwhere max_date = DateRequested\norder by Location\n",
    "label": 1
  },
  {
    "text_1": "Why does my SQL query return rows with NULL? It should never return rows with NULL",
    "text_2": "SELECT DeviceID,\n     ParentCode,\n     COALESCE(StatusCode ,0) AS StatusCodeNotNull,   \n     WhenEntered AS StatusDate\nFROM AT_Event_History as A\n",
    "label": 1
  },
  {
    "text_1": "How to get generated Id using node-jdbc?",
    "text_2": "[ { ROWID: 'AAAVTcAAEAAAADzAAK' } ]\n",
    "label": 1
  },
  {
    "text_1": "NOT EXISTS vs NOT IN",
    "text_2": "SELECT  *\nFROM    T\nWHERE   ID NOT IN (SELECT ID FROM T2);\n\nSELECT  *\nFROM    T\nWHERE   NOT EXISTS (SELECT ID FROM T2 WHERE T.ID = T2.ID);\n",
    "label": 1
  },
  {
    "text_1": "check chars in varchar",
    "text_2": "Letter\n----------\nD\nC\nA   \n",
    "label": 1
  },
  {
    "text_1": "REGEXP_REPLACE to replace list of values with list of values in single statement",
    "text_2": "0123(((abc)(de)f)ghi)45(678)\n",
    "label": 1
  },
  {
    "text_1": "Was a table created with iq unique option?",
    "text_2": "sp_iqcolumn tab\n",
    "label": 1
  },
  {
    "text_1": "Returning result even for elements in IN list that don't exist in table",
    "text_2": "ArrayDescriptor aDesc =\n  ArrayDescriptor.createDescriptor(\"SYS.ODCINUMBERLIST\", conn );\n",
    "label": 1
  },
  {
    "text_1": "Group by and display result for current month",
    "text_2": "Select Count(*)\nFrom Reading\nWhere ReaderID = READER's CODE\nAND Trunc(ReadDate,'mm') = Trunc(Sysdate,'mm')\n",
    "label": 1
  },
  {
    "text_1": "When is a SQL Server foreign key table too much?",
    "text_2": "CREATE TABLE [dbo].[StatusTypes](\n    [ID] [nvarchar](250) NOT NULL,\n    CONSTRAINT [PK_StatusTypes] PRIMARY KEY CLUSTERED ([ID] ASC)\n) ON [PRIMARY]\nGO\n\nCREATE TABLE [dbo].[Audits](\n    [ID] [int] IDENTITY(1,1) NOT NULL,\n    ...\n    [Status] [nvarchar](250) NOT NULL,\n    CONSTRAINT [PK_Audits] PRIMARY KEY CLUSTERED ([ID] ASC),\n    CONSTRAINT [FK_Audit_Status] FOREIGN KEY (Status) REFERENCES StatusTypes(ID)\n) ON [PRIMARY]\nGO\n",
    "label": 1
  },
  {
    "text_1": "Which of the two PostgreSQL indexes is more efficient?",
    "text_2": "SELECT * INTO it\nFROM Item i\nWHERE (i.RECEIVER = ? OR i.RECEIVER is NULL) AND \n      (i.SENDER = ?)\nORDER BY ARRIVAL\nLIMIT 1;\n",
    "label": 1
  },
  {
    "text_1": "Display Entire month(off's and the Active days)",
    "text_2": "SELECT\n  *\nFROM\n  Calendar\nCROSS JOIN\n  User\nLEFT JOIN\n  yourTable\n    ON  yourTable.date = Calendar.date\n    AND yourTable.user = User.id\nWHERE\n      Calendar.date >= '2014-02-01'\n  AND Calendar.date <  '2014-03-01'\n  AND User.id       IN (1, 2, 3, 4)\n",
    "label": 1
  },
  {
    "text_1": "How to get count of unique values in a column group by the primary key",
    "text_2": "select customer_id ID, \n       sum(pwr_flag) OnesCount, \n       sum(1-pwr_flag) ZerosCount \n  from temp_pwr \n group by customer_id\n",
    "label": 1
  },
  {
    "text_1": "SQL Query to get recursive count of employees under each manager",
    "text_2": "create view valid_mng as \nselect Emp_Id,Manager_id from Emp_Table\nwhere Emp_Id<>Manager_Id\n",
    "label": 1
  },
  {
    "text_1": "How to do nothing in an SQL case statement?",
    "text_2": "UPDATE mytable\nSET col1 = 10  \nWHERE col1 = 20\n",
    "label": 1
  },
  {
    "text_1": "Week numbers between two dates",
    "text_2": "SELECT 'S' || LPAD( LEVEL, 2, '0' )\nFROM   DUAL\nCONNECT BY DATE '2016-01-01' + ( LEVEL - 1 ) * 7 <= DATE '2016-02-29';\n",
    "label": 1
  },
  {
    "text_1": "Recursive SQL: aggregate function using Recursive Subquery Factoring",
    "text_2": "WITH t AS\n        (SELECT  1 id, NULL parent_id, NULL value FROM dual UNION ALL\n         SELECT 10 id,    1 parent_id, 1000 value FROM dual UNION ALL\n         SELECT 20 id,    1 parent_id, 2000 value FROM dual UNION ALL\n         SELECT 30 id,   10 parent_id, 3000 value FROM dual UNION ALL\n         SELECT 40 id,   10 parent_id, 4000 value FROM dual UNION ALL\n         SELECT 50 id,   20 parent_id, 5000 value FROM dual UNION ALL\n         SELECT 60 id,    1 parent_id, 6000 value FROM dual UNION ALL\n         SELECT 70 id,   60 parent_id, 7000 value FROM dual UNION ALL\n         SELECT 80 id,   70 parent_id, 8000 value FROM dual),\nhierarchy (id,ancestor,value) AS (\n  SELECT t.id,t.id,t.value\n    FROM t\n  UNION ALL\n  SELECT t.id,h.ancestor,t.value\n    FROM t\n      INNER JOIN hierarchy h\n        ON t.parent_id = h.id)\nSELECT h.ancestor, t.parent_id, t.value, SUM(h.value)\n  FROM hierarchy h\n    INNER JOIN t\n      ON t.id = h.ancestor\n  GROUP BY h.ancestor,t.value,t.parent_id;\n",
    "label": 1
  },
  {
    "text_1": "Find Query running more than 5 second",
    "text_2": "SQL> select sql_text from v$sqlarea where sql_id = 'ap3xdndsa05tg'\n  2  /\n\nSQL_TEXT\n--------------------------------------------------------------------------------\nselect /*+ slow_running_query */ * from big_table where col2 like '%whatever%'\n\nSQL>\n",
    "label": 1
  },
  {
    "text_1": "Mapping 3 tables relation to single entity. ORM best practices?",
    "text_2": "public class FinalPage{\n    public Page Page { get; set; }\n    public ContentVersion ContentVersion { get; set; }\n    public Content Content { get; set; }\n}\n",
    "label": 1
  },
  {
    "text_1": "Laravel 5.1 eloquent relations model- how to update foreign key column?",
    "text_2": "$user = User::create([\n    'name' => $request->input('name')\n]);\n\nPhone::create([\n    'phone' => $request->phone,\n    'user_id' => $user->id\n]);\n",
    "label": 1
  },
  {
    "text_1": "filter by Date in sql statement not working",
    "text_2": "SELECT     date_dt, ident_1, ident_2, ident_3\nFROM         p240538\nWHERE     (date_dt >= convert(DateTime, '10/19/2011', 101)\n",
    "label": 1
  },
  {
    "text_1": "Outputting column name / values as key value pairs in SQL view field",
    "text_2": "Output.\nID      Title          ParentID      KeyValPair\n1       A Parent       Null          ABooleanField: true, AnIntegerField:50\n2       A Child        1             ABooleanField: false, AnIntegerField:100\n3       AnotherParent  Null          ADateField: 10/12/2014\n",
    "label": 1
  },
  {
    "text_1": "getting distinct value with all column sqlserver",
    "text_2": "SELECT * FROM (\nSELECT *,ROW_NUMBER() OVER (PARTITION BY TAGNAME ORDER BY (SELECT 1)) AS ROWNUM FROM TBL WHERE TAGNAME) \nWHERE ROWNUM =1\n",
    "label": 1
  },
  {
    "text_1": "Get non existence arguments of SQL IN operator",
    "text_2": "CREATE TABLE Items\n(\n    item nvarchar(128) PRIMARY KEY\n)\n\nGO\n\nCREATE FUNCTION GetNonExistingItems( @Items xml )\nRETURNS TABLE\nAS RETURN\nWITH B\nAS\n(\n    SELECT c.value('.', 'nvarchar(128)') As item\n    FROM @items.nodes('items/item') T(c)\n)\nSELECT B.item\nFROM B\nWHERE\n    NOT EXISTS (\n        SELECT *\n        FROM Items I\n        WHERE B.item = i.item\n\n    )\n\nGO\n\nDECLARE @items XML = N'\n<items>\n    <item>Item1</item>\n    <item>Item2</item>\n    <item>Item5</item>\n</items>'\n\nSELECT *\nFROM GetNonExistingItems (@Items)\n",
    "label": 1
  },
  {
    "text_1": "MySQL : Automatic column update with list of value",
    "text_2": "CREATE TABLE members\n(\n  member_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, \n  member_name VARCHAR(32)\n);\nCREATE TABLE tasks\n(\n  task_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, \n  task_name VARCHAR(32)\n);\nCREATE TABLE assigned_tasks\n(\n  member_id int, \n  task_id int,\n  PRIMARY KEY (member_id, task_id),\n  FOREIGN KEY (member_id) REFERENCES members (member_id),\n  FOREIGN KEY (task_id)   REFERENCES tasks (task_id)\n);\n",
    "label": 1
  },
  {
    "text_1": "Simple Pivot Table with Month and text data Dynamic SQL",
    "text_2": "May                            June                           July                           August\n------------------------------ ------------------------------ ------------------------------ ------------------------------\nJoe Blow                       Carry over                     Carry over                     Available\nAvailable                      Christopher Freeberg           Carry over                     Carry over\nAvailable                      Ringo Starr                    Carry over                     Carry over\nAvailable                      Robert L Testcustomer          Carry over                     Carry over\n",
    "label": 1
  },
  {
    "text_1": "Not getting any results from stored procedure",
    "text_2": "create procedure [dbo].[GetsItemDetails]\n(\n    @SiteURL varchar\n)\nAS\n",
    "label": 1
  },
  {
    "text_1": "SQL regex with ¶ sign",
    "text_2": "select * from CollectionSearchIndexAttributes\nwhere ak_tags like '%\\nreis\\n%';\n",
    "label": 1
  },
  {
    "text_1": "MySQL query calculated column",
    "text_2": "SELECT a.Id, a.Name, COUNT(b.Id) AS Num\nFROM a JOIN b ON b.IdTableA = a.Id \nGROUP BY a.Id, a.Name\nORDER BY a.Name\n",
    "label": 1
  },
  {
    "text_1": "Finding if there's at least one attribute in common in a set",
    "text_2": "SELECT SUPPLY.supplier\nFROM BAG\nJOIN (SELECT bag_id, COUNT(*) as item_count FROM BAG GROUP BY bag_id WHERE bag_id = ?) bag_count\n  ON BAG.id = bag_count.bag_id\nJOIN SUPPLY\n  ON BAG.item = SUPPLY.item\nGROUP BY SUPPLY.supplier\nHAVING COUNT(SUPPLY.item) = bag_count.item_count\nWHERE BAG.bag_id = ?\n",
    "label": 1
  },
  {
    "text_1": "MySQL output all records from table but add flag if value present in another",
    "text_2": "select u.user_id, u.first_name, u.last_name,\n       (c.club_id = 2) as flag\nfrom users u left join\n     club c\n     on u.user_id = c.user_id;\n",
    "label": 1
  },
  {
    "text_1": "PostgreSQL ranking query",
    "text_2": "competition_time_id competition_user_id time_in_seconds rank\n1                   1                   10              1\n2                   2                   20              3\n3                   3                   15              2\n4                   4                   15              2\n5                   5                   10              2\n6                   6                    7              1\n",
    "label": 1
  },
  {
    "text_1": "Simplest way of running same SELECT on multiple data in MySQL",
    "text_2": "SELECT \"Before 30\" as Interval, COUNT(*) AS total\nFROM users WHERE added < \"2015-07-30\"\nUNION ALL\nSELECT \"Last 7\" as Interval, COUNT(*) AS total\nFROM users WHERE added >= \"2015-09-08\"\n",
    "label": 1
  },
  {
    "text_1": "Nhibernate join filtering",
    "text_2": "        var factory = Session.SessionFactory;\n        var session = factory.OpenSession(new SqlInterceptor());\n",
    "label": 1
  },
  {
    "text_1": "Delete from table with no related data - WHERE NOT IN and JOIN both failing",
    "text_2": "\nDELETE FROM MasterData\nWHERE ID IN (\n    SELECT MD.ID\n    FROM MasterData MD\n      JOIN RelatedA RelA on RelA.MasterDataID = MD.ID AND RelA.MasterDataID IS NULL\n      JOIN RelatedB RelB on RelB.MasterDataID = MD.ID AND RelB.MasterDataID IS NULL\n)\n",
    "label": 1
  },
  {
    "text_1": "Replacing values with wildcards (parsing text data)",
    "text_2": "SELECT regexp_replace(htmltag, '<[^>]+>', '') htmltag \nFROM yourtable\n",
    "label": 1
  },
  {
    "text_1": "Compare password with last three months passwords",
    "text_2": "DELETE FROM oldpasswords WHERE timestamp < DATE_SUB(NOW(), INTERVAL 3 MONTH);\n",
    "label": 1
  },
  {
    "text_1": "Select Data based on Sum of another columns value",
    "text_2": "select RowIndex, Id, TicketCount\nfrom (select t.*, sum(TicketCount) over (order by RowIndex) as CumTicketCount\n      from t\n     ) t\nwhere cumTicketCount <= 10;\n",
    "label": 1
  },
  {
    "text_1": "mysql grouping question",
    "text_2": "SELECT m.timestamp, m.user, m.message, m.group_id, g.grp_timestamp\n  FROM messages AS m JOIN\n       (SELECT group_id, MIN(timestamp) AS grp_timestamp\n          FROM messages\n         GROUP BY group_id) AS g ON m.group_id = g.group_id\n WHERE m.topic_id = ?\n ORDER BY g.grp_timestamp, g.group_id, m.timestamp;\n",
    "label": 1
  },
  {
    "text_1": "How can I share the same primary key across two tables?",
    "text_2": "ALTER TABLE ProductWebInfo\n    ADD CONSTRAINT fk_SKU\n    FOREIGN KEY(SKU)\nREFERENCES Product(SKU)\n",
    "label": 1
  },
  {
    "text_1": "Concatenating row values using Inner Join",
    "text_2": "DECLARE @DocHoldReasons VARCHAR(8000);\nSET @DocHoldReasons = 'DocType Hold';\n\nUPDATE dbo.EpnPackages \n    SET Error = 1,\n        Msg = (COALESCE(@DocHoldReasons + ': ', '') + \n               COALESCE(stuff((select ': ' + cv.value\n                               from EpnCountyValues cv\n                               where cv.ValueName = 'DocHoldReason' and\n                                     cv.CountyId = p.CountyId\n                               for xml path ('')\n                              ), 1, 2, ''), '')\n               )\n    WHERE p.Status = 1000 AND p.Error = 0;\n",
    "label": 1
  },
  {
    "text_1": "How Oracle processes the given SQL statement",
    "text_2": "SQL> explain plan for\n  2  select\n  3    max(salary),\n  4    country_id\n  5  from (\n  6    select\n  7      salary,\n  8      department_id,\n  9      location_id,\n 10      country_id\n 11    from\n 12      HR.EMPLOYEES\n 13    natural join\n 14      HR.DEPARTMENTS\n 15    natural join\n 16      HR.LOCATIONS\n 17  )\n 18  group by country_id;\n\nExplained.\n\nSQL>\n",
    "label": 1
  },
  {
    "text_1": "Detecting circular references in SQL",
    "text_2": "--Test 1 - OK\nPRINT '*****Test 1 - OK*****';\nSELECT * FROM X;\n\nBEGIN TRANSACTION;\n\nUPDATE  X \nSET     C = 'B1'\nWHERE   B = 'B4';\n\nSELECT * FROM X;\n\n--This transaction can be commited without problems\n--but I will cancel all modification so we can run the second test\nROLLBACK TRANSACTION;\nPRINT '*****End of test 1*****';    \nGO\n\n--Test 2 - NOT OK\nPRINT '*****Test 2 - NOT OK*****';\nSELECT * FROM X;\n\nBEGIN TRANSACTION;\n\nUPDATE  X \nSET     C = 'B1'\nWHERE   B = 'B1';\n\n--Useless in this case (test 2 & test 3)\n--Read section [If a ROLLBACK TRANSACTION is issued in a trigger] from http://msdn.microsoft.com/en-us/library/ms181299.aspx\nSELECT * FROM X;\n--Useless\nROLLBACK TRANSACTION;\n--Useless\nPRINT '*****End of test 2*****';        \nGO\n\nPRINT '*****Test 3 - NOT OK*****';\nSELECT * FROM X;\n\nBEGIN TRANSACTION;\n\nUPDATE  X \nSET     C = 'B4'\nWHERE   B = 'B1';\nGO\n",
    "label": 1
  },
  {
    "text_1": "How to call DB functions in stored procedures",
    "text_2": "WHERE (Employee.FK_EntityId IN (Select Items FROM dbo.Split(EntityHierarchy)))\n--Items is the column name of the returning table\n",
    "label": 1
  },
  {
    "text_1": "sql cast hour out of datetime without dropping leading zero on single digit hours",
    "text_2": "SELECT LEFT(CONVERT(TIME(0), GETDATE()), 2) + ':00';\n",
    "label": 1
  },
  {
    "text_1": "MySQL Database design. Inserting rows in 1to1 tables. ",
    "text_2": "Parent\n  JOIN BestChild\n    ON Parent.id = BestChild.parentid\n  JOIN Child\n    ON BestChild.childid = Child.id\n",
    "label": 1
  },
  {
    "text_1": "SQL query to select today and previous day's price",
    "text_2": "| ticker | price |                        dt | rank |\n|--------|-------|---------------------------|------|\n|   AAPL |     6 | October, 23 2015 00:00:00 |    1 |\n|   AAPL |     5 | October, 22 2015 00:00:00 |    2 |\n|   AXP  |     5 | October, 23 2015 00:00:00 |    1 |\n|   AXP  |     3 | October, 22 2015 00:00:00 |    2 |\n",
    "label": 1
  },
  {
    "text_1": "SQL Statement - How can Improve speed with indexing",
    "text_2": "CREATE NONCLUSTERED INDEX unread_emails\n  ON dbo.MemberMail(ToMemberID, MemberMailID)\n  WHERE ToReadFlag = 0\n  AND ToDeletedFlag = 0\n  AND FromDeletedFlag = 0\n  AND OnHold = 0\n  AND ToArchivedFlag = 0;\n",
    "label": 1
  },
  {
    "text_1": "XML Parsing in Stored procedure",
    "text_2": "CREATE PROCEDURE [dbo].[FetchStudentData]\n@xml XML    \nAS\nBEGIN\n      SET NOCOUNT ON;    \n\n      DECLARE @sID AS INT, @sRollNo AS INT \n\n       SELECT  @sID = xmlData.Student.value('@ID','INT'),  \n            @sRollNo = xmlData.Student.value('@RollNo','INT')\n    FROM @xml.nodes('//StudentData/Student') xmlData(Student)\n\n   SELECT @sID AS ID, @sRollNo AS RollNo\nEND\n",
    "label": 1
  },
  {
    "text_1": "WHEN NO_DATA_FOUND THEN SQL",
    "text_2": "CREATE OR REPLACE PROCEDURE ADD_STUDENT(I_STUDENTID IN NUMBER, I_STUDENTNAME AS VARCHAR2, I_BIRTHDATE AS DATE) IS\n    v_aluno ALUNO%ROWTYPE;\nBEGIN \n\n    SELECT * INTO v_aluno FROM ALUNO WHERE aid = I_STUDENTID;\n    DBMS_OUTPUT.PUT_LINE ('-------------------------'); \n    DBMS_OUTPUT.PUT_LINE ('Já existe um ID com os seguintes dados:'); \n    DBMS_OUTPUT.PUT_LINE ('Nome: '||v_aluno.nome||' | Data Nascimento: '|| v_aluno.data_nascimento); \n    DBMS_OUTPUT.PUT_LINE ('-------------------------'); \n\nEXCEPTION \n    WHEN NO_DATA_FOUND THEN \n        INSERT INTO Aluno \n           (     aid \n                , nome \n                , data_nascimento \n                ) \n        VALUES  \n           ( I_STUDENTID \n                , I_STUDENTNAME \n                , I_BIRTHDATE \n                ) ;\n    WHEN OTHERS THEN RAISE;\nEND ADD_STUDENT;\n",
    "label": 1
  },
  {
    "text_1": "How to use DML on Oracle temporary table without generating much undo log",
    "text_2": "SSN1> insert into gtt23\n  2      select * from big_table\n  3  /\n\n553928 rows created.\n\nSSN1>\n",
    "label": 1
  },
  {
    "text_1": "Querying Dataset to get Distance using Latitude/Longitude Function",
    "text_2": "SELECT u.RowID, u.Zipcode, u.Longitude, u.latitude,\n    ProgramManagement.dbo.CoordinateDistanceMiles(u.Latitude, u.Longitude, z.Lat, z.Long) dist\nFROM #unmatched2 u\n  CROSS JOIN (\n    SELECT max(Latitude) Lat, max(Longitude) Long\n    FROM ProgramManagement.dbo.zipcode_lookup\n    WHERE ZIPCode = 92101\n  ) z\n",
    "label": 1
  },
  {
    "text_1": "MySQL rowrank based on ORDER BY on 2 columns",
    "text_2": "select count(*) + 1\nfrom persons p cross join\n     (select points, voted_on from persons p where p.id = x) const\nwhere (p.points > const.points) or\n      (p.points = const.points and p.voted_on > const.voted_on)\n",
    "label": 1
  },
  {
    "text_1": "Iterating Oracle collections of objects with out exploding them",
    "text_2": "CREATE OR REPLACE FUNCTION get_item(p1 PERIOD_TABLE, idx NUMBER)\nRETURN PERIOD IS\nBEGIN\n  RETURN p1(idx);\nEND;\n",
    "label": 1
  },
  {
    "text_1": "dynamic query return zero value",
    "text_2": "SET @query = @query + 'Select * From LogTable where logID in ('+@logID+') AND userID = '+@userId + ''\n",
    "label": 1
  },
  {
    "text_1": "combined 2 different structure tables and remove duplicates",
    "text_2": "Emp_no  salary   from_date     to_date\n  22     14000  2007-01-01  2008-03-31 -- or 2008-04-01\n  22     16000  2008-04-01  2010-12-31 -- or 2011-01-01\n  22     18000  2011-01-01  9999-12-31 -- or NULL\n",
    "label": 1
  },
  {
    "text_1": "Select value in Oracle",
    "text_2": "SELECT * from MANAGEDSYSTEMGROUPS where MSYSTEMGROUPID != 12\n",
    "label": 1
  },
  {
    "text_1": "Modeling Product Variants",
    "text_2": "PRODUCTS\n========\nid  name\n--- --------\n1   Widget 1\n2   Widget 2\n3   Widget 3\n\nPRODUCT_VARIANTS\n================\nid  product_id name\n--- ---------- ------\n1   1          Size   (Widget 1)\n2   1          Color  (Widget 1)\n3   2          Size   (Widget 2)\n4   3          Class  (Widget 3)\n5   3          Size   (Widget 3)\n\nPRODUCT_VARIANT_OPTIONS\n=======================\nid  product_variant_id name\n--- ------------------ -------------\n1   1                  Small         (Widget 1; Size)\n2   1                  Large         (Widget 1; Size)\n3   2                  White         (Widget 1; Color)\n4   2                  Black         (Widget 1; Color)\n5   3                  Small         (Widget 2; Size)\n6   3                  Medium        (Widget 2; Size)\n7   4                  Amateur       (Widget 3; Class)\n8   4                  Professional  (Widget 3; Class)\n9   5                  Medium        (Widget 3; Size)\n10  5                  Large         (Widget 3; Size)\n\nSKUS\n====\nid  product_id sku    price\n--- ---------- ------ -----\n1   1          W1SSCW    10 (Widget 1)\n2   1          W1SSCB    10 (Widget 1)\n3   1          W1SLCW    12 (Widget 1)\n4   1          W1SLCB    15 (Widget 1)\n5   2          W2SS     100 (Widget 2)\n6   2          W2SM     100 (Widget 2)\n7   3          W3CASM    50 (Widget 3)\n8   3          W3CASL    50 (Widget 3)\n9   3          W3CPSM   150 (Widget 3)\n10  3          W3CPSL   160 (Widget 3)\n\nPRODUCT_VARIANT_OPTION_COMBINATIONS\n===================================\nproduct_variant_option_id sku_id\n------------------------- ------\n1                         1      (W1SSCW; Size; Small)\n3                         1      (W1SSCW; Color; White)\n1                         2      (W1SSCB; Size; Small)\n4                         2      (W1SSCB; Color; Black)\n2                         3      (W1SLCW; Size; Large)\n3                         3      (W1SLCW;  Color; White)\n2                         4      (W1SLCB; Size; Large)\n4                         4      (W1SLCB; Color; Black)\n5                         5      (W2SS; Size; Small)\n6                         6      (W2SM; Size; Medium)\n7                         7      (W3CASM; Class; Amateur)\n9                         7      (W3CASM; Size; Medium)\n7                         8      (W3CASL; Class; Amateur)\n10                        8      (W3CASL; Size; Large)\n8                         9      (W3CPSM; Class; Professional)\n9                         9      (W3CPSM; Size; Medium)\n8                         10     (W3CPSL; Class; Professional)\n10                        10     (W3CPSL; Size; Large)\n",
    "label": 1
  },
  {
    "text_1": "How to format number with \".\" as thousand separator, and \",\" as decimal separator?",
    "text_2": "SELECT FORMAT(10000000.5, 2, 'de_DE') AS format\n",
    "label": 1
  },
  {
    "text_1": "Select statement with MAX() aggregation in the Where Clause",
    "text_2": "SELECT memberID\n  FROM renewals\n  GROUP BY memberID\n    HAVING MAX(YEAR(expiryDate)) = 2010\n",
    "label": 1
  },
  {
    "text_1": "Reduce data by summing and averaging certain variables in R",
    "text_2": "library(dplyr)\n\ndf %>%\n  group_by(id, MONTH, DAY) %>%\n  summarise(VAR1 = sum(VAR1), VAR2 = mean(VAR2), first(VAR3))\n",
    "label": 1
  },
  {
    "text_1": "sql query returning multiple result using WHERE",
    "text_2": " Select (round(random() * 9 ) + 1) FROM Top_Up `\n",
    "label": 1
  },
  {
    "text_1": "shift id's of table alike (id = id + 1) where id is primary key",
    "text_2": "UPDATE TODO SET id = id - (1000000000 - 1)\n",
    "label": 1
  },
  {
    "text_1": "Coalesce two SQL queries",
    "text_2": "SELECT o.*\nFROM (SELECT o.*,\n             DENSE_RANK() OVER (PARTITION BY src\n                                ORDER BY (CASE WHEN tstart <= @instant AND tend >= @instant THEN 1\n                                               ELSE 2\n                                          END),\n                                         (CASE WHEN tstart <= @instant AND tend >= @instant THEN NULL\n                                               ELSE tend\n                                          END) DESC\n                               ) as seqnum\n      FROM obs o\n      WHERE src = @id\n     ) o\nWHERE seqnum = 1;\n",
    "label": 1
  },
  {
    "text_1": "SQL Server - Getting the opposite of a where clause",
    "text_2": "WHERE NOT (column1 LIKE 'Z%' AND column2 = '2') \n",
    "label": 1
  },
  {
    "text_1": "Using WHERE and ORDER BY together in Oracle 10g",
    "text_2": "select * from employees \nWHERE job_id != 'CLERKS'\nAND DateAppointedFielName BETWEEN StartDate AND EndDate \norder by last_name\n",
    "label": 1
  },
  {
    "text_1": "Select * and make an alias over one column",
    "text_2": "user { ALL BUT login }\n",
    "label": 1
  },
  {
    "text_1": "Get records for last 10 dates",
    "text_2": "SELECT 'bookname, \"' || string_agg(to_char(date, 'DD/MM/YYYY'), '\", \"') || '\"'\nFROM (\n   SELECT DISTINCT date\n   FROM   book\n   WHERE  sid = 1\n   ORDER  BY 1 DESC\n   LIMIT  10\n   ) sub;\n",
    "label": 1
  },
  {
    "text_1": "Simple SQL Select from 2 Tables (What is a Join?)",
    "text_2": "SELECT TABLE_USERS.ID, Username, Groupname \n  FROM TABLE_USERS \n     LEFT JOIN TABLE_GROUPS \n     ON TABLE_USERS.group = TABLE_GROUPS.id\n",
    "label": 1
  },
  {
    "text_1": "How can I do a left outer join where both tables have a where clause?",
    "text_2": "SELECT SSOU.id, API_User.is_active\nFROM\n    API_User\n    LEFT OUTER JOIN\n    (\n    SELECT id FROM Single_Sign_On_User WHERE external_id = 'test_ext_id'\n    ) SSOU  ON SSOU.API_User_id = API_User.id\nWHERE     \n    API_User.authorization_key = 'test'\n",
    "label": 1
  },
  {
    "text_1": "How do you count misspelled fields using a SQL query?",
    "text_2": "SELECT Case When ResultStatus = 'Fialed' then 'Failed' Else ResultStatus End AS ResultStatus, Count(*)\nFROM  [DB_018].[dbo].[ProjectData]\nGROUP BY Case When ResultStatus = 'Fialed' then 'Failed' Else ResultStatus End\n",
    "label": 1
  },
  {
    "text_1": "why can't I access my CTE after I used it once?",
    "text_2": "(4 row(s) affected)\n     PK          col1\n---- ----------- -----\nA    1           xyz\nA    2           xyz\nA    3           xyz\nA    4           xyz\nA    5           x\nA    6           x\n\n(6 row(s) affected)\n\n(4 row(s) affected)\n\n     PK          col1\n---- ----------- -----\nB    5           x\nB    6           x\n\n(2 row(s) affected)\n",
    "label": 1
  },
  {
    "text_1": "How to select ranges in a range of record in oracle",
    "text_2": "SQL> WITH DATA AS\n  2    (SELECT num - ROW_NUMBER() OVER(PARTITION BY status ORDER BY num) grp,\n  3      status,\n  4      num\n  5    FROM t\n  6    )\n  7  SELECT MIN(num)\n  8    ||' - '\n  9    || MAX(num) range,\n 10    COUNT(*) cnt\n 11  FROM data\n 12  WHERE status='A'\n 13  GROUP BY grp\n 14  ORDER BY grp\n 15  /\n\nRANGE         CNT\n------ ----------\n2 - 3           2\n1 - 2           2\n1 - 6           2\n9 - 10          2\n\nSQL>\n",
    "label": 1
  },
  {
    "text_1": "sqlite query in android",
    "text_2": "ProductsMetaData.A + \"=? AND \" + ProductsMetaData.B + \"=?\"\n",
    "label": 1
  },
  {
    "text_1": "Postgres/PostGIS SQL update slamming hard drive hard despite no new data created",
    "text_2": "ORDER  BY table_id\nLIMIT  10\nOFFEST 0\n",
    "label": 1
  },
  {
    "text_1": "Replacing function call with procedure execution in sql",
    "text_2": "INSERT INTO #TemP (RowNumber,ValFromUser,ColumnName\n                       ,ValFromFunc,FuncWeight,percentage)\nExec dbo.Match(@MotherFN , @constVal)\n",
    "label": 1
  },
  {
    "text_1": "Calculate sum in SQL and display it as another column?",
    "text_2": "Select CUSTOMER_NAME, TODAYS_TOTAL, AMOUNT_RECIEVED, DATE_SALE, ITEM_MODEL, QUANTITY,\n       CREDIT = (CASE WHEN AMOUNT_RECIEVED=0 AND TODAYS_TOTAL>0 AND CREDIT=0\n                      THEN TODAYS_TOTAL \n                      WHEN AMOUNT_RECIEVED>0 AND TODAYS_TOTAL>0 AND CREDIT>=0\n                      THEN (CREDIT+TODAYS_TOTAL)-AMOUNT_RECIEVED\n                      WHEN AMOUNT_RECIEVED>0 AND TODAYS_TOTAL=0 AND CREDIT>0\n                      THEN (CREDIT-AMOUNT_RECIEVED)\n                 END) \nFrom CUSTOMER_CREDIT_RECORDS\nWHERE CUSTOMER_NAME = 'Saad NED';\n",
    "label": 1
  },
  {
    "text_1": "DB2 Select with group by and sum based on another column",
    "text_2": "SELECT id\n       ,SUM(CASE WHEN type = 'CR' THEN AMT\n                 ELSE -AMT\n            END) AS BAL\n    FROM acct_table\n    GROUP BY id;\n",
    "label": 1
  },
  {
    "text_1": "how do I remove nested select statement",
    "text_2": ";WITH n AS \n(\n    SELECT\n      NameID,\n      rn = ROW_NUMBER() OVER (ORDER BY NameID)\n    FROM [Name]\n    WHERE TypeID = @TypeID\n    AND [Name] = 'Billy'\n)\nSELECT NameID\n    FROM n\n    WHERE rn > 1;\n",
    "label": 1
  },
  {
    "text_1": "Deleting specific record from nested table Oracle DB",
    "text_2": "DELETE FROM \n   (SELECT A.Name, A.City, d.Brand, d.Model, d.ID, d.Year, d.Price \n   FROM Dock A, TABLE(ML) d)\nWHERE ID = 'L201';\n",
    "label": 1
  },
  {
    "text_1": "Postgres returns SQL state: 22001 when copying data to another table",
    "text_2": "INSERT INTO wise_estado ( cvgeo_estado, nombre_estado)\nSELECT  \"CVE_ENT\", \"NOM_ENT\"\nFROM estados;\n",
    "label": 1
  },
  {
    "text_1": "cast list of strings as int list in sql query / stored procedure",
    "text_2": "ALTER PROCEDURE [dbo].[SearchResume]\n     @KeywordSearch nvarchar(500),\n     @GreaterThanDate datetime,\n     @CityIDs nvarchar(500),\n     @ProvinceIDs nvarchar(500),\n     @CountryIDs nvarchar(500),\n     @IndustryIDs nvarchar(500)\n\nAS\nBEGIN\n\nDECLARE @sql as nvarchar(4000)\n\nSET @sql = N'\n       DECLARE      @KeywordSearch nvarchar(500),\n                    @CityIDs nvarchar(500),\n                    @ProvinceIDs nvarchar(500),\n                    @CountryIDs nvarchar(500),\n                    @IndustryIDs nvarchar(500) \n\n       SET @KeywordSearch = '''+@KeywordSearch+'''\n       SET @CityIDs = '''+@CityIDs+'''\n       SET @ProvinceIDs = '''+@ProvinceIDs+'''\n       SET @CountryIDs = '''+@CountryIDs+'''\n       SET @IndustryIDs = '''+@IndustryIDs+'''\nSELECT DISTINCT\n                UserID,\n                ResumeID,\n                CASE  a.Confidential WHEN 1 THEN ''Confidential'' ELSE LastName + '','' +      FirstName END as ''Name'',\n                a.Description ''ResumeTitle'',\n                CurrentTitle,\n                ModifiedDate,\n                CurrentEmployerName,\n                PersonalDescription,\n                CareerObjectives,\n                CASE ISNULL(b.SalaryRangeID, ''0'') WHEN ''0'' THEN CAST(SalarySpecific as   nvarchar(8)) ELSE c.Description END ''Salary'',\n                e.Description ''EducationLevel'',\n                f.Description ''CareerLevel'',\n                g.Description ''JobType'',\n                h.Description ''Relocate'',\n                i.Description + ''-'' + j.Description + ''-'' + k.Description ''Location''\n            FROM dbo.Resume a JOIN dbo.Candidate b ON a.CandidateID = b.CandidateID\n            LEFT OUTER JOIN SalaryRange c ON b.SalaryRangeID = c.SalaryRangeID\n            JOIN EducationLevel e ON b.EducationLevelID = e.EducationLevelID\n            JOIN CareerLevel f ON b.CareerLevelID = f.CareerLevelID\n            JOIN JobType g ON b.JobTypeID = g.JobTypeID\n            JOIN WillingToRelocate h ON b.WillingToRelocateID = h.WillingToRelocateID\n            JOIN City i ON b.CityID = i.CityID\n            JOIN StateProvince j ON j.StateProvinceID = b.StateProvinceID\n            JOIN Country k ON k.CountryID = b.CountryID\n            WHERE ( (ModifiedDate > ''' + CAST(@GreaterThanDate as nvarchar(55)) + ''')\n\n\n                    '\nIF (LEN(@CityIDs) >0)\nBEGIN\n    SET @sql = @sql + N'AND (b.CityID IN (Select Value from fnSplitVariable(@CityIDs,'','')  ))'\nEND\nIF (LEN(@ProvinceIDs) >0)\nBEGIN\n    SET @sql = @sql + N'AND (b.StateProvinceID IN (Select Value from    fnSplitVariable(@ProvinceIDs,'','') ))'\nEND\nIF (LEN(@CountryIDs) >0)\nBEGIN\n    SET @sql = @sql + N'AND (b.CountryID IN (Select Value from fnSplitVariable(@CountryIDs,'','')    ))'\nEND\nIF (LEN(@IndustryIDs) >0)\nBEGIN\n    SET @sql = @sql + N'AND (b.IndustryPreferenceID IN (Select Value from fnSplitVariable(@IndustryIDs,'','') ))'\nEND\n\nIF (LEN(@KeywordSearch) > 0)\nBEGIN\n    SET @sql = @sql + N' AND (' + @KeywordSearch + ')'\nEND\n\nSET @sql = @sql + N') ORDER BY ModifiedDate desc'\n\n--select @sql\nexec sp_executesql @sql\n\nEND\n",
    "label": 1
  },
  {
    "text_1": "Oracle select min row from multiple results",
    "text_2": "select price, distributor\nfrom\n(\n  select d.price, \n    m.distributor_name as Distributor,\n    row_number() over(partition by mo.title order by d.price) rn\n  from distributors m\n  inner join distributed d\n    on d.distributor_id = m.distributor_id\n  inner join movies mo \n    on mo.movie_id = d.movie_id \n) src\nwhere rn = 1;\n",
    "label": 1
  },
  {
    "text_1": "Fluent Linq: Get he contents of Table1 where entry in Table2",
    "text_2": "var result = db.tblPropertyExtras.Join(db.tblExtra,\n                                       pe => pe.ExtraId,\n                                       e => e.ExtraId,\n                                       (pe, e) => new { pe, e })\n                                 .Where(x => x.pe.propertyId == 1234)\n                                 .Select(x => x.e);\n",
    "label": 1
  },
  {
    "text_1": "Conditional calculation in SELECT SQL Server",
    "text_2": "INSERT INTO Question_Data\n        (QuestionID ,\n          Attempts ,\n          Wrong)\n    SELECT  \n        R.QuestionID ,\n        1,\n        (CASE WHEN R.Response = 'F' THEN 1\n              ELSE 0\n         END) Wrong\n    FROM    \n        Responses_Table R\n    LEFT JOIN \n        Question_Data Q ON Q.QuestionID = R.QuestionID\n    WHERE   \n        Q.QuestionID IS NULL\n",
    "label": 1
  },
  {
    "text_1": "Cumulative Game Score SQL",
    "text_2": ";WITH ResultSet (PlayerID, PuzzleId, Score, TimeTaken, seq) \nAS\n(\nSELECT\n    A.[PlayerID], \n    A.PuzzleID,\n    A.[Score],\n    A.[TimeTaken],\n    seq = ROW_NUMBER() over(PARTITION BY PlayerID, PuzzleId ORDER BY Score DESC)\nFROM GameResult A\nWHERE \n    A.[puzzleID] in(1,2,3)\n)\nSELECT TOP 50\n    RSP.[PlayerID], \n    RSP.[PlayerName], \n    Score = SUM(RSA.[Score]), --total score\n    TimeTaken = SUM(RSA.[TimeTaken]) --total time taken\nFROM ResultSet RSA\nINNER JOIN Player RSP \n    ON RSA.PlayerID = RSP.PlayerID\nWHERE\n    --this is used to filter the top score for each puzzle per player\n    seq = 1\nGROUP BY\n    RSP.[PlayerID], \n    RSP.[PlayerName]\nORDER BY\n    SUM(RSA.Score) DESC,\n    SUM(RSA.TimeTaken) ASC\n",
    "label": 1
  },
  {
    "text_1": "How to detect and pick-up changes in underlying schema for sql-server tvf functions",
    "text_2": "SELECT * FROM sys.sql_modules\nWHERE definition LIKE '%TableA%' AND definition LIKE '%SELECT *%'\n",
    "label": 1
  },
  {
    "text_1": "Transform rows in columns",
    "text_2": "DECLARE @cols AS NVARCHAR(MAX);\nDECLARE @query AS NVARCHAR(MAX);\n\nselect @cols = STUFF((SELECT distinct ',' + QUOTENAME(c.name) \n                    from names c\n            FOR XML PATH(''), TYPE\n            ).value('.', 'NVARCHAR(MAX)') \n        ,1,1,'')\n\nSET @query = 'SELECT  title, enunciation, ' + @cols +\n              ' FROM (SELECT title, enunciation, total, name\n      FROM Table1) t\nPIVOT\n(\n  SUM(total) FOR name IN( ' + @cols + + ' )) p;';\n\nexecute(@query);\n",
    "label": 1
  },
  {
    "text_1": "Caching array length before a loop in PL-SQL",
    "text_2": "for j in 1..10000 loop\n   for i in 1..array.count loop\n     temp := array(i);\n   end loop;\nend loop;\n",
    "label": 1
  },
  {
    "text_1": "selecting rows with id from another table",
    "text_2": "SELECT t.id, t.name, t.slug, tr.description, tr.created_at, tr.updated_at \n  FROM terms AS t \n   INNER JOIN terms_relation AS tr \n   ON t.id = tr.term_id AND tr.taxonomy = \"categ\"\n",
    "label": 1
  },
  {
    "text_1": "SQL to search duplicates",
    "text_2": "select name from animals where name in ('Lion', 'Tiger', 'Jaguar')\n",
    "label": 1
  },
  {
    "text_1": "What are the ramifications of granting a DB User with limited access Execute permission?",
    "text_2": "Msg 229, Level 14, State 5, Line 2\nThe INSERT permission was denied on the object 'SO', database 'Scratch', schema 'dbo'.\nMsg 229, Level 14, State 5, Line 6\nThe INSERT permission was denied on the object 'SO', database 'Scratch', schema 'dbo'.\nMsg 229, Level 14, State 5, Line 9\nThe INSERT permission was denied on the object 'SO', database 'Scratch', schema 'dbo'.\nMsg 229, Level 14, State 5, Line 11\nThe SELECT permission was denied on the object 'SO', database 'Scratch', schema 'dbo'.\nMsg 229, Level 14, State 5, Line 14\nThe SELECT permission was denied on the object 'SO', database 'Scratch', schema 'dbo'.\nMsg 229, Level 14, State 5, Line 14\nThe DELETE permission was denied on the object 'SO', database 'Scratch', schema 'dbo'.\nMsg 229, Level 14, State 5, Line 17\nThe SELECT permission was denied on the object 'SO', database 'Scratch', schema 'dbo'.\nMsg 229, Level 14, State 5, Line 17\nThe UPDATE permission was denied on the object 'SO', database 'Scratch', schema 'dbo'.\nMsg 229, Level 14, State 5, Line 21\nThe SELECT permission was denied on the object 'SO', database 'Scratch', schema 'dbo'.\nMsg 1088, Level 16, State 7, Line 24\nCannot find the object \"SO\" because it does not exist or you do not have permissions.\nMsg 229, Level 14, State 5, Line 1\nThe SELECT permission was denied on the object 'SO', database 'Scratch', schema 'dbo'.\nMsg 3701, Level 14, State 20, Line 2\nCannot drop the table 'SO', because it does not exist or you do not have permission.\n",
    "label": 1
  },
  {
    "text_1": "Calculate the distance between following records in SQL",
    "text_2": "select x.id, x.value,\n       (select x2.value\n        from x x2\n        where x2.id > x.id\n        order by x2.id\n        limit 1\n       ) - x.value as DistanceToNextRecord\nfrom x x;\n",
    "label": 1
  },
  {
    "text_1": "IDENT_CURRENT equivalent for current session",
    "text_2": "----\n4\n",
    "label": 1
  },
  {
    "text_1": "Oracle SQL: Select a Max and Min Value from a Group",
    "text_2": "CREATE TABLE table_name ( product, value, ship_period_descr, arrival_period_begin, arrival_period_end, ship_period_begin, ship_period_end ) AS\nSELECT 'Apples', 600, 'X', NULL, NULL, DATE '2016-02-01', DATE '2016-03-15' FROM DUAL UNION ALL\nSELECT 'Apples', 700, 'X', NULL, NULL, DATE '2016-03-01', DATE '2016-04-16' FROM DUAL UNION ALL\nSELECT 'Lemons', 200, 'X', NULL, NULL, DATE '2016-01-15', DATE '2016-01-31' FROM DUAL UNION ALL\nSELECT 'Lemons', 150, 'X', NULL, NULL, DATE '2016-02-01', DATE '2016-02-15' FROM DUAL UNION ALL\nSELECT 'Lemons', 200, NULL, DATE '2016-02-15', DATE '2016-02-28', NULL, NULL FROM DUAL UNION ALL\nSELECT 'Lemons', 250, NULL, DATE '2016-03-01', DATE '2016-03-15', NULL, NULL FROM DUAL;\n",
    "label": 1
  },
  {
    "text_1": "Forward dependencies @startdate @enddate=@startdate + 1 Week",
    "text_2": "@startdate = '12-01-2015'\nthen\n@enddate = @startdate + 7;   -- Implicit cast add 7 days\n",
    "label": 1
  },
  {
    "text_1": "SQL 2 Summations giving out incorrect results",
    "text_2": "SELECT\n  (SELECT SUM(Details.price * Details.quantity) FROM Details WHERE Details.fk_invoice_id = Invoice.id) AS total_amount,\n  (SELECT SUM(Payment.amount_paid) FROM Payment WHERE Payment.fk_invoice_id = Invoice.id) AS paid_amount\nFROM Invoice \nWHERE id = 1;\n",
    "label": 1
  },
  {
    "text_1": "SAS Adding Minutes to a Timestamp Stored in a Macro Variable",
    "text_2": "proc format ;\n  picture mssqldt low-high = '''%Y-%0m-%0d %0H:%0M:%0S.000''' (datatype = datetime) ;\nrun ;\n",
    "label": 1
  },
  {
    "text_1": "Only joining rows where the date is less than the max date in another field",
    "text_2": "select s.*\nfrom sales s\nwhere s.sales_date < (select max(promo_date)\n                      from promotions p\n                      where p.emp_id = s.emp_id\n                     );\n",
    "label": 1
  },
  {
    "text_1": "MySQL get linked results from the same table",
    "text_2": "CREATE PROCEDURE populate_cust_closure()\nBEGIN\n  DECLARE distance int;\n  TRUNCATE TABLE cust_closure;\n  SET distance = 0;\n  -- seed closure with self-pairs (distance 0)\n  INSERT INTO cust_closure (customer_id, linked_id, distance)\n    SELECT customer_id, customer_id, distance\n      FROM cust_links GROUP BY customer_id;\n\n  -- for each pair (root, leaf) in the closure,\n  -- add (root, leaf->child) from the base table\n  REPEAT\n    SET distance = distance + 1;\n    INSERT INTO cust_closure (customer_id, linked_id, distance)\n      SELECT cust_closure.customer_id, cust_links.linked_id, distance\n        FROM cust_closure, cust_links\n          WHERE cust_closure.linked_id = cust_links.customer_id\n          AND cust_closure.distance = distance - 1;\n  UNTIL ROW_COUNT()=0\n  END REPEAT;\nEND // \n",
    "label": 1
  },
  {
    "text_1": "Remove only zero after decimal sql server 2012",
    "text_2": "DECLARE @val decimal(5,1)\nSET @val =  7870.0\n\nSelect  \nCase \n   When right(@val,1)<> '0' then\n        cast(@val as varchar) \n   else \n        cast(cast(@val as int) as varchar)\nEnd\n",
    "label": 1
  },
  {
    "text_1": "Get previous two months date based on a parameter value",
    "text_2": "declare @TwoMonthsBack datetime \n\nselect @TwoMonthsBack= dateadd(dd,-1, DateAdd(MM,-2,DateAdd(dd,1,@YourInputDateParam)))\n",
    "label": 1
  },
  {
    "text_1": "Recursive select in SQL",
    "text_2": "Id          Name                 ParentId\n----------- -------------------- -----------\n1           TestName1            NULL\n2           TestName2            1\n5           TestName5            1\n3           TestName3            2\n",
    "label": 1
  },
  {
    "text_1": "What is the inverse of SYS_EXTRACT_UTC() in Oracle?",
    "text_2": "FROM_TZ(cast(stored_utc_date as TIMESTAMP), 'UTC') AT TIME ZONE to_char(systimestamp, 'TZR')\n",
    "label": 1
  },
  {
    "text_1": "Should I split this table into two?",
    "text_2": "Id   MajorId     CourseId      MustHave\n",
    "label": 1
  },
  {
    "text_1": "SQL equivalent of Java code",
    "text_2": "select (1441736325 * power(2, 32)) + bitand(2549626543, power(2, 32) - 1)\nfrom dual;\n",
    "label": 1
  },
  {
    "text_1": "MS Access Inner Join On 3 Tables with the same field_name",
    "text_2": "SELECT  *\nFROM    Table1\n        INNER JOIN Table2\n            ON Table1.Master_Number = Table2.Master_Number;\n",
    "label": 1
  },
  {
    "text_1": "Simultaneous result from single parameter SQL Server stored procedure",
    "text_2": "        SELECT      @startdate AS CDate, \n                    @setpoint - 1 as Case2, \n                    0 as OLNo\n",
    "label": 1
  },
  {
    "text_1": "Display Columns when count from another column is greater than 1 without using joins",
    "text_2": "select *\n  from Vehicle v\n where exists (select i.ivin\n                 from Invoice i\n                where i.ivin = v.vvin\n                group by i.ivin\n               having count(*) >= 2)\n",
    "label": 1
  },
  {
    "text_1": "sqlite intersecting fulltext result with the normal index",
    "text_2": "> SELECT 42 INTERSECT SELECT 42;\n42\n> SELECT 42 INTERSECT SELECT '42';\n",
    "label": 1
  },
  {
    "text_1": "How do I make case-insensitive queries on Mongodb?",
    "text_2": "db.collection.find({\"name_lower\": thename.toLowerCase()})\n",
    "label": 1
  },
  {
    "text_1": "MySQL RAND() strange behaviour",
    "text_2": "SELECT * FROM(\n     SELECT (@rank:=@rank+1) AS num, ...\n     FROM (SELECT @rand := RAND(), @rank := 0) r\n     CROSS JOIN ...\n     WHERE ....) as raw\nWHERE raw.num = FLOOR(1 + @rand * @rank) LIMIT 1\n",
    "label": 1
  },
  {
    "text_1": "Performance considerations for temporary data in Oracle",
    "text_2": "select name, value\nfrom v$sysstat\nwhere name in ('db block gets from cache', 'consistent gets from cache', \n'physical reads cache');\n",
    "label": 1
  },
  {
    "text_1": "Count statement one to many relationship with where",
    "text_2": "WHERE bookcategories.categoryid IN (3, 4)\n",
    "label": 1
  },
  {
    "text_1": "SQL Server 2005 Bitwise Which Day is next?",
    "text_2": "-----15 = Saturday and Sunday Only  \n1111111 = Every Day  \n11113-- = Every Weekday  \n2-2-3-- = Monday, Wednesday, Friday  \n",
    "label": 1
  },
  {
    "text_1": "Recursively aggregate SQL columns",
    "text_2": "DECLARE @Company TABLE(C_ID INT,NAME VARCHAR(10))\nINSERT INTO @Company VALUES\n(1,'Abc')\n\nDECLARE @FINANCIAL TABLE\n(ID INT,COMPANY_ID INT,INCOME1 INT,INCOME2 INT,COST1 INT,COST2 INT)\nINSERT INTO @FINANCIAL VALUES\n(1,1,200,NULL,NULL,NULL),\n(2,1,NULL,50 ,NULL,NULL),\n(3,1,NULL,NULL,  5,NULL),\n(4,1,NULL,NULL,  3,NULL),\n(5,1,NULL,NULL,NULL,40)\n",
    "label": 1
  },
  {
    "text_1": "Slow MySQL query is filling up my disk space",
    "text_2": "insert into Table2(ID,CODE,cnt)\nselect a.ID, a.CODE,\n       (select count(*) from Table1 t1 where a.ID = t1.ID and a.CODE=t1.CODE) as cnt\nfrom temp_ids_codes a\ngroup by a.ID, a.CODE;\n",
    "label": 1
  },
  {
    "text_1": "Display the Value of the Median from a Dynamical table",
    "text_2": "SELECT AVG(tt.Sales) AS Median \nFROM (\n    SELECT TOP 1 t1.* FROM \n    (SELECT TOP 50 PERCENT FROM @T ORDER BY Sales) t1\n    ORDER BY t1.Sales DESC\n    UNION\n    SELECT TOP 1 t2.* FROM \n    (SELECT TOP 50 PERCENT FROM @T ORDER BY Sales  DESC) t2\n    ORDER BY t2.Sales\n) tt\n",
    "label": 1
  },
  {
    "text_1": "How does the HEXTORAW() function work? What is the algorithm?",
    "text_2": " binary    hexadecimal\n 0000      0\n 0001      1\n 0010      2\n 0011      3\n 0100      4\n 0101      5\n 0110      6\n 0111      7\n 1000      8\n 1001      9\n 1010      a  \n 1011      b\n 1100      c  \n 1101      d  \n 1110      e  \n 1111      f  \n",
    "label": 1
  },
  {
    "text_1": "How can I get a result in SQL that shows summary?",
    "text_2": "SELECT *\nFROM\n(\n  SELECT *, ROW_NUMBER()OVER(PARTITION BY Face\n                             ORDER BY Shap) RN\n  FROM tablename\n) AS p\nPIVOT\n(\n  COUNT(RN)\n  FOR SHAP IN(oblq,   rond,   sqre)\n) AS p;\n",
    "label": 1
  },
  {
    "text_1": "Combining Case Statements in a View",
    "text_2": "CASE WHEN (is_member('Buyer') = 1 OR is_member('CustomerService') = 1) THEN \n    0 \nELSE \n    CASE WHEN [ordertype] = '2' THEN \n      [CommissionAmt1] * - 1 \n    ELSE \n      [CommissionAmt1] \n    END\n END\n",
    "label": 1
  },
  {
    "text_1": "In MySQL how to rewrite a query using a case statement?",
    "text_2": "select buckets.bucket, coalesce(`count`, 0) as `count`\nfrom (select 'Bucket A' as bucket union all\n      select 'Bucket B' union all\n      select 'Bucket C'\n     ) buckets left outer join\n     (select (case when amount in (0, 1) then 'Bucket A'\n                   when amount in (2, 3,4, 5) then 'Bucket B'\n                   when amount in (6, 7, 8, 9) then 'Bucket C'\n              end) as bucket, count(*) as `count`\n      from tbl\n      where amount in (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\n      group by (case when amount in (0, 1) then 'Bucket A'\n                     when amount in (2,3,4,5) then 'Bucket B'\n                     when amount in (6,7,8,9) then 'Bucket C'\n                 end)\n     ) g\n     on buckets.bucket = g.bucket;\n",
    "label": 1
  },
  {
    "text_1": "mysql db records visibility (design and select help)",
    "text_2": "select id_project, prj_code from projects where global_project='Y'\nUNION\nselect projects.id_project, projects.prj_code \nfrom projects join project_regions on projects.id_project = project_regions.id_project \njoin prjusers on prjusers.id_region = project_regions.id_region\nwhere prjusers.id_prjuser = {$_SESSION['id_prjuser']}\nUNION\nselect projects.id_project, projects.prj_code \nfrom projects join proj_users on projects.id_project = proj_users.id_project\nwhere proj_users.id_prjuser = {$_SESSION['id_prjuser']}\n",
    "label": 1
  },
  {
    "text_1": "CakePHP: Multiple Model in Controller Action:add",
    "text_2": "$hasOne = ['Gallery' => ['foreignKey' => 'project_id']];\n",
    "label": 1
  },
  {
    "text_1": "SQL statement to select all rows from previous day",
    "text_2": "SELECT dateadd(day,datediff(day,0,GETDATE()),0)\n",
    "label": 1
  },
  {
    "text_1": "Django: \"Soft\" ForeignField without database integrity checks",
    "text_2": "from django.db.models.deletion import DO_NOTHING\nfrom django.db.models.fields.related import ForeignKey, ManyToOneRel\n\nclass SoftForeignKey(ForeignKey):\n    \"\"\"\n    This field behaves like a normal django ForeignKey only without hard database constraints.\n    \"\"\"\n    def __init__(self, to, to_field=None, rel_class=ManyToOneRel, **kwargs):\n        ForeignKey.__init__(self, to, to_field=to_field, rel_class=rel_class, **kwargs)\n        self.on_delete = DO_NOTHING\n\n    no_db_constraints = True\n",
    "label": 1
  },
  {
    "text_1": "How to replace null values with a text during display in sql",
    "text_2": " select last_name\n     , nvl(commision_pct, 'No Commission')\nfrom employees;\n",
    "label": 1
  },
  {
    "text_1": "'insert into' with array",
    "text_2": "CREATE function dbo.values2table\n(\n@values varchar(max),\n@separator varchar(3),\n@limit int -- set to -1 for no limit\n) returns @res table (id int identity, [value] varchar(max))\nas\nbegin\ndeclare @value varchar(50)\ndeclare @commapos int, @lastpos int\nset @commapos = 0\nselect @lastpos = @commapos, @commapos = charindex(@separator, @values, @lastpos+1)\nwhile @commapos > @lastpos and @limit <> 0\nbegin\n    select @value = substring(@values, @lastpos+1, @commapos-@lastpos-1)\n    if @value <> '' begin\n        insert into @res select ltrim(rtrim(@value))\n        set @limit = @limit-1\n    end\n    select @lastpos = @commapos, @commapos = charindex(@separator, @values, @lastpos+1)\nend\nselect @value = substring(@values, @lastpos+1, len(@values))\nif @value <> '' insert into @res select ltrim(rtrim(@value))\nreturn\nend\nGO\n",
    "label": 1
  },
  {
    "text_1": "Analytic function ROW_NUMBER() VS ROWNUMBER - Oracle Paging",
    "text_2": "select * \nfrom\n(\n  select rownum rnum, a.*\n  from (\n         select owner, object_name, object_id\n         from large_t\n         order by object_id\n       ) a\n  where rownum   <= 30      \n) where rnum > 20;\n",
    "label": 1
  },
  {
    "text_1": "How to create a column B that dynamically calculates SHA1 of column A when column A got inserted?",
    "text_2": "delimiter //\ncreate trigger texthash\nbefore insert on mytext\nfor each row\nbegin\n   set new.txt_hash = sha1(lower(new.text));\nend;\n//\ndelimiter ;\n",
    "label": 1
  },
  {
    "text_1": "Converting column values (rows) to columns and aggregate count on two rows of two different tables",
    "text_2": "DECLARE @query NVARCHAR(MAX)\nSET @query = '-- This outer query forms your pivoted result\n             SELECT PName,'+@NullToZeroCols+' FROM \n             (\n                -- Source data for pivoting\n                SELECT P.PName,Status1,\n                COUNT(Status1)OVER(PARTITION BY PNAME,Status1)CNT\n                FROM #PROGRAM P\n                JOIN #Student S ON P.PCODE=S.SCODE\n             ) x\n             PIVOT \n             (\n                 --Defines the values in each dynamic columns\n                 MIN(CNT)\n                 -- Get the names from the @cols variable to show as column\n                 FOR Status1 IN (' + @cols + ')\n            ) p            \n            ORDER BY PName;' \n\nEXEC SP_EXECUTESQL @query\n",
    "label": 1
  },
  {
    "text_1": "PostgreSQL - Query a table that stores value changes and present output in a periodic format",
    "text_2": "SELECT DISTINCT x.timestamp, last_value(x.value) OVER (PARTITION BY x.timestamp)\nFROM (SELECT TO_CHAR(date_trunc('hour', timestamp) + INTERVAL '1 hour', 'HH24:MI') AS timestamp, value \n      FROM tbl_test) as x\nORDER BY x.timestamp;\n",
    "label": 1
  },
  {
    "text_1": "SQL query to flag rows based on result of second query",
    "text_2": "OR (t1.start = t2.start AND t1.end = t2.end)\n",
    "label": 1
  },
  {
    "text_1": "Search an Oracle database for tables with specific column names?",
    "text_2": "select owner, table_name\nfrom all_tab_columns\nwhere column_name in ('ID', 'FNAME', 'LNAME', 'ADDRESS')\ngroup by owner, table_name\nhaving count(*) = 4;\n",
    "label": 1
  },
  {
    "text_1": "sql server 2008 r2 update max(recent) date in a table",
    "text_2": ";with T as(\n    select *, ROW_NUMBER() over (order by StartTime desc) RNum from Order_Status where OrderID=12\n)\nupdate top(1) T set endTime=@startTime\n",
    "label": 1
  },
  {
    "text_1": "For each string, execute a function/procedure",
    "text_2": "SQL> set serveroutput on\nSQL>\nSQL> declare\n  2      my_array sys.dbms_debug_vc2coll\n  3          := sys.dbms_debug_vc2coll('The', 'Quick', 'brown', 'fox');\n  4  begin\n  5     for r in my_array.first..my_array.last\n  6      loop\n  7          dbms_output.put_line( my_array(r) );\n  8     end loop;\n  9  end;\n 10  /\nThe\nQuick\nbrown\nfox\n\nPL/SQL procedure successfully completed.\n\nSQL>\n",
    "label": 1
  },
  {
    "text_1": "Improving OFFSET performance in PostgreSQL",
    "text_2": "explain select * from sales \n  where sales_pos(day) >= 5 and sales_pos(day) < 5+10;\n\n                                    QUERY PLAN                                \n    --------------------------------------------------------------------------\n     Index Scan using sales_by_pos on sales  (cost=0.50..8.77 rows=1 width=8)\n       Index Cond: ((sales_pos(day) >= 5) AND (sales_pos(day) < 15))\n",
    "label": 1
  },
  {
    "text_1": "How to write a trigger in PostgreSQL to compare a field to a field in another table",
    "text_2": "CREATE RULE transactions_insert AS \n  ON INSERT TO transactions\n    DO UPDATE money \n          SET current_balance = current_balance + new.transaction_amount\n       WHERE currency_id = new.currency_id;\n",
    "label": 1
  },
  {
    "text_1": "How can I cross tab this table",
    "text_2": "select *\nfrom\n(\n  select [Month], value, col\n  from\n  (\n    select DateName(month,[Month]) +'-'+Cast(datepart(year, [month]) as varchar(4)) Month,\n      [Affec], [KPI], [Total], [KPI_%], [Out], [rep_in_10], [ftm]\n    from yourtable\n  ) src\n  unpivot\n  (\n    value\n    for col in ([Affec], [KPI], [Total], [KPI_%], [Out], [rep_in_10], [ftm])\n  ) unpiv\n) src\npivot\n(\n  max(value)\n  for month in ([January-2011], [February-2011], [March-2011],\n             [April-2011], [January-2012], [February-2012], [March-2012])\n) piv\n",
    "label": 1
  },
  {
    "text_1": "sql sub-queries",
    "text_2": "SELECT name, region, population\nFROM bbc\nWHERE region IN (\n    SELECT region\n    FROM bbc\n    GROUP BY region\n    HAVING SUM(CASE WHEN population >= 25000000 THEN 1 ELSE 0 END) = 0\n)\n",
    "label": 1
  },
  {
    "text_1": "Delete duplicate records using rownum in sql",
    "text_2": "Expected Result :\n\n        ROWNUM         ID NAME\n    ---------- ---------- ----------\n             4          1 leo_1\n             5          2 leo_2\n             6          3 leo_3\n",
    "label": 1
  },
  {
    "text_1": "How to find percentage in SQL from list of zeros and ones?",
    "text_2": "select gender, avg(achieved) from ... group by gender\n",
    "label": 1
  },
  {
    "text_1": "store arabic in SQL database",
    "text_2": "col1                           col2                           col3\n------------------------------ ------------------------------ ------------------------------\n?? ????? ???????               لا أتكلم العربية               لا أتكلم العربية\n",
    "label": 1
  },
  {
    "text_1": "Writing SQL query: slightly complicated",
    "text_2": "select t.[Order]\nfrom Table1 as t\ngroup by t.[Order]\nhaving\n    sum(case when [Status] in ('A', 'C') then 1 else 0 end) = count(*)\n",
    "label": 1
  },
  {
    "text_1": "MS Access 2003 - Auto fill form-field based on previous form field.",
    "text_2": "Private Sub useridcombo_AfterUpdate()\n\n[Forms]![yourform]![Usernamecombo].Value = DFirst(\"username\", \"qry_username\")\n[Forms]![yourform]![Firstnamecombo].Value = DFirst(\"Firstname\", \"qry_username\")\n[Forms]![yourform]![Lastnamecombo].Value = DFirst(\"Lastname\", \"qry_username\")\nForms(\"yourform\").[Usernamecombo].Requery 'this last line is optional\n\nEnd sub\n",
    "label": 1
  },
  {
    "text_1": "DATEDIFF in HH:MM:SS format",
    "text_2": ";WITH x AS (SELECT id, StartDateTime, EndDateTime, \n  d = DATEDIFF(SECOND, StartDateTime, EndDateTime),\n  a = AVG(DATEDIFF(SECOND, StartDateTime, EndDateTime)) OVER()\n  FROM @d\n)\nSELECT id, StartDateTime, EndDateTime,\n  [delta_HH:MM:SS] = CASE WHEN d >= 3600 THEN \n    CONVERT(VARCHAR(5), d/60/60) + ':' ELSE '' END\n  + RIGHT('0' + CONVERT(VARCHAR(2), d/60%60), 2)\n  + ':' + RIGHT('0' + CONVERT(VARCHAR(2), d % 60), 2),\n  [avg_HH:MM:SS] = CASE WHEN a >= 3600 THEN \n    CONVERT(VARCHAR(5), a/60/60) + ':' ELSE '' END\n  + RIGHT('0' + CONVERT(VARCHAR(2), a/60%60), 2)\n  + ':' + RIGHT('0' + CONVERT(VARCHAR(2), a % 60), 2)\nFROM x;\n",
    "label": 1
  },
  {
    "text_1": "sql select statement to display distinct combination of two columns",
    "text_2": "SELECT DISTINCT\n    CASE WHEN sender_id > reciever_id THEN reciever_id ELSE sender_id END,\n    CASE WHEN sender_id <= reciever_id THEN reciever_id ELSE sender_id END\nFROM\n    MyTable;\n",
    "label": 1
  },
  {
    "text_1": "SELECT COUNT(*) with an ORDER BY",
    "text_2": "select count(*) from USER\n",
    "label": 1
  },
  {
    "text_1": "Get average interval between pairs of rows in a table",
    "text_2": "select\n    subscription_id,\n    coalesce(t2.date, current_timestamp) - t1.date as subscription_length\nfrom\n    (\n        select *\n        from t\n        where txn_type = 'subscr_signup'\n    ) t1\n    left join\n    (\n        select *\n        from t\n        where txn_type = 'subscr_eot'\n    ) t2 using (subscription_id)\norder by t1.subscription_id\n",
    "label": 1
  },
  {
    "text_1": "st_within as a condition of insert",
    "text_2": "SELECT *\nFROM public.data \nWHERE the_geom NOT IN (\n    SELECT d.the_geom \n    FROM public.data d, public.exclusion_zone e\n    WHERE ST_Within (d.the_geom, e.the_geom)\n);\n",
    "label": 1
  },
  {
    "text_1": "Retrieve a result using two column, or only one of them if the other is null",
    "text_2": "with art as (select artNum, artType from ARTICLE where id = :id)\nselect * from REQUIREDENGINEERS r\nwhere   (artNum, artType) in (select artNum, artType from art)   or \nnot exists (select null from REQUIREDENGINEERS where  (artNum, artType) \n                 in (select artNum, artType from art)) and\nartType in (select   artType from art) and  reqEngineer = \n     (select max(reqEngineer) from REQUIREDENGINEERS where artType = r.artType);\n",
    "label": 1
  },
  {
    "text_1": "Good algorithm for searching DB for a given string",
    "text_2": "mysql> SELECT * FROM articles WHERE MATCH (title,body)\n     AGAINST ('comparison database' IN BOOLEAN MODE);\n\n+----+---------------------+------------------------------------------+\n| id | title               | body                                     |\n+----+---------------------+------------------------------------------+\n|  1 | PostgreSQL Tutorial | DBMS stands for DataBase ...             |\n|  5 | MySQL vs. YourSQL   | In the following database comparison ... |\n+----+---------------------+------------------------------------------+\n",
    "label": 1
  },
  {
    "text_1": "Using an alias defined in `FROM` part, instead of a column result sub‑query: is it possible?",
    "text_2": "╔════╦═══╗\n║ a  ║ b ║\n╠════╬═══╣\n║ 1  ║ 0 ║\n║ 2  ║ 1 ║\n║ 3  ║ 1 ║\n║ 4  ║ 0 ║\n╚════╩═══╝\n",
    "label": 1
  },
  {
    "text_1": "How to generate data in MySQL?",
    "text_2": "create table `my_table` (\n    `id` int (11),\n    `created_at` date \n); \ninsert into `my_table` (`id`, `created_at`) values('1','2000-01-01');\ninsert into `my_table` (`id`, `created_at`) values('2','2000-01-01');\ninsert into `my_table` (`id`, `created_at`) values('3','2000-01-01');\ninsert into `my_table` (`id`, `created_at`) values('4','2001-01-01');\ninsert into `my_table` (`id`, `created_at`) values('5','2100-06-06');\n",
    "label": 1
  },
  {
    "text_1": "mysql number of people assigned to a task",
    "text_2": "select tasks.task_id, tasks.title, count(distinct tasks_people.people_id) \nas p_counter\nfrom tasks left join tasks_people\non tasks.task_id = tasks_people.task_id\ngroup by tasks.task_id\n",
    "label": 1
  },
  {
    "text_1": "select to get null value rows for concatination",
    "text_2": "with table_1 as (select 'aaa' pk_1, 'bbb' pk_2, 'ccc' pk_3, 'ddd' pk_4, 9 pk_5, 1 col_1, 2 col_2, 3 col_3 from dual union all\n                 select 'aaa' pk_1, 'bbb' pk_2, 'ccc' pk_3, 'ddd' pk_4, 10 pk_5, 4 col_1, 5 col_2, 6 col_3 from dual union all\n                 select 'aaa' pk_1, 'bbb' pk_2, 'ccc' pk_3, 'ddd' pk_4, 11 pk_5, 7 col_1, 8 col_2, 9 col_3 from dual),\n                 -- end of mimicking your table table_1; you wouldn't need this subquery as you already have the table.\n       dummy as (select level id\n                 from   dual\n                 connect by level <= 5),\n          t1 as (select pk_1,\n                        pk_2,\n                        pk_3,\n                        pk_4,\n                        row_number() over (partition by pk_1, pk_2, pk_3, pk_4 order by pk_5) pk_5,\n                        col_1,\n                        col_2,\n                        col_3\n                 from   table_1)\nselect   pk_1,\n         pk_2,\n         pk_3,\n         pk_4,\n         listagg (nvl(col_1, 0)||nvl(col_2, 0)||nvl(col_3, 0), ' ') within group (order by pk_1, pk_2, pk_3, pk_4, pk_5) aggregate\nfrom   dummy d\n       left outer join t1 partition by (t1.pk_1, t1.pk_2, t1.pk_3, t1.pk_4) on (t1.pk_5 = d.id)\ngroup by pk_1,\n         pk_2,\n         pk_3,\n         pk_4;\n\nPK_1 PK_2 PK_3 PK_4 AGGREGATE           \n---- ---- ---- ---- --------------------\naaa  bbb  ccc  ddd  123 456 789 000 000 \n",
    "label": 1
  },
  {
    "text_1": "Insert into multiple tables",
    "text_2": "INSERT INTO CategorySet_Category (CategorySet_Id, Category_Id)\nSELECT\n    TT.CategorySet_Id\n    ,Category.Id AS Category_Id\nFROM\n    @T AS TT\n    INNER JOIN Category ON\n        Category.AgeDivision_Id = TT.AgeDivision_Id AND\n        Category.Gender = TT.Gender AND\n        Category.BeltColor = TT.BeltColor\n;\n",
    "label": 1
  },
  {
    "text_1": "Insert common data from one database into another?",
    "text_2": "WITH CTE_X AS \n(\n    SELECT  xt.object_id, xs.NAME + '.' + xt.NAME AS tblName, COUNT(*) AS colsNo FROM x.sys.tables xt\n    INNER JOIN x.sys.columns xc ON xc.object_id = xt.object_id\n    INNER JOIN x.sys.schemas xs ON xt.schema_id = xs.schema_id\n    GROUP BY xt.object_id, xt.NAME, xs.NAME\n)\n,CTE_Y AS \n(\n    SELECT  yt.object_id, ys.NAME + '.' + yt.NAME AS tblName, COUNT(*) AS colsNo FROM y.sys.tables yt\n    INNER JOIN y.sys.columns yc ON yc.object_id = yt.object_id\n    INNER JOIN y.sys.schemas ys ON yt.schema_id = ys.schema_id \n    GROUP BY yt.object_id, yt.NAME, ys.NAME\n)\n,CTE_XY AS \n(\n    SELECT xt.object_id, xt.tblName, COUNT(*) colsNO FROM CTE_X xt\n    INNER JOIN x.sys.columns xc ON xc.object_id = xt.object_id\n    INNER JOIN CTE_Y yt ON xt.tblName = yt.tblName AND xt.colsNo = yt.colsNo \n    INNER JOIN y.sys.columns yc ON yc.object_id = yt.object_id AND xc.name = yc.name AND xc.user_type_id = yc.user_type_id AND xc.precision = yc.precision AND xc.scale = yc.scale\n    GROUP BY xt.object_id, xt.tblName \n)\n,CTE_Tables AS\n(\n    SELECT xy.object_id, xy.tblName\n    FROM CTE_XY xy\n    INNER JOIN CTE_X x ON xy.colsNO = x.colsNo AND xy.tblName = x.tblName \n)\n,CTE_Columns AS \n(\n    SELECT c.object_id, c.name, c.is_identity FROM CTE_Tables t\n    INNER JOIN y.sys.columns c ON t.object_id = c.object_id\n)\n,CTE_ColConc AS \n(\n    SELECT  OBJECT_ID, \n            STUFF((SELECT ', ' +  name \n                   FROM   CTE_Columns c2 \n                   WHERE  c2.OBJECT_ID = c1.OBJECT_ID \n                   FOR XML PATH('')), 1, 2, '')  Cols,\n            MAX(CAST(c1.is_identity AS INT)) AS hasIdentity\n    FROM   CTE_Columns c1 \n    GROUP  BY c1.object_id\n)\nSELECT \n      CASE WHEN hasIdentity = 1 THEN 'SET IDENTITY_INSERT Y.' + tblName + ' ON; ' ELSE '' END \n    + 'INSERT INTO Y.' + tblName + ' (' + Cols + ') SELECT '+ Cols + ' FROM X.'  + tblName + ';' \n    + CASE WHEN hasIdentity = 1 THEN 'SET IDENTITY_INSERT Y.' + tblName + ' OFF;' ELSE '' END\nFROM CTE_Tables t \nINNER JOIN CTE_ColConc c ON c.OBJECT_ID = t.object_id\n",
    "label": 1
  },
  {
    "text_1": "Oracle Trigger If statement condition not being met somehow?",
    "text_2": "IF (ShipAddress IS NULL) then \n  RAISE_APPLICATION_ERROR(-20103, 'Shipping Address is empty');\nEND IF;\n",
    "label": 1
  },
  {
    "text_1": "MySQL - Order query and display one random row at the top",
    "text_2": "select t.*\nfrom (select t.*, (@rn := @rn + 1) as seqnum\n      from tickets t cross join\n           (select @rn := 0) params\n      order by vip desc, rand()\n     ) t\norder by (seqnum = 1) desc, price asc;\n",
    "label": 1
  },
  {
    "text_1": "Insert with Select using predefined data for columns?",
    "text_2": "insert into B(height, ID, DisplayOrder)\n    select A.Height, 1, 0\n    from A;\n",
    "label": 1
  },
  {
    "text_1": "Find all matches in a varchar2()",
    "text_2": "SELECT MAX(REGEXP_COUNT(MyVal, '\\[[[:alpha:]][[:digit:]]{1,2}\\]'))\n  FROM Regex_Test\n\nMAX(REGEXP_COUNT(My...\n----------------------\n                     6\n",
    "label": 1
  },
  {
    "text_1": "MySQL: optimizing a JOIN query",
    "text_2": "1, 'PRIMARY', '<derived2>', 'ALL', '', '', '', '', 8192, 100.00, 'Using where'\n5, 'DEPENDENT SUBQUERY', 'be', 'ref', 'PRIMARY,ux_small_b_2_1', 'PRIMARY', '4', 'const', 1, 100.00, 'Using index'\n5, 'DEPENDENT SUBQUERY', 'ae', 'eq_ref', 'PRIMARY,ix_big_1_2', 'PRIMARY', '12', 'a.id_a,test.be.id1,test.be.id2', 1, 100.00, 'Using index'\n4, 'DEPENDENT SUBQUERY', 'b2', 'ref', 'ux_small_b_2_1', 'ux_small_b_2_1', '8', 'const,func', 1, 100.00, 'Using index'\n3, 'DEPENDENT SUBQUERY', 'b1', 'ref', 'PRIMARY', 'PRIMARY', '8', 'const,func', 1, 100.00, 'Using index'\n2, 'DERIVED', 'ad', 'range', '', 'PRIMARY', '4', '', 10, 100.00, 'Using index for group-by'\n",
    "label": 1
  },
  {
    "text_1": "Can a foreign key refer to the primary key of its own table?",
    "text_2": "CREATE TABLE laya2 (\n    id INT NOT NULL PRIMARY KEY,\n    f_name VARCHAR(20),\n    l_name VARCHAR(20),\n    supv_id INT,\n    INDEX supv_id_idx (supv_id),\n    FOREIGN KEY (supv_id)\n        REFERENCES laya2(id) \n        ON DELETE SET NULL      -- example for an action\n) ENGINE=INNODB;\n",
    "label": 1
  },
  {
    "text_1": "Query to return sum of two columns",
    "text_2": "SELECT (case when at_salesbill.id is NULL then 'total' else '' end),\n       sum(at_salesbill.`billedTotal`+at_salesbill.`billedTotalTax`) as grantTotal,\n       at_salesbill.`billedTotal` AS at_salesbill_billedTotal,\n       at_salesbill.`billedTotalTax` AS billedTotalTax,\nfrom at_salesbill\nwhere at_salesbill.`billGuid` = 44\ngroup by at_salesbill.id with rollup;\n",
    "label": 1
  },
  {
    "text_1": "Filter rows according to a string match, when i am unsure of specific column",
    "text_2": "SHOW COLUMNS FROM yourtable;\n",
    "label": 1
  },
  {
    "text_1": "How to copy columns data to another table with common column data exist on the both tables?",
    "text_2": "UPDATE table2 a join\n       table1 b\n       on a.ID = b.ID\n    SET a.col1 = b.col1,\n        a.col2 = b.col2,\n        a.col3 = a.col3 + b.col1,\n        a.col4 = a.col4 + b.col2;\n",
    "label": 1
  },
  {
    "text_1": "SQL select from 2 tables where 2 condition",
    "text_2": "SELECT * \nFROM Table1 \nWHERE column2 = 1 \nunion all\nSELECT * \nFROM Table2 \nWHERE column22= 1;\n",
    "label": 1
  },
  {
    "text_1": "Yii Many To Many To Many?",
    "text_2": "self::MANY_MANY, 'Url', 'category_url(category_id, url_id)'\n",
    "label": 1
  },
  {
    "text_1": "Elegant way to SELECT a column based upon a variable / query result?",
    "text_2": "SET @sql = \n    'SELECT ' + dbo.udf_GetColName('Val1', ColumnFromThisTable, etc) +\n        ' AS myCol FROM tbl_ThisTable WHERE ... '\n",
    "label": 1
  },
  {
    "text_1": "Group By and HAVING along with Distinct",
    "text_2": "select a.item \nfrom ItemDetails as a \nwhere a.item not in (\n   select b.item \n   from ItemDetails as b \n   group by b.Item, b.VendorId\n   having count(*) = 1\n)\n",
    "label": 1
  },
  {
    "text_1": "How to display field from database into Shipping Transaction Form",
    "text_2": "declare\n    cursor c_lot is\n      select supplier_lot_number\n        from mtl_lot_number\n        where lot = :your_block.lot;\nbegin\n    open c_lot;\n    fetch c_lot into :your_block.supplier_lot_number;\n    close c_lot;\nend;\n",
    "label": 1
  },
  {
    "text_1": "SQL Server: How do I return all columns where one is not repeated?",
    "text_2": "select distinct on(id)\n    *\nfrom tbl\norder by id\n   , someColumnHere -- Choose ASC for first row, DESC for last row\n",
    "label": 1
  },
  {
    "text_1": "how do i search an address form a group of columns from a table (zip,state,country)?",
    "text_2": "WHERE MATCH (zip,state,country) AGAINST ('address_part_one')\n   OR MATCH (zip,state,country) AGAINST ('address_part_two')\n...\n",
    "label": 1
  },
  {
    "text_1": "Select all where date in Last month sql",
    "text_2": "select * from table \nwhere date >=dateadd(m, datediff(m, 0, current_timestamp)-1, 0) \nand date < dateadd(m, datediff(m, 0, current_timestamp)-1, 0)\n",
    "label": 1
  },
  {
    "text_1": "Group Row By Sum of Specific Column equal to Specific Value",
    "text_2": "With Receipt As ( --< Sample source table\n    Select * From (Values\n        ('R1', 100),\n        ('R2', 100),\n        ('R3',  70),\n        ('R4',  50),\n        ('R5', 200)\n    ) V (ReceiptNo, Amount)\n), ReceiptWithTotal As ( --< Source table with Running Totals calculated\n    Select *,\n        SUM(Amount) Over (Order By ReceiptNo Rows Unbounded Preceding) - Amount As RunningTotalBefore,\n        SUM(Amount) Over (Order By ReceiptNo Rows Unbounded Preceding) As RunningTotalAfter\n    From Receipt\n), Due As ( --< Helper table to define intervals (can be generated dynamically to cover any Total)\n    Select * From (Values\n        ('D1',   0, 100),\n        ('D2', 100, 200),\n        ('D3', 200, 300),\n        ('D4', 300, 400),\n        ('D5', 400, 500),\n        ('D6', 500, 600)\n    ) V (DueNo, AmountLow, AmountHigh)\n)\nSelect DueNo, ReceiptNo,\n    IIF(AmountHigh < RunningTotalAfter, AmountHigh, RunningTotalAfter) -\n    IIF(AmountLow > RunningTotalBefore, AmountLow, RunningTotalBefore) As Amount\nFrom Due\nInner Join ReceiptWithTotal On NOT (RunningTotalAfter <= AmountLow OR RunningTotalBefore >= AmountHigh)\n",
    "label": 1
  },
  {
    "text_1": "SQL Server data display",
    "text_2": "SELECT CONVERT(VARCHAR(30),dateField, 112) + \n       REPLACE(CONVERT(VARCHAR(30),dateField, 108), ':', '')\nFROM TableName\n",
    "label": 1
  },
  {
    "text_1": "Saving the result of a SQL query into a local SQL variable",
    "text_2": "EXEC SP_EXECUTESQL @MySelect\n",
    "label": 1
  },
  {
    "text_1": "SQL WHERE (conditions) AND (condition1 OR condition2) doesn't work",
    "text_2": "Select * FROM table1 \nWHERE table1.user = $user \nAND (condition1 <> 1 OR condition2 <> 1 \n    OR condition1 IS NULL OR condition2 IS NULL)\n",
    "label": 1
  },
  {
    "text_1": "How to use cascade? mine is not working",
    "text_2": "SHOW CREATE TABLE c1\n",
    "label": 1
  },
  {
    "text_1": "Any way to achieve fulltext-like search on InnoDB",
    "text_2": "create table users (...) engine=innodb;\n\ncreate table forums (...) engine=innodb;\n\ncreate table threads\n(\nforum_id smallint unsigned not null,\nthread_id int unsigned not null default 0,\nuser_id int unsigned not null,\nsubject varchar(255) not null, -- gonna want to search this... !!\ncreated_date datetime not null,\nnext_reply_id int unsigned not null default 0,\nview_count int unsigned not null default 0,\nprimary key (forum_id, thread_id) -- composite clustered PK index\n)\nengine=innodb;\n",
    "label": 1
  },
  {
    "text_1": "get amount between range",
    "text_2": "select meters1.date as date1, meters2.date as date2, meters1.meter as start,\n  meters2.meter as end, (meters2.meter - meters1.meter) as amount\n  from meters meters1, meters meters2 having date1 < date2 order by date1;\n",
    "label": 1
  },
  {
    "text_1": "Get all rows with a matching field in a different row in the same table",
    "text_2": "select * from your_table\nwhere userID in\n(\n   select userID\n   from your_table\n   where website in ('website.com', 'foo.com')\n   group by userID\n   having count(distinct website) = 2\n)\n",
    "label": 1
  },
  {
    "text_1": "DBMS - Cleaning dataset",
    "text_2": "sed -i 's/\\\\\\t//g' titles.csv\n",
    "label": 1
  },
  {
    "text_1": "Can you use oracle table spaces like variable",
    "text_2": "create synonym not_my_emp for user_b.emp\n/\n",
    "label": 1
  },
  {
    "text_1": "Oracle Select Where Date Between Today",
    "text_2": "Select * From Customer_Rooms CuRo\n   Where CuRo.Date_Enter >= trunc(sysdate);\n",
    "label": 1
  },
  {
    "text_1": "How to select values from two tables that are not contained in the map table?",
    "text_2": "SELECT  *\nFROM    (\n        SELECT  c.*, p.id AS Unowned,\n                ROW_NUMBER() OVER (PARTITION BY p.id ORDER BY c.id) AS rn\n        FROM    Customers c\n        CROSS JOIN\n                Products p\n        LEFT JOIN \n                CustomerProducts cp\n        ON      cp.customer = c.id\n                AND cp.product = p.id\n        WHERE   cp.customer IS NULL\n    ) cpo\nWHERE   rn = 1\n",
    "label": 1
  },
  {
    "text_1": "How to concatenate the \"overflow\" of fields with character limits",
    "text_2": "/* Setup data - second example stolen from Abe, first just showing that it works with short enough data */\ndeclare @t table (ID int not null,Address1 varchar(100) not null,Address2 varchar(100) not null,Address3 varchar(100) not null)\ninsert into @t (ID,Address1,Address2,Address3)\nvalues (1,'abc','def','ghi'),\n(2,'abcdefghijklmnopqrstuvwxyz123456789 ', 'second part', 'third part')\n\n/* Actual query - shift address pieces through the address fields, but only to later ones */\n;with Shift1 as (\n    select\n        ID,SUBSTRING(Address1,1,30) as Address1,SUBSTRING(Address1,31,70) as Address1Over,Address2,Address3\n    from @t\n), Shift2 as (\n    select\n        ID,Address1,SUBSTRING(Address1Over+Address2,1,30) as Address2,SUBSTRING(Address1Over+Address2,31,70) as Address2Over,Address3\n    from Shift1\n), Shift3 as (\n    select\n        ID,Address1,Address2,SUBSTRING(Address2Over+Address3,1,30) as Address3\n    from Shift2\n)\nselect * from Shift3\n",
    "label": 1
  },
  {
    "text_1": "MYSQL NOT IN query using DISTINCT()",
    "text_2": "SELECT DISTINCT p.modelnum\n  FROM PREDS p\n WHERE NOT EXISTS (SELECT NULL\n                     FROM STATS s\n                    WHERE s.modelnum = p.modelnum)\n",
    "label": 1
  },
  {
    "text_1": "Compiler Cost of searching wild char '%%' in like clause",
    "text_2": "Invoke first with name parameter (Scan count 1, logical reads 7)\nEXEC sp_executesql N'\nSELECT  myTable.*\nFROM myTable\nWHERE \nIsDELETED = 0  \nAND STRNAME LIKE CASE WHEN (RTRIM(LTRIM(@STRNAME))) <> '''' THEN \n''%''+ @STRNAME + ''%'' ELSE ''%%'' END \nAND STRCODE LIKE CASE WHEN (RTRIM(LTRIM(@STRCODE)) <> '''') THEN \n''%'' + @STRCODE + ''%''  ELSE ''%%'' END \n', \nN'@STRNAME NVARCHAR(100),\n@STRCODE NVARCHAR(100)\n', @STRNAME = '(rpc)', @STRCODE=''\n",
    "label": 1
  },
  {
    "text_1": "Oracle update statement - how do you link to related tables?",
    "text_2": "UPDATE (SELECT t.col1, o.col2 FROM MyTable t JOIN OtherTable o ON t.otherID = o.ID)\n  SET col1 = col2\n",
    "label": 1
  },
  {
    "text_1": "Complex SQL query suggestions please",
    "text_2": "SELECT months.Month, COUNT(DISTINCT device_id), factors.factor\nFROM\n  (\n    -- Get the last six months\n    SELECT (MONTH(NOW()) + aInt + 11) % 12 + 1 \"Month\" FROM\n      (SELECT 0 AS aInt UNION SELECT -1 UNION SELECT -2 UNION SELECT -3 UNION SELECT -4 UNION SELECT -5) LastSix\n  ) months\n  JOIN\n  ( \n    -- Get all known factors\n    SELECT DISTINCT factor FROM `usage` \n  ) factors\n  LEFT OUTER JOIN\n  (\n    -- Get factors for each device... \n    SELECT \n           MONTH(start_time) \"Month\", \n           device_id,\n           factor\n      FROM app_host_usage a\n      WHERE userid=13 \n        AND start_time IN (\n          -- ...where the corresponding usage row is connected\n          --    to an app row with the highest start time of the\n          --    month for that device.\n          SELECT MAX(start_time)\n            FROM app_host_usage a2\n            WHERE a2.device_id = a.device_id\n            GROUP BY MONTH(start_time)\n        )\n     GROUP BY MONTH(start_time), device_id, factor\n\n  ) usageids ON usageids.Month = months.Month \n            AND usageids.factor = factors.factor\nGROUP BY factors.factor, months.Month\nORDER BY factors.factor, months.Month\n",
    "label": 1
  },
  {
    "text_1": "MS Access 2003 - Auto fill form-field based on previous form field.",
    "text_2": "SELECT [User].username FROM User WHERE ((([User].userid) Like '*' & [Forms]![Yourform]![useridcombo] & '*'));\n",
    "label": 1
  },
  {
    "text_1": "Rebuild Informatica persistent cache only when data is updated in the table",
    "text_2": " select * \n from run_history\n where process_name='EMP_DIM'\n\n+--------------+----------------------+\n| PROCESS_NAME |    LAST_READ_TIME    |\n+--------------+----------------------+\n| EMP_DIM      | 15-MAY-2016 12:00:07 |\n+--------------+----------------------+\n",
    "label": 1
  },
  {
    "text_1": "check which names have the same field in a database",
    "text_2": "Names               Time\nRichard,Luigi       8:00\n. . .\n",
    "label": 1
  },
  {
    "text_1": "SQL Server Query for Many to Many Relationship",
    "text_2": "WITH Data AS\n(   SELECT  W.DateTimeID,\n            S.SensorName,\n            S.SensorType,\n            W.Channel,\n            W.PeakNr,\n            W.Wavelength,\n            W.tblWaveLengthID\n    from    tblWavelengths as W\n            LEFT JOIN tblSensorWavelengths as SW \n                ON W.tblWavelengthID = SW.WavelengthID\n            LEFT JOIN tblSensors as S \n                ON SW.SensorID = S.SensorID\n\n)\nSELECT  d.DateTimeID, d.SensorName, d.SensorType, d.Channel, d.PeakNr, d.WaveLength\nFROM    Data d\n        INNER JOIN\n        (   SELECT  DateTimeID, SensorName\n            FROM    Data\n            GROUP BY DateTimeID, SensorName\n            HAVING  COUNT(DISTINCT tblWaveLengthID) = 2\n        ) t\n            ON t.DateTimeID = d.DateTimeID\n            AND t.SensorName = d.SensorName\nORDER BY d.DateTimeID;\n",
    "label": 1
  },
  {
    "text_1": "One-to-many relation database design",
    "text_2": "Students [ id | name | etc..]\nCourses  [ id | name | etc.. ]\nStudents in Courses [ id | student_id | course_id ]\n",
    "label": 1
  },
  {
    "text_1": "МуSQL Get a list of dates in month, year",
    "text_2": "CREATE TABLE `date_table` (\n  `ID` bigint(20) NOT NULL AUTO_INCREMENT,\n  `date` date NOT NULL,\n  PRIMARY KEY (`ID`)\n) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=latin1;\n",
    "label": 1
  },
  {
    "text_1": "Is Oracle's EXTRACT function breaking the NOENTITYESCAPING in the XMLELEMENT?",
    "text_2": "RES                \n--------------------\n1->                  \n2->                  \n3->                  \n4->                  \n5->    \n",
    "label": 1
  },
  {
    "text_1": "How to generate a range of dates in SQL Server",
    "text_2": ";WITH natural AS \n(\n  SELECT ROW_NUMBER() OVER (ORDER BY [object_id]) - 1 AS val \n  FROM sys.all_objects\n) \nSELECT t.Member, d = DATEADD(DAY, natural.val, t.RegistrationDate) \n  FROM @t AS t INNER JOIN natural \n  ON natural.val <= DATEDIFF(DAY, t.RegistrationDate, t.CheckoutDate);\n",
    "label": 1
  },
  {
    "text_1": "Employee that has a higher salary than the AVERAGE of his department - optimized",
    "text_2": "SELECT TOP 1 WITH TIES *\nFROM   employee\nORDER  BY CASE\n            WHEN employee_salary >= AVG(employee_salary)\n                                     OVER (\n                                       PARTITION BY Department_ID) THEN 0\n            ELSE 1\n          END \n",
    "label": 1
  },
  {
    "text_1": "SQL : If condition in where clause",
    "text_2": "select b.* from tableB b, tableA A\nWhere b.id = a.id\n",
    "label": 1
  },
  {
    "text_1": "Layer-Design: where to check permissions for database reads/updates?",
    "text_2": "case class UserId(id: Int)\ndef findCalById(id: Int)(implicit user: UserId): Future[Try[Option[Calendar]]] = ???\n",
    "label": 1
  },
  {
    "text_1": "SQL Server 2012 AFTER INSERT trigger that replaces null value with current date",
    "text_2": "UPDATE Products\nSET DateAdded = GETDATE()\nWHERE DateAdded IS NULL OR\n      DateAdded IN (SELECT DateAdded FROM inserted);\n",
    "label": 1
  },
  {
    "text_1": "MySQL Percentage of 2 columns not working =NULL",
    "text_2": "SUM('Y2') / SUM('Y1')* 100 AS Diff\n",
    "label": 1
  },
  {
    "text_1": "SQL: Joining two tables with email adresses in SQL Server",
    "text_2": "SELECT\n    ContactPerson.PersonID, \n    Customer.CustomerID, \n    COALESCE(ContactPerson.FirstName, Customer.FirstName) AS FirstName,\n    COALESCE(ContactPerson.LastName, Customer.LastName) AS LastName,\n    COALESCE(ContactPerson.Email, Customer.Email) AS Email,\n    Customer.ZipCode\nFROM Customer\nLEFT JOIN ContactPerson\n    ON ContactPerson.CustomerID = Customer.CustomerID\nWHERE COALESCE(ContactPerson.Email, Customer.Email) IS NOT NULL\n",
    "label": 1
  },
  {
    "text_1": "MySQL Query ORDER BY with modulus",
    "text_2": "SELECT ID, NAME, ID %2, ID %3  FROM TBL_USER ORDER BY ID % 2, ID % 3\n",
    "label": 1
  },
  {
    "text_1": "Str_to_date in Load File leads to NULL value",
    "text_2": "%m        Month, numeric (00..12)\n%d        Day of the month, numeric (00..31)\n",
    "label": 1
  },
  {
    "text_1": "How to extract nested XMLType Data from Oracle Database?",
    "text_2": "SQL> select type_code,\nextract(trx_data, '/TRNXS_DTL/TRNX_ITEM[@sequence=\"1\"]/text()').getStringVal() as \"DETAILS\",\nextract(trx_data, '/TRNXS_DTL/TRNX_ITEM[@sequence=\"2\"]/text()').getStringVal() as \"DETAILS2\"\nfrom myt;\n\n TYPE_CODE DETAILS                  DETAILS2\n---------- ------------------------ --------------\n       101\n       102 NNN                      OOO\n\n\nSQL> select type_code,\nextract(trx_data, '/TRNXS_DTL/TRNX_ITEM[@sequence=\"1\"]/@value').getStringVal() as \"DETAILS\",\nextract(trx_data, '/TRNXS_DTL/TRNX_ITEM[@sequence=\"2\"]/@value').getStringVal() as \"DETAILS2\"\nfrom myt;\n\n TYPE_CODE DETAILS                  DETAILS2\n---------- ------------------------ ------------------------------------------\n       101 2009                     Data Not Found for given record id.\n       102 2010                     Data Found for given record id.\n",
    "label": 1
  },
  {
    "text_1": "adding month to EndDate as constraint in Oracle SQL",
    "text_2": "INSERT INTO\n      PROJECT\nVALUES\n      ( 1,\n        'asb',\n        2,\n        SYSDATE,\n        SYSDATE\n        + 60 );\n--ORA-02290: check constraint (PROJECT_ENDDATE) violated\n\nINSERT INTO\n      PROJECT\nVALUES\n      ( 1,\n        'asb',\n        2,\n        SYSDATE,\n        SYSDATE\n        + 62 );\n--ORA-02290: check constraint (PROJECT_ENDDATE) violated\n\nINSERT INTO\n      PROJECT\nVALUES\n      ( 1,\n        'asb',\n        2,\n        SYSDATE,\n        SYSDATE\n        + 61 );  \n-- 1 row inserted\n",
    "label": 1
  },
  {
    "text_1": "4:**Count/sum rows in multiple related tables",
    "text_2": "nvl(a_agg.SUM_AMOUNT, 0),\nnvl(b_agg.SUM_AMOUNT, 0),\n",
    "label": 1
  },
  {
    "text_1": "Count occurrences of row couples",
    "text_2": "SELECT  y.EventPersonName\nFROM (\n    SELECT  x.EventPersonName, \n            EventWithSign = CASE WHEN x.EventName = 'start' THEN +1 WHEN x.EventName = 'end' THEN -1 ELSE 1/0 END\n    FROM    @Events x\n) y\nGROUP BY y.EventPersonName\nHAVING  SUM(y.EventWithSign) = 0\n",
    "label": 1
  },
  {
    "text_1": "SQL statement to determine rating of a row/record based on comparison performed among columns?",
    "text_2": "video_clip_name rating\n--------------- ------\nvideo a         good\nvideo b         so_so\nvideo c         bad\nvideo d         bad\nvideo e         so_so\nvideo f         good\nvideo g         bad\n",
    "label": 1
  },
  {
    "text_1": "Problem with count in SQL query",
    "text_2": "SELECT DISTINCT \n       a.AssignedEmp, \n       COUNT( a.TipoStatus ) AS 'Service Request Count'\n  FROM Service AS a\n  JOIN employee AS b ON a.AssignedEmp = b.UserName\n WHERE b.Classification_ClassificationID = 2 \n   AND (a.TipoStatus = 'Open'\n    OR  a.TipoStatus = 'Pending'\n    OR  a.TipoStatus = 'Hold'\n    OR  a.TipoStatus = 'Warranty')\n GROUP BY a.AssignedEmp\n LIMIT 0, 30\n",
    "label": 1
  },
  {
    "text_1": "Creating Oracle Wallet from existing PKCS#12 keystore",
    "text_2": "SQLPlus: EXEC DBMS_NETWORK_ACL_ADMIN.ASSIGN_WALLET_ACL('[acl_file.xml]','file:/path/to/wallet');\n",
    "label": 1
  },
  {
    "text_1": "MySQL - count how many rows in next 5 seconds for each record",
    "text_2": "select  p1.ApplyID\n,       p1.ApplyDate,\n,       count(*)\nfrom    tb p1\njoin    tb p2\non      p2.ApplyDate between p1.ApplyDate and p1.ApplyDate + interval 5 second\ngroup by\n        p1.ApplyID\n,       p1.ApplyDate\norder by\n        p1.ApplyDate\n",
    "label": 1
  },
  {
    "text_1": "mysql how to update a column of every row with a given set of values",
    "text_2": "update table t\n    set code = (case when id = 1 then 'code-1'\n                     when id = 2 then 'code-2'\n                     when id = 3 then 'code-3'\n                end)\n    where id in (1, 2, 3);\n",
    "label": 1
  },
  {
    "text_1": "SQL Server trigger update column from another table",
    "text_2": "CREATE TRIGGER teg_priorityTrigger ON dbo.teg_priority AFTER INSERT\n    AS\n      UPDATE inserted\n      set inserted.UCIDN = (select UCIDN from custalign \n      where inserted.CIDN = custalign.CIDN)\n",
    "label": 1
  },
  {
    "text_1": "Why can't I insert 10 digits when my column is INT(10)",
    "text_2": "BIGINT  8   -9223372036854775808    9223372036854775807\n          0                 18446744073709551615\n",
    "label": 1
  },
  {
    "text_1": "What is wrong with my update statement with a join in Oracle?",
    "text_2": "SQL> update /*+ bypass_ujvc */\n  2         ( select elt.insurer\n  3                , dtr.header\n  4             from t_element elt\n  5                , t_debtor dtr\n  6            where elt.id_debtor = dtr.id_debtor\n  7              and dtr.header is not null\n  8         )\n  9     set insurer = header\n 10  /\n\n3 rijen zijn bijgewerkt.\n\nSQL> select * from t_element\n  2  /\n\nID_ELEMENT  ID_DEBTOR INSURER\n---------- ---------- -----------------\n         1          1 Header 1\n         2          1 Header 1\n         3          2 not to be updated\n         4          2 not to be updated\n         5          3 Header 3\n\n5 rijen zijn geselecteerd.\n",
    "label": 1
  },
  {
    "text_1": "How to do partial match with a SELECT IN query?",
    "text_2": "SELECT  COUNT(StockID)\nFROM    (\n        SELECT  DISTINCT '%' + CategoryCode + '%' AS Expr\n        FROM    tblLookup\n        WHERE   CategoryID = 'EG'\n        ) cats\nJOIN    tblStock s\nON      s.CategoryCode LIKE cats.Expr\n",
    "label": 1
  },
  {
    "text_1": "Odd INNER JOIN syntax and encapsulation",
    "text_2": "First Query\nSELECT Customer.Name,\n       Product.Desc,\n       Transaction.Date\nFROM   Product\n       INNER JOIN Transaction\n         ON Transaction.ProductID = Product.ID\n       INNER JOIN Customer\n         ON Transaction.CustomerID = Customer.ID \n",
    "label": 1
  },
  {
    "text_1": "SQL: Where Clause",
    "text_2": "DECLARE @Start DATE = '2015-03-01',\n        @End   DATE = '2015-03-31'\n\nSELECT Campaign_id\nFROM   Impressions\nWHERE  Date BETWEEN @Start AND @End\nGROUP  BY Campaign_id\nHAVING COUNT(DISTINCT Date) = 1 + DATEDIFF(DAY, @Start, @End); \n",
    "label": 1
  },
  {
    "text_1": "How to reuse a large query without repeating it?",
    "text_2": "with horrible_query_1 as (\n  select .. .. ..\n    from .. .. ..\n) ,\nugly_query_2 as (\n  select .. .. ..\n     .. .. ..\n)\n(select * from horrible_query_1 minus select * from ugly_query_2    ) union all\n(select * from ugly_query_2     minus select * from horrible_query_1)\n",
    "label": 1
  },
  {
    "text_1": "Create a table from double delimited string in stored procedure",
    "text_2": ";with cte (item, col1) as\n(\n  select \n    cast(left(col1, charindex(',',col1+',')-1) as varchar(50)) item,\n         stuff(col1, 1, charindex(',',col1+','), '') col1\n  from yourtable\n  union all\n  select \n    cast(left(col1, charindex(',',col1+',')-1) as varchar(50)) item,\n    stuff(col1, 1, charindex(',',col1+','), '') col1\n  from cte\n  where col1 > ''\n),\ns2 (id1, id2) as\n(\n  select substring(item, 1, charindex('#', item)-1), \n    reverse(substring(reverse(item), 1, charindex('#', reverse(item))-1))\n  from cte\n)\nselect id1, id2\nfrom s2\n",
    "label": 1
  },
  {
    "text_1": "unique id in more than one table [MySQL]",
    "text_2": "REPLACE INTO Tickets64 (stub) VALUES ('a');\nSELECT LAST_INSERT_ID();\n",
    "label": 1
  },
  {
    "text_1": "sql query (Show unique rows in column)",
    "text_2": "select field, November, December, January\nfrom\n(\n  select field,\n    value, month\n  from yourtable\n) src\npivot\n(\n  sum(value)\n  for month in (November, December, January, etc)\n) piv\n",
    "label": 1
  },
  {
    "text_1": "select records both ways from same table?",
    "text_2": "amt, date, pay_period, borrower_phone, borrower_name, lender_phone, lender_name\n100, 2013-04-01, 2013-04-15, 123456789, Borrower01, 345678901, Lender01\n100, 2013-04-01, 2013-04-15, 345678901, Borrower03, 123456789, Lender03\n",
    "label": 1
  },
  {
    "text_1": "What to use in SQL instead of a \"Foreach\" loop",
    "text_2": "INSERT INTO tabl2 (name, id)\n   SELECT name, id FROM table1\n",
    "label": 1
  },
  {
    "text_1": "Can't get my SQL query to comply with date request",
    "text_2": "SELECT DISTINCT p.ProductID, p.ProductName, od.Quantity,o.Shipcountry,o.ShippedDate\nFROM Products p \n   JOIN [Order Details] od ON p.ProductID=od.ProductID\n   JOIN Orders o ON od.OrderID=o.OrderID\nWHERE o.ShippedDate<'1997-01-01'\n   AND o.ShipCountry IN ('Spain','Portugal')\nORDER BY p.ProductName ASC\n",
    "label": 1
  },
  {
    "text_1": "Index in part of a column in oracle?",
    "text_2": "SELECT *\n  FROM rel\n WHERE substr( rel.object_id1, 1, 3 ) = '001'\n   AND substr( rel.object_id2, 1, 3 ) = '002'\n",
    "label": 1
  },
  {
    "text_1": "Should I use the inserted table in this trigger to set a default value for a nullable foreign key?",
    "text_2": "UPDATE Advertisers\nSET Currency_Id=(SELECT TOP 1 Id FROM Currencies WHERE Name='USD')\nWHERE Id in (select Id from inserted)\n",
    "label": 1
  },
  {
    "text_1": "Select Only one row per user and date",
    "text_2": "int cnt = src.Items.GroupBy(item => new {i.User, i.Date}).Count();\n",
    "label": 1
  },
  {
    "text_1": "Recursive group structure in MySQL",
    "text_2": "INSERT INTO Groups (groupid, groupname) VALUES\n(1, 'REALLY cool people'),\n(2, 'slightly cool people'),\n(3, 'cool people');\n\nINSERT INTO SubgroupPaths (supergroup, subgroup, pathlength) VALUES\n(1,1,0), (2,2,0), (3,3,0), -- every group points to itself\n(1,3,1), -- REALLY is parent of cool people\n(2,3,1); -- slightly is also parent of cool people\n",
    "label": 1
  },
  {
    "text_1": "split in groups by last 4 characters and show that groups",
    "text_2": "select alpha, count(*) as total\nfrom (select right(lastname,4) as alpha from orig)\ngroup by alpha\norder by total desc;\n",
    "label": 1
  },
  {
    "text_1": "codeigniter check if uri segment exist in database",
    "text_2": "function does_exist($page_name) {\n\n    $this->db->where('name', $page_name); // assuming you have a table with a `name` field\n    $query = $this->db->get('pages'); // select from the `pages` table\n    return $query->num_rows() > 0; // returns bool\n\n}\n",
    "label": 1
  },
  {
    "text_1": "SQL Query on find individuals that age is over 60 as of a specific date",
    "text_2": "select\n  PersonId, FirstName, LastName\nfrom\n  Person\nwhere\n  Born <= date_sub('2014-12-31' 60 year)\n",
    "label": 1
  },
  {
    "text_1": "I need to wrap a result set of xml data with a parent tag",
    "text_2": "<Colors>\n  <Color>Red</Color>\n  <Color>Orange</Color>\n  <Color>Yellow</Color>\n  <Color>Blue</Color>\n  <Color>Green</Color>\n  <Color>Indigo</Color>\n  <Color>Violet</Color>\n</Colors>\n",
    "label": 1
  },
  {
    "text_1": "How to Compare two strings using a if in a stored procedure in sql server 2008?",
    "text_2": "DECLARE @temp VARCHAR(10)\n    SET @temp = 'm'\n\nIF @temp = 'm'\n  SELECT 'yes'\nELSE\n  SELECT 'no'\n",
    "label": 1
  },
  {
    "text_1": "Why don't I get any output from my relation table?",
    "text_2": " Create table enroll AS (Select s.sid AS 'Sid', c.cid AS 'Cid' from courses c inner join students s on c.something = s.something)\n",
    "label": 1
  },
  {
    "text_1": "Postgresql: Insert the cartesian product of two or more sets",
    "text_2": " number | letter\n--------+--------\n      1 | A\n      1 | B\n      1 | C\n      1 | D\n      1 | E\n      2 | A\n      2 | B\n      2 | C\n      2 | D\n      2 | E\n      3 | A\n      3 | B\n      3 | C\n      3 | D\n      3 | E\n      4 | A\n      4 | B\n      4 | C\n      4 | D\n      4 | E\n      5 | A\n      5 | B\n      5 | C\n      5 | D\n      5 | E\n(25 rows)\n",
    "label": 1
  },
  {
    "text_1": "MySQL using IF or CASE statement across joined tables",
    "text_2": "select a.labSamples__yr, max(b.date) as ndate,\n       substring_index(group_concat(a.id order by b.date desc)) as maxid\nfrom gtpro a join\n     labresults b\n     on a.id = b.idgtpro\nwhere (a.labSamples__yr = 2 and b.date >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH)) or\n      (a.labSamples__yr = 4 and b.date >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH)) or\n      (a.labSamples__yr = 12 and b.date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH))\ngroup by a.labSamples__yr;\n",
    "label": 1
  },
  {
    "text_1": "Hide SQL > statements in the spool file",
    "text_2": "C:\\>sqlplus scott/tiger @D:\\mahesh-plsql-books\\spool\\spool_test.sql\n",
    "label": 1
  },
  {
    "text_1": "SQL: I want to get specific rows using rownum on a where conditioned query",
    "text_2": "SELECT id \nFROM (\n    SELECT id, write_date, ROW_NUMBER() OVER (ORDER BY ID DESC) AS RowNum\n    FROM sale_order \n     ) AS MyDerivedTable\nWHERE MyDerivedTable.write_date > '\" + deFromDate.Text + \"' and\nMyDerivedTable.write_date < '\" + deToDate.Text + \"' MyDerivedTable.RowNum \nBETWEEN @startRow AND @endRow\n",
    "label": 1
  },
  {
    "text_1": "Joining tables with and without concatenated columns",
    "text_2": "SELECT \n  T1.col2\n  ,CASE WHEN T2.col1 IS NULL THEN 'No' ELSE 'Yes' END\nFROM T1\n  LEFT OUTER JOIN T2 ON ',' + T2.col2 + ',' LIKE '%,' + T1.col1 + ',%' \n                    AND T1.col3 = T2.col3\n",
    "label": 1
  },
  {
    "text_1": "Datatype for storing ip address in SQL Server",
    "text_2": "SELECT dbo.fnBinaryIPv4('192.65.68.201')\n--should return 0xC04144C9\ngo\n\nSELECT dbo.fnDisplayIPv4( 0xC04144C9 )\n-- should return '192.65.68.201'\ngo\n",
    "label": 1
  },
  {
    "text_1": "How to replace all spaces between a <p> and </p> tag",
    "text_2": "  declare @mem table(id int identity(1,1), NotificationMessage varchar(80))\n\n  insert into @mem(NotificationMessage)\n  select 'that is some text initial<p> one two three four  </p> asdf asdf asdf'\n\n  insert into @mem(NotificationMessage)\n  select '<p> one two three four  </p> asdf asdf asdf'\n\n  insert into @mem(NotificationMessage)\n  select 'that is some text initial<p> one two three four  </p>'\n\n  insert into @mem(NotificationMessage)\n  select '<p> one two three four  </p>'\n\n  insert into @mem(NotificationMessage)\n  select 'one two three four  </p>'\n\n  insert into @mem(NotificationMessage)\n  select 'one two three four'\n\n\n  select\n  NotificationMessage,\n  case \n  when CHARINDEX('<P>',NotificationMessage) > 1  then SUBSTRING(NotificationMessage,1,CHARINDEX('<P>',NotificationMessage)-1)\n  else ''\n  end as section1,\n\n  REPLACE(SUBSTRING(NotificationMessage,                                                                                                    \n                        case when CHARINDEX('<P>' , NotificationMessage) > 0 then\n                                    CHARINDEX('<P>' , NotificationMessage) + 3\n              else 1\n                        end,                                                                                                    \n                        case when CHARINDEX('</P>', NotificationMessage) > 0  then\n                                    CHARINDEX('</P>' , NotificationMessage)\n              else LEN(NotificationMessage) \n                        end \n                        -\n                        case when CHARINDEX('<P>' , NotificationMessage) > 0 and CHARINDEX('</P>', NotificationMessage) > 0  then\n                                    CHARINDEX('<P>' , NotificationMessage) + 3\n              else 1 end) , ' '\n   ,'&nbsp;') as section2,\n\n  case \n  when CHARINDEX('</P>',NotificationMessage) > 1 then\n   case when len(NotificationMessage) > (CHARINDEX('</P>',NotificationMessage) + 4)  then SUBSTRING(NotificationMessage,CHARINDEX('</P>',NotificationMessage)+4,  len(NotificationMessage) - CHARINDEX('</P>',NotificationMessage)+4 )\n   else ''\n   end\n  else ''\n  end as section3,\n\n  case \n  when CHARINDEX('<P>',NotificationMessage) > 1  then SUBSTRING(NotificationMessage,1,CHARINDEX('<P>',NotificationMessage)-1)\n  else ''\n  end \n  +\n  REPLACE(SUBSTRING(NotificationMessage,                                                                                                    \n                        case when CHARINDEX('<P>' , NotificationMessage) > 0 then\n                                    CHARINDEX('<P>' , NotificationMessage) + 3\n              else 1\n                        end,                                                                                                    \n                        case when CHARINDEX('</P>', NotificationMessage) > 0  then\n                                    CHARINDEX('</P>' , NotificationMessage)\n              else LEN(NotificationMessage) \n                        end \n                        -\n                        case when CHARINDEX('<P>' , NotificationMessage) > 0 and CHARINDEX('</P>', NotificationMessage) > 0  then\n                                    CHARINDEX('<P>' , NotificationMessage) + 3\n              else 1 end) , ' '\n   ,'&nbsp;') \n  +\n  case \n  when CHARINDEX('</P>',NotificationMessage) > 1 then\n   case when len(NotificationMessage) > (CHARINDEX('</P>',NotificationMessage) + 4)  then SUBSTRING(NotificationMessage,CHARINDEX('</P>',NotificationMessage)+4,  len(NotificationMessage) - CHARINDEX('</P>',NotificationMessage)+4 )\n   else ''\n   end\n  else ''\n  end as newstring\n  from @mem\n",
    "label": 1
  },
  {
    "text_1": "Select unique record from 2 table",
    "text_2": "SELECT DISTINCT\n    id,name,phonenumber\nFROM\n    user\n    JOIN class on user.id = class.ID\n",
    "label": 1
  },
  {
    "text_1": "Auto Increment in SQL INSERT Query?",
    "text_2": "Me.CompanyTableAdapter1.AddCompany(txtCompanyName.Text, txtCompanyNotes.Text)\n",
    "label": 1
  },
  {
    "text_1": "Using TSQL, how to find words and grouping before and after a given term?",
    "text_2": "select *\nfrom dbo.fnSplitString('red balloon sky', 'balloon')\n\nred     1   R\n sky    2   L\n",
    "label": 1
  },
  {
    "text_1": "SQL \"select where not in subquery\" returns no results",
    "text_2": "SELECT  *\nFROM    common\nWHERE   NOT EXISTS\n        (\n        SELECT  NULL\n        FROM    table1 t1\n        WHERE   t1.common_id = common.common_id\n        )\n",
    "label": 1
  },
  {
    "text_1": "EXEC Stored Procedure inside another doesn't wait to to finish",
    "text_2": "INSERT INTO LogInfo (LogValue) VALUES ('starting procedure A')\n...\nINSERT INTO LogInfo (LogValue) VALUES ('Calling procedure B')\n...\n\nINSERT INTO LogInfo (LogValue) VALUES ('ending procedure A')\n",
    "label": 1
  },
  {
    "text_1": "Android, sqlite database finding two values in the two columns and the resulting value",
    "text_2": "String whereClause = LAT_VAL + \"=? AND \" + LONG_VAL + \"=?\";\n",
    "label": 1
  },
  {
    "text_1": "Make a new user in SQL developer to create a new database",
    "text_2": "USER1> select * from TableTest;\n",
    "label": 1
  },
  {
    "text_1": "How to populate options of h:selectOneMenu from database?",
    "text_2": "<h:selectOneMenu value=\"#{bean.user}\" converter=\"omnifaces.SelectItemsConverter\">\n    <f:selectItems value=\"#{bean.users}\" var=\"user\" itemValue=\"#{user}\" itemLabel=\"#{user.name}\" />\n</h:selectOneMenu>\n",
    "label": 1
  },
  {
    "text_1": "Select directly into hierarchical user type",
    "text_2": "SELECT parent_item(p.ID, \n                   p.NAME, \n                   CAST(COLLECT(child_item(c.id, c.NAME)) AS children_table))\n  FROM PARENT p\n INNER JOIN child c ON p.id = c.parent_id\n GROUP BY p.ID, p.NAME\n",
    "label": 1
  },
  {
    "text_1": "How to select and update referrer payments in this bitcoin faucet?",
    "text_2": "UPDATE table SET column = (SELECT other_column) // maybe with a WHERE\n",
    "label": 1
  },
  {
    "text_1": "Oracle SQL constraint, name entered must be a member",
    "text_2": "-- Create foreign key constraints \nalter table TEAM\n  add constraint fk_team_player_1 foreign key (PLAYER1)\n  references player (MEMBER_ID);\n\nalter table TEAM\n  add constraint fk_team_player_2 foreign key (PLAYER2)\n  references player (MEMBER_ID);\n",
    "label": 1
  },
  {
    "text_1": "Most efficient way to store and display a user's inbox to the user",
    "text_2": "SELECT *\n  FROM message\n WHERE (to = {party1} AND from = {party2})\n    OR (to = {party2} AND from = {party1})\n   AND messageid BETWEEN 11 AND 20\n ORDER BY messageID \n",
    "label": 1
  },
  {
    "text_1": "Rearrange PSQL table",
    "text_2": " letter | active | fixing | offline \n--------+--------+--------+---------\n A      |      3 |        |       1\n B      |     12 |        |       3\n C      |      2 |      4 |        \n(3 rows)\n",
    "label": 1
  },
  {
    "text_1": "Time in Hrs or Hrs and Minutes SQL Server",
    "text_2": "SELECT DATEPART(HOUR, @yourTime) + (DATEPART(MINUTE, @yourTime) / 60.) AS pHours;\n",
    "label": 1
  },
  {
    "text_1": "Old & New Values in SQL",
    "text_2": "| EMPNAME | OLD_STA_CD | STA_CD |         COMMENTS |\n|---------|------------|--------|------------------|\n|  AAAAAA |     (null) |      1 |              One |\n|  AAAAAA |          1 |      2 |              two |\n|  AAAAAA |          2 |      2 |      two_Updated |\n|  AAAAAA |          2 |      2 | two_UpdatedAgain |\n|  AAAAAA |          2 |      3 |            Three |\n|  AAAAAA |          3 |      4 |             Four |\n",
    "label": 1
  },
  {
    "text_1": "auditing 50 columns using oracle trigger",
    "text_2": "if updating then\n    for r in v_tab_col_nt.first..v_tab_col_nt.last loop\n        if updating(v_tab_col_nt(r)) then\n            insert into data_table values(1,'i am updating '||v_tab_col_nt(r));\n        end if;\n    end loop;\nelse /* inserting */\n    for r in v_tab_col_nt.first..v_tab_col_nt.last loop\n        insert into data_table values(2,'i am inserting '||v_tab_col_nt(r));\n    end loop;\nend if;\n",
    "label": 1
  },
  {
    "text_1": "Having partitiion on all distinct values where new value can come",
    "text_2": "create table shops (\n  pk number not null primary key, \n  name varchar2(30) not null, \n  city varchar2(30) not null)\npartition by list(city)\n(partition shops_paris values ('Paris'),\n partition shops_berlin values ('Berlin'),\n partition shops_london values ('London'),\n partition shops_unknown values (default)\n );\n",
    "label": 1
  },
  {
    "text_1": "use array/variable in sql-query",
    "text_2": "SELECT T2.name,T1.groupName\nFROM Table1 T1 INNER JOIN\nTable1 T2 on T1.groupID=T2.groupId2\nWHERE T2.category=1\n",
    "label": 1
  },
  {
    "text_1": "If (SELECT...) = 0 INSERT . in MySql",
    "text_2": "INSERT IGNORE INTO table(column1, column2, column3) VALUES(@value1, @value2, @value3)\n",
    "label": 1
  },
  {
    "text_1": "How do I use Previous function in SSRS",
    "text_2": "=Previous(Sum(Fields!CurrentMV.Value, \"Detail\"), \"Detail\")\n",
    "label": 1
  },
  {
    "text_1": "Math operation in SQL without select?",
    "text_2": "declare @Value1 int;\nset @Value1 = 1;\ndeclare @Value2 int;\nset @Value2 = 2;\ndeclare @Value3 int;\n\nset @Value3 = @Value1 + @Value2\n",
    "label": 1
  },
  {
    "text_1": "Why does Doctrine QueryBuilder destroy my query?",
    "text_2": "$latestId = $result['userId'];\n",
    "label": 1
  },
  {
    "text_1": "Better (response time) query for pagination?",
    "text_2": "SQL> select rank, id, \"IsFile\"\n  2    from (select rank,\n  3                  case \"IsFile\"\n  4                     when 1 then\n  5                      (select id from File f where f.rowid = a.rid)\n  6                     when 0 then\n  7                      (select id from Claim c where c.rowid = a.rid)\n  8                   end id, \"IsFile\", rownum r\n  9             from (select /*+ first_rows(20) */\n 10                     score(100) rank, rowid rid, 1 as \"IsFile\"\n 11                      from File s\n 12                     where contains(ContentCLOB, 'z', 100) > 0\n 13                    union all\n 14                    select /*+ first_rows(20) */\n 15                     score(1) rank, rowid rid, 0 as \"IsFile\"\n 16                      from Claim s\n 17                     where contains(IdClaim, 'z', 1) > 0\n 18                     order by rank desc) a)\n 19   where r >= 1\n 20     and rownum <= 20\n 21  /\n\n      RANK         ID IsFile\n---------- ---------- ----------\n        25      16373          0\n        21       1192          1\n        21      13477          0\n        21       5394          0\n        21       2870          0\n        17        113          1\n        17      19874          0\n        17       1939          1\n        17       1765          1\n        17       2322          1\n        17       3195          1\n\n      RANK         ID IsFile\n---------- ---------- ----------\n        17       4248          1\n        17       4346          1\n        17       4183          1\n        17       8444          1\n        17       9040          1\n        17       9395          1\n        17      10502          1\n        17      10131          1\n        17      11027          1\n\n20 rows selected.\n\n\nExecution Plan\n----------------------------------------------------------\nPlan hash value: 1724352232\n\n-------------------------------------------------------------------------------------------\n| Id  | Operation                   | Name        | Rows  | Bytes | Cost (%CPU)| Time     |\n-------------------------------------------------------------------------------------------\n|   0 | SELECT STATEMENT            |             |    20 |   840 |     9  (12)| 00:00:01 |\n|   1 |  TABLE ACCESS BY USER ROWID | FILE    |     1 |    25 |     1   (0)| 00:00:01 |\n|   2 |   TABLE ACCESS BY USER ROWID| CLAIM |     1 |    25 |     1   (0)| 00:00:01 |\n|*  3 |  COUNT STOPKEY              |             |       |       |            |          |\n|*  4 |   VIEW                      |             |    24 |  1008 |     9  (12)| 00:00:01 |\n|   5 |    COUNT                    |             |       |       |            |          |\n|   6 |     VIEW                    |             |    24 |   672 |     9  (12)| 00:00:01 |\n|   7 |      SORT ORDER BY          |             |    24 | 48336 |     8  (50)| 00:00:01 |\n|   8 |       UNION-ALL             |             |       |       |            |          |\n|*  9 |        DOMAIN INDEX         | CTXIDX1     |    10 | 20140 |     4   (0)| 00:00:01 |\n|* 10 |        DOMAIN INDEX         | CTXIDX2     |    14 | 28196 |     4   (0)| 00:00:01 |\n-------------------------------------------------------------------------------------------\n\nPredicate Information (identified by operation id):\n---------------------------------------------------\n\n   3 - filter(ROWNUM<=20)\n   4 - filter(\"R\">=1)\n   9 - access(\"CTXSYS\".\"CONTAINS\"(\"CONTENTCLOB\",'z',100)>0)\n  10 - access(\"CTXSYS\".\"CONTAINS\"(\"IDCLAIM\",'z',1)>0)\n\nNote\n-----\n   - dynamic sampling used for this statement (level=2)\n\n\nStatistics\n----------------------------------------------------------\n         51  recursive calls\n          0  db block gets\n        216  consistent gets\n          0  physical reads\n          0  redo size\n        760  bytes sent via SQL*Net to client\n        375  bytes received via SQL*Net from client\n          3  SQL*Net roundtrips to/from client\n          1  sorts (memory)\n          0  sorts (disk)\n         20  rows processed\n",
    "label": 1
  },
  {
    "text_1": "How to Model self-referential Entities in SQL",
    "text_2": "SELECT weakVS.Name \nFROM Element AS el\nJOIN Weakness on el.idElement = Weakness.idElementStrongAgainst\nJOIN Element As weakVS on weakness.idElement = weakVS.idElement\nWHERE el.Name = 'water'\n",
    "label": 1
  },
  {
    "text_1": "SQL Inner join on one field when second is null and on second when first is null",
    "text_2": "select * \n    from sizeconditionstable t1\n    join specalloytable t2\n    on (t1.utc = t2.utc and t1.colnum = t2.colnum) and\n       ((t1.c4 = t2.c4) or (t1.c4 is null and t2.c4 is null)) and\n       ((t1.c5 = t2.c5) or (t1.c5 is null and t2.c5 is null))\n",
    "label": 1
  },
  {
    "text_1": "How do I query for records with multiple values for the last column in a compound GROUP BY clause?",
    "text_2": "COUNTRY CITY\tDISTRICT\nJapan   Tokyo\t2\nJapan   Tokyo\t1\nChina   Beijing\tZ\nChina   Beijing\tY\nChina   Beijing\tX\n",
    "label": 1
  },
  {
    "text_1": "Why is a group by clause required when rows are limited in where clause?",
    "text_2": "SELECT Name, Count(Product) as NumOrders\nFROM CustomerOrders\nGROUP BY Name\n",
    "label": 1
  },
  {
    "text_1": "primary keys and foreign keys?",
    "text_2": "pkey | name\n1    | name1\n2    | name2\n",
    "label": 1
  },
  {
    "text_1": "Oracle XE, count and display different combinations of rows based on one column",
    "text_2": "SELECT service,\n       COUNT( userid ) AS num_users\nFROM   (\n  SELECT userid,\n         LISTAGG( service ) WITHIN GROUP ( ORDER BY service ) AS service\n  FROM   some_table\n  GROUP BY userid\n)\nGROUP BY service;\n",
    "label": 1
  },
  {
    "text_1": "Parse a String Expression into Columns",
    "text_2": "select nonnum [char],num [repeat] from @t\n",
    "label": 1
  },
  {
    "text_1": "Query results based on the current date",
    "text_2": "SELECT * \nFROM Orders \nWHERE OrderDate = DATE(NOW())\n",
    "label": 1
  },
  {
    "text_1": "updating a table from inner query is only using the first value",
    "text_2": "with toupdate (\n    select *,\n           row_number() over (partition by [Country] order by newid()) as tempRank,\n           count(*) over (partition by [Country]) as tempTotal\n    from Users\n   )\nupdate toupdate\n   set rank = tempRank, total = tempTotal;\n",
    "label": 1
  },
  {
    "text_1": "How to split string in based on a certain delimiter in DB2 without creating stored procedure",
    "text_2": "╔════════════════════════════════╦════════╗\n║          Person_Info           ║ result ║\n╠════════════════════════════════╬════════╣\n║ Person_BILL_1234_1511011900    ║   1234 ║\n║ Person_BOB_88888               ║  88888 ║\n║ Person_MARIOSAN_10_1511011900  ║     10 ║\n╚════════════════════════════════╩════════╝\n",
    "label": 1
  },
  {
    "text_1": "Populate database with values from hash",
    "text_2": "mine.map{|product_to_save| Product.new(product_to_save).save} \n",
    "label": 1
  },
  {
    "text_1": "How do I properly design a SQL database so that I can store nodes and connections to other nodes?",
    "text_2": "item_1_name | item_2_name\n-------------------------\ntest        | node_2\ntest        | item_4\n",
    "label": 1
  },
  {
    "text_1": "Database column encryption postgres",
    "text_2": "SELECT (value = crypt('PasswordToEncrypt0', value)) AS match FROM test_encrypt;\n",
    "label": 1
  },
  {
    "text_1": "How to declare Internal table in MySQL?",
    "text_2": "create temporary table tmp engine=memory select id, name from foo... ;\n\n-- do more work...\n\nselect * from tmp order by id;\n\ndrop temporary table if exists tmp;\n",
    "label": 1
  },
  {
    "text_1": "SQL Injection on Views",
    "text_2": "SELECT <columns> FROM View WHERE ColumnX = 'Y'\n",
    "label": 1
  },
  {
    "text_1": "Escape SQL parameters in shell pipeline",
    "text_2": "awk '{gsub(\"\\\"\", \"\\\\\\\"\", $6)}\n",
    "label": 1
  },
  {
    "text_1": "Query to find gaps in zip4 codes",
    "text_2": "|   ZIP |\n---------\n| 85006 |\n",
    "label": 1
  },
  {
    "text_1": "MSSQL dynamic pivot column values to column header",
    "text_2": "| ID |  NAME1 |  NAME2 |  NAME3 |  NAME4 |  NAME6 |\n|----|--------|--------|--------|--------|--------|\n|  1 |  value |  value |  value | (null) | (null) |\n|  2 | (null) |  value | (null) |  value | (null) |\n|  3 | (null) | (null) | (null) | (null) |  value |\n",
    "label": 1
  },
  {
    "text_1": "How do you force mysql command line to not prompt y/n?",
    "text_2": "[root@***]# mysqladmin --help\nmysqladmin  Ver 8.42 Distrib 5.1.47, for redhat-linux-gnu on x86_64\nCopyright 2000-2008 MySQL AB, 2008 Sun Microsystems, Inc.\nThis software comes with ABSOLUTELY NO WARRANTY. This is free software,\nand you are welcome to modify and redistribute it under the GPL license\n\nAdministration program for the mysqld daemon.\nUsage: mysqladmin [OPTIONS] command command....\n  -c, --count=#       Number of iterations to make. This works with -i\n                      (--sleep) only.\n  --debug-check       Check memory and open file usage at exit.\n  --debug-info        Print some debug info at exit.\n  -f, --force         Don't ask for confirmation on drop database; with\n                      multiple commands, continue even if an error occurs.\n  -C, --compress      Use compression in server/client protocol.\n  --character-sets-dir=name\n                      Directory for character set files.\n  --default-character-set=name\n                      Set the default character set.\n  -?, --help          Display this help and exit.\n  -h, --host=name     Connect to host.\n  -b, --no-beep       Turn off beep on error.\n  -p, --password[=name]\n                      Password to use when connecting to server. If password is\n                      not given it's asked from the tty.\n  -P, --port=#        Port number to use for connection or 0 for default to, in\n                      order of preference, my.cnf, $MYSQL_TCP_PORT,\n                      /etc/services, built-in default (3306).\n  --protocol=name     The protocol to use for connection (tcp, socket, pipe,\n                      memory).\n  -r, --relative      Show difference between current and previous values when\n                      used with -i. Currently only works with extended-status.\n  -O, --set-variable=name\n                      Change the value of a variable. Please note that this\n                      option is deprecated; you can set variables directly with\n                      --variable-name=value.\n  -s, --silent        Silently exit if one can't connect to server.\n  -S, --socket=name   The socket file to use for connection.\n  -i, --sleep=#       Execute commands repeatedly with a sleep between.\n  --ssl               Enable SSL for connection (automatically enabled with\n                      other flags). Disable with --skip-ssl.\n  --ssl-ca=name       CA file in PEM format (check OpenSSL docs, implies\n                      --ssl).\n  --ssl-capath=name   CA directory (check OpenSSL docs, implies --ssl).\n  --ssl-cert=name     X509 cert in PEM format (implies --ssl).\n  --ssl-cipher=name   SSL cipher to use (implies --ssl).\n  --ssl-key=name      X509 key in PEM format (implies --ssl).\n  --ssl-verify-server-cert\n                      Verify server's \"Common Name\" in its cert against\n                      hostname used when connecting. This option is disabled by\n                      default.\n  -u, --user=name     User for login if not current user.\n  -v, --verbose       Write more information.\n  -V, --version       Output version information and exit.\n  -E, --vertical      Print output vertically. Is similar to --relative, but\n                      prints output vertically.\n  -w, --wait[=#]      Wait and retry if connection is down.\n  --connect_timeout=#\n  --shutdown_timeout=#\n",
    "label": 1
  },
  {
    "text_1": "Selecting some results of SQL query",
    "text_2": "SELECT * FROM some_table LIMIT 5;\n",
    "label": 1
  },
  {
    "text_1": "Unique hash/index for time interval",
    "text_2": "{\n  resource: 123,\n  day: ISODate(\"2015-09-06\"),\n  period: 16\n},\n{\n  resource: 123,\n  day: ISODate(\"2015-09-06\"),\n  period: 17\n},\n{\n  resource: 123,\n  day: ISODate(\"2015-09-06\"),\n  period: 18\n},\n",
    "label": 1
  },
  {
    "text_1": "ZF Db Append to column",
    "text_2": "UPDATE `TABLE` SET `column` = `column` + 101 WHERE `foo` = 'bar';\n",
    "label": 1
  },
  {
    "text_1": "How to generate a date for the given time?",
    "text_2": "Id         stDate                  InTime                  OutTime                 DateIn                  DateOut                 \n---------- ----------------------- ----------------------- ----------------------- ----------------------- ----------------------- \n1          2009-02-23 00:00:00.000 1900-01-01 08:00:00.000 1900-01-01 17:00:00.000 2009-02-23 00:00:00.000 2009-02-23 00:00:00.000 \n1          2009-02-24 00:00:00.000 1900-01-01 17:00:00.000 1900-01-01 08:00:00.000 2009-02-24 00:00:00.000 2009-02-25 00:00:00.000 \n1          2009-02-25 00:00:00.000 1900-01-01 10:00:00.000 1900-01-01 16:00:00.000 2009-02-25 00:00:00.000 2009-02-25 00:00:00.000 \n1          2009-02-26 00:00:00.000 1900-01-01 21:00:00.000 1900-01-01 20:00:00.000 2009-02-26 00:00:00.000 2009-02-27 00:00:00.000 \n1          2009-02-27 00:00:00.000 NULL                    NULL                    NULL                    NULL                    \n\n5 Row(s) affected\n",
    "label": 1
  },
  {
    "text_1": "How are nested set models traversed in MySQL?",
    "text_2": "{ name: \"TELEVISIONS\", lft: 2, rgt: 9 }\n{ name: \"TUBE\",        lft: 3, rgt: 4 }\n{ name: \"LCD\",         lft: 5, rgt: 6 }\n{ name: \"PLASMA\",      lft: 7, rgt: 8 }\n",
    "label": 1
  },
  {
    "text_1": "How do I trace former ids using a recursive query?",
    "text_2": "with recursive current_ru (reporting_unit, predesessor, depth) as (\n    select reporting_unit, predesessor, 1\n    from providers\n    where predesessor is not null\nunion\n    select r.reporting_unit, p.predesessor, depth+ 1\n    from providers p\n    join current_ru r\n    on p.reporting_unit = r.predesessor\n    )\nselect *\nfrom current_ru;\n\n reporting_unit | predesessor | depth \n----------------+-------------+-------\n 99BX7          | 99BX6       |     1\n 99BX6          | 99BX5       |     1\n 99BX6          |             |     2\n 99BX7          | 99BX5       |     2\n 99BX7          |             |     3\n(5 rows)\n",
    "label": 1
  },
  {
    "text_1": "Insert in a temporal table the names of another table SQL Server 2008",
    "text_2": "create table known (sex char(1), age int, weight int, height int)\n",
    "label": 1
  },
  {
    "text_1": "Is there a way to insert an auto-incremental primary id with a prefix in mysql database?",
    "text_2": "DELIMITER $$\nCREATE TRIGGER tg_bi_table1\nBEFORE INSERT ON table1\nFOR EACH ROW\nBEGIN\n  INSERT INTO table1_seq() VALUES();\n  SET NEW.id = CONCAT('D', LPAD(LAST_INSERT_ID(), 4,'0'));\nEND$$\nDELIMITER ;\n",
    "label": 1
  },
  {
    "text_1": "MySQL Query - the Clause `where (varchar)` returns items starting with a number only. Why?",
    "text_2": "true >= -0.5  > false < 0.5 <= true\n",
    "label": 1
  },
  {
    "text_1": "Oracle database table to use as an array to execute other query",
    "text_2": " DECLARE\n    BEGIN\n        FOR employee_rec in (select monthly_income\n                                from employees\n                                where name = v_name_in)\n        LOOP\n             update tableB set incom_val = employee_rec.monthly_income where ...;\n        END LOOP;\n    END;\n",
    "label": 1
  },
  {
    "text_1": "How to select latest row by a user_id",
    "text_2": "SELECT c.*\nFROM content c\n    INNER JOIN (SELECT user_id, max(id) as maxid \n                FROM content \n                GROUP BY user_id) as c1 on c.id = c1.maxid\n",
    "label": 1
  },
  {
    "text_1": "Mysql group_concat() re-orders resultset",
    "text_2": "SELECT  Group_id,\n        SUBSTRING_INDEX(\n                    GROUP_CONCAT(lang\n                                ORDER BY lang = 'EN' DESC, \n                                        lang = 'RU' DESC), \n                    ',', 1) AS lang,\n        SUBSTRING_INDEX(\n                    GROUP_CONCAT(text\n                                ORDER BY lang = 'EN' DESC, \n                                        lang = 'RU' DESC), \n                    ',', 1) AS Text,\n        GROUP_CONCAT(lang ORDER BY lang = 'EN' DESC, \n                                    lang = 'RU' DESC) AS available_translations\nFROM    translations\nGROUP BY Group_id;\n",
    "label": 1
  },
  {
    "text_1": "Oracle syntax left joins three or more tables",
    "text_2": "select a.c a, b.c b, c.c c   from a, b, c  where a.c = b.c (+)    and\nc.c = a.c (+)\n\n------------------------------------------------------------------------\n| Id  | Operation           | Name | E-Rows |  OMem |  1Mem | Used-Mem |\n------------------------------------------------------------------------\n|   0 | SELECT STATEMENT    |      |        |       |       |          |\n|*  1 |  HASH JOIN OUTER    |      |      4 |  2168K|  2168K|  805K (0)|\n|*  2 |   HASH JOIN OUTER   |      |      4 |  2616K|  2616K|  981K (0)|\n|   3 |    TABLE ACCESS FULL| C    |      4 |       |       |          |\n|   4 |    TABLE ACCESS FULL| A    |      4 |       |       |          |\n|   5 |   TABLE ACCESS FULL | B    |      4 |       |       |          |\n------------------------------------------------------------------------\n",
    "label": 1
  },
  {
    "text_1": "SQL Server Recursive Hierarchy Query",
    "text_2": "WITH cte AS ( \n        SELECT CompanyLinks.*, cast('(' + cast(ParentId as nvarchar(max)) + ',' \n                 + cast(ChildId as nvarchar(max))+')' as nvarchar(max)) Path \n          FROM CompanyLinks \n          WHERE ParentId = @Id OR ChildId = @Id\n          UNION ALL \n\n          SELECT a.*,\n               cast(\n                     c.Path + '(' + \n                     cast(a.ParentId as nvarchar(max)) + ',' + \n                     cast(a.ChildId as nvarchar(max)) + ')' \n                   as nvarchar(max)\n                   ) Path \n        FROM CompanyLinks a JOIN cte c ON \n              a.ParentId = c.ChildId \n              OR c.ParentId = a.ChildId \n              OR c.ParentId = a.ParentId \n              OR c.ChildId = a.ChildId \n            where c.Path not like cast(\n                     '%(' + \n                     cast(a.ParentId as nvarchar(max)) + ',' + \n                     cast(a.ChildId as nvarchar(max)) + \n                     ')%' \n                   as nvarchar(max)\n                   )\n\n)\nSELECT DISTINCT a.id, Company.Name, path from (\n   SELECT distinct ParentId as id, path FROM cte\n   union all \n   SELECT distinct ChildId as id, path FROM cte\n) a inner join Company on Company.Id = a.Id\n",
    "label": 1
  },
  {
    "text_1": "Techniques/Tricks for Hiding/Abstracting SQL in PL/SQL",
    "text_2": "select ename\ninto v_ename\nfrom emp\nwhere empno = v_empno;\n",
    "label": 1
  },
  {
    "text_1": "MS SQL table hints and locking, parallelism",
    "text_2": "BEGIN TRANSACTION\n\nSELECT * FROM vT1 \nWHERE [docDate] BETWEEN &DateStart AND &DateEnd \nAND [warehouseID] IN ('w1','w2','w3')\n",
    "label": 1
  },
  {
    "text_1": "Convert this SQL Query to NHibernate Criteria Queries",
    "text_2": "select TOP 1 * from Feeds where DataId = ??? Order By Id desc\n",
    "label": 1
  },
  {
    "text_1": "Getting Datetime by Year, Month, Date",
    "text_2": "declare @Date varchar(20)\nselect @Date = cast(Year('20140530') as varchar) + \ncast(Month('20140530') as varchar) + \ncast(Day('20140530') as varchar)\n\nselect @Date\n",
    "label": 1
  },
  {
    "text_1": "Help needed with sql query",
    "text_2": "update Table1 set col1 = col1 + 15\n",
    "label": 1
  },
  {
    "text_1": "Improve JOIN query speed",
    "text_2": "SELECT DISTINCT tech.uid, listing.EmpNo, listing.FirstName, listing.LastName\nFROM  listing INNER JOIN tech ON tech.uid = listing.EmpNo\nORDER BY listing.EmpNo ASC;\n",
    "label": 1
  },
  {
    "text_1": "Conversion of INTEGER to DATETIME differs to VB6",
    "text_2": "?CDbl(#30/12/1899 03:00:01#)\n 0.125011574074074\n",
    "label": 1
  },
  {
    "text_1": "Combining Database Entries Using a Key to Produce Table with One Entry per Key",
    "text_2": "IF OBJECT_ID('NewTable') IS NOT NULL DROP TABLE NewTable\nSELECT ItemID, ItemName, FruitOrVeggie, Color, Price, Weight, Diameter\nINTO NewTable\nFROM      \n(      \n SELECT t.ItemID, t.ItemName, t.FruitOrVeggie, Color, attributeName, attributeValue\n FROM ItemTable t JOIN ItemAttributesTable at ON t.ItemID = at.ItemID\n                  JOIN AttributeTypesTable tt ON at.attributeID = tt.attributeID\n) x\nPIVOT\n(\n MAX(attributeValue) FOR attributeName IN ([Price], [Weight], [Diameter])\n ) p\n\nSELECT *\nFROM NewTable\n",
    "label": 1
  },
  {
    "text_1": "Most Efficient Way to Process Subquery For First Record",
    "text_2": "with cte as (\n    select\n        row_number() over(partition by a.active_id order by b.date asc) as rn1,\n        row_number() over(partition by a.active_id order by b.date desc) as rn2,\n        a.active_id, b.date, b.city\n    from tbl_a as a\n        inner join tbl_b as b on b.id = a.id\n)\nselect\n    c.active_id,\n    c1.date,\n    c2.city\nfrom (select distinct active_id from cte) as c\n    left outer join cte as c1 on c1.active_id = c.active_id and c1.rn1 = 1\n    left outer join cte as c2 on c2.active_id = c.active_id and c2.rn2 = 1\n",
    "label": 1
  },
  {
    "text_1": "find max logons in an interval",
    "text_2": "insert into changelog\nselect changet, sum(cnts), 0\nfrom\n(\nselect start_time as changet, 1 as cnts from testlog\nunion all\nselect end_time as changet, -1 from testlog\n) as q\ngroup by changet;\n",
    "label": 1
  },
  {
    "text_1": "Selecting data into a Postgres array",
    "text_2": "CREATE AGGREGATE array_agg_mult (anyarray)  (\n    SFUNC     = array_cat\n   ,STYPE     = anyarray\n   ,INITCOND  = '{}'\n);\n",
    "label": 1
  },
  {
    "text_1": "How to get the ROWID from a Progress database",
    "text_2": "SELECT ROWID, FirstName, LastName FROM customer WHERE cust-num = 123\n",
    "label": 1
  },
  {
    "text_1": "Create External Hive Table Pointing to HBase Table",
    "text_2": "CREATE EXTERNAL TABLE IF NOT EXISTS HISTORY \n(\n    ROWKEY STRING,\n    ID STRING,\n    START_TIME STRING,\n    END_TIME STRING,\n    VALUE DOUBLE\n)\nROW FORMAT DELIMITED FIELDS TERMINATED BY ','\nSTORED BY 'org.apache.hadoop.hive.hbase.HBaseStorageHandler'\nWITH SERDEPROPERTIES\n(\n    \"hbase.columns.mapping\" = \":key,VDS:ID,VDS:START_TIME,VDS:END_TIME,VDS:VALUE\"\n)\nTBLPROPERTIES(\"hbase.table.name\" = \"HISTORY\");\n",
    "label": 1
  },
  {
    "text_1": "MySQL GROUP BY doesn't work when migrated to SQL Server 2012",
    "text_2": "SELECT StyleNr,Customer,Color, SUM(XS+S+M+L+XL+XXL+[1Size]+Custom) as Total \nFROM StockData  \nGROUP BY StyleNr,Customer,Color\nORDER BY StyleNr,Customer,Color;\n",
    "label": 1
  },
  {
    "text_1": "Create a database with multiple values to one key",
    "text_2": "exerciseId (int255) | muscleId (int255)\n",
    "label": 1
  },
  {
    "text_1": "How to bulk-amend the job step command in ALL sql server agent jobs",
    "text_2": "UPDATE SJS SET\n    Command = REPLACE(Command, 'EmailAddress&TestDomain.Com', '')\nFROM msdb.dbo.SysJobs SJ\nINNER JOIN msdb.dbo.SysJobSteps SJS\n    ON SJS.Job_Id = SJ.Job_Id\nWHERE SJ.Originating_server = ..... -- Your server here\n    AND SJS.Command LIKE '%EmailAddress@TestDomain.Com%'\n",
    "label": 1
  },
  {
    "text_1": "Matching specific one-to-many entries with SQL",
    "text_2": "WHERE l.code IN ('EN', 'ES', 'FR')\nAND NOT EXISTS (SELECT NULL FROM language where productid = p.productid\n   AND code NOT IN ('EN', 'ES', 'FR')\nGROUP BY p.productid, p.name\nHAVING COUNT(*) = 3\n",
    "label": 1
  },
  {
    "text_1": "Complex SQL query. At least for me",
    "text_2": "SELECT  IT.InvoiceNumber\n       ,IT.DateInvoice\nFROM    InvoiceTable InvT\nWHERE   EXISTS (SELECT  InvF.PatientID\n                FROM    InvoiceFields InvF\n                WHERE   InvF.InvoiceNumber = InvT.InvoiceNumber\n                AND InvF.PatientID = @PatientID)\n",
    "label": 1
  },
  {
    "text_1": "Selecting first and last scores from a list of appointments",
    "text_2": "PERSONID    FIRST_CONTACT FIRST_QUEST_1 FIRST_QUEST_2 LAST_CONTACT LAST_QUEST_1 LAST_QUEST_2\n----------- ------------- ------------- ------------- ------------ ------------ ------------\n1           2015-01-01    10            11            2015-01-21   21           211\n2           2015-01-01    11            24            2015-01-31   12           25\n3           2015-02-01    13            21            2015-03-01   14           28\n4           2015-03-01    15            29            2015-04-01   16           21\n",
    "label": 1
  },
  {
    "text_1": "Inline BLOB / BINARY data types in SQL / JDBC",
    "text_2": "-- Use a blob constructor. This is not needed for VARCHAR FOR BIT DATA types\nINSERT INTO lob_table VALUES (blob(X'01FF'));\n",
    "label": 1
  },
  {
    "text_1": "How to implement a bidirectional unique index across multiple columns",
    "text_2": "CREATE TRIGGER uinsert BEFORE INSERT ON tbl_challenger\n FOR EACH ROW SET NEW.u0 = LEAST(NEW.host,NEW.challenger),\n  NEW.u1 = GREATEST(NEW.host,NEW.challenger);\nCREATE TRIGGER uupdate BEFORE UPDATE ON tbl_challenger\n FOR EACH ROW SET NEW.u0 = LEAST(NEW.host,NEW.challenger),\n  NEW.u1 = GREATEST(NEW.host,NEW.challenger);\n",
    "label": 1
  },
  {
    "text_1": "Ms Access - How to verify the date time format displayed in yyyy/mm/dd HH/MM/SS",
    "text_2": "SELECT * FROM myTable WHERE myDate Not Like \"####/##/## ##:##:##\"\n",
    "label": 1
  },
  {
    "text_1": "Remove duplicate rows from table with join",
    "text_2": "DELETE city_table \n  FROM city_table\n  LEFT JOIN \n  (SELECT MIN(id) AS IDs FROM city_table\n   GROUP BY city,state_id\n  )A\n  ON city_table.ID = A.IDs\n  WHERE A.ids IS NULL;\n",
    "label": 1
  },
  {
    "text_1": "Creating table with LIKE or SELECT Clause and CONSTRAINTS behavior?",
    "text_2": "select * into fk from (select * from pk) as tmp\n",
    "label": 1
  },
  {
    "text_1": "Prolog Database Query",
    "text_2": "datable(F,M) :-\n     person(F, _, female, _, _, _, _),\n     datable(M, F).\n",
    "label": 1
  },
  {
    "text_1": "Query 2 different items within the same field and the same table",
    "text_2": "  JOIN person p\n    ON p.entity_id = s.master_id\n",
    "label": 1
  },
  {
    "text_1": "Remove 'cross' duplicate result for double cross apply",
    "text_2": "| Left | Right |\n|------|-------|\n|    5 |   ABC |\n|    1 |   XYZ |\n|    6 |   HXS |\n|    7 |   GGH |\n",
    "label": 1
  },
  {
    "text_1": "Regex in Oracle SQL",
    "text_2": "^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$\n",
    "label": 1
  },
  {
    "text_1": "Do not bring a line of tables",
    "text_2": "SELECT \n p.nodeid, \n p.contentid,\n p.publishdate, \n p.url, \n c.categoryid, \n c.nodeid, \n a.previewimage, \n a.contentid, \n e.title \nFROM \n `node` AS p \n INNER JOIN `nodecategory` AS c ON p.`nodeid` = c.`nodeid` \n INNER JOIN `article` AS a ON p.`contentid` = a.`contentid` \n INNER JOIN `nodeinfo` AS e ON p.`nodeid` = e.`nodeid` \nWHERE c.`categoryid` \n IN (73,74,77,105,71,70,72,76,100,80,79,78,81,108,145,146,82,142,83,97,153) \n AND NOT EXISTS (\n  SELECT 1\n  FROM \n   `nodecategory` AS ic\n  WHERE\n   p.`nodeid` = ic.`nodeid`\n   AND ic.`categoryid` IN (150)\n )\nGROUP BY c.nodeid \nORDER BY p.`publishdate` \nDESC LIMIT 4\n",
    "label": 1
  },
  {
    "text_1": "SQL - JOIN if specific column contains data matching two others",
    "text_2": "select * from table1 left outer join table2 on concat_ws(' ', firstName, lastName) = fullName\n",
    "label": 1
  },
  {
    "text_1": "count function per row",
    "text_2": "SELECT s.id\n     , s.name\n     , s.company\n     , s.association\n     , s.is_supercharged\n     , s.is_deleted\n  FROM sites s\n  JOIN ( SELECT d.site AS site_id\n           FROM domain d\n          GROUP BY d.site\n       ) r\n    ON r.site_id = s.id\n  LEFT\n  JOIN ( SELECT a.site AS site_id\n           FROM domain a\n          WHERE NOT a.is_deleted\n          GROUP BY a.site\n       ) q\n    ON q.site_id = s.id\n WHERE q.site_id IS NULL\n   AND NOT s.is_deleted\n ORDER BY s.id\n",
    "label": 1
  },
  {
    "text_1": "SQL: How can I check if two values in column A belong to the same group defined in column B?",
    "text_2": "select u1.user, u1.group, u1.show_groupmembers\nfrom users u1\nwhere u1.group = 'Alpha'\nand exists ( select 1\n              from users u2\n              where u2.user = 'Peter'\n              and u2.show_groupmembers = 'Y'\n              and u1.group = u2.group )\n",
    "label": 1
  },
  {
    "text_1": "how to replace NULL value during insertion in sql",
    "text_2": "insert into table values (CPI_id , Weight ,IFNULL(score_100_UB ,100), score_100_LB )\n",
    "label": 1
  },
  {
    "text_1": "Update or delete splitted data",
    "text_2": "UPDATE Customer\n    SET Emails = REPLACE(Emails, @to_update, @new_email)\nWHERE CustomerId = 1\n",
    "label": 1
  },
  {
    "text_1": "Select from table, name is stored in the field",
    "text_2": "DECLARE\n  TYPE rc_type REF CURSOR;\n  rc rc_type;\n  table_rec table%ROWTYPE;\nBEGIN\n  OPEN rc FOR 'select * from table';\n  LOOP\n    FETCH rc INTO table_rec;\n    EXIT WHEN rc%NOTFOUND;\n    -- Process this row, e.g.\n    DBMS_OUTPUT.PUT_LINE( 'Name: '||table_rec.name );\n  END LOOP;\nEND;\n",
    "label": 1
  },
  {
    "text_1": "Oracle VPD column masking, how can I change the default (null) value to XXX",
    "text_2": "SQL> create view v_tablea\n  2  as\n  3  select id, case when your_sec_col is null then 'xxxxxx' else your_sec_col end your_sec_col\n  4    from TABLEA;\n\nView created.\n",
    "label": 1
  },
  {
    "text_1": "Installing Wampserver2.0i on Windows Server 2003 but Oracle Server using port 80",
    "text_2": "left click wampmanager -> Apache -> Service -> Restart Service\n",
    "label": 1
  },
  {
    "text_1": "How to select all records where a field is of a certain value until a record shows up that has a different value?",
    "text_2": "create table so9091342 (id int primary key auto_increment, column1 int, column2 int);\ninsert into so9091342 (column1, column2) values (124,12),(124,11),(124,10),(124,9),(26,8),(65,7),(65,6),(65,5),(65,4),(23,3),(124,2),(124,1),(124,0);\n",
    "label": 1
  },
  {
    "text_1": "SQL: Order first by table.column = 'matchingstring', then order everything else alphabetically?",
    "text_2": "order by case when book_versions.name = 'paperback' then 0 else 1 end,\n         book_versions.name, -- remove this line if other names should not be ordered \n         book_versions.isbn \n",
    "label": 1
  },
  {
    "text_1": "How to merge mysql database backups",
    "text_2": "replace into d1.mytable (select * from d2.mytable);\n",
    "label": 1
  },
  {
    "text_1": "Prioritize Distinct SQL Query",
    "text_2": "Year      Order\n--------- -----\nSenior    1\nJunion    2\nSophomore 3\nFreshman  4\n",
    "label": 1
  },
  {
    "text_1": "Row data from a comma-delimited field used within a select query",
    "text_2": ";WITH CteDelimitted AS(\n    SELECT\n        t.ClassID,\n        nProdType = CAST(s.Item AS INT)\n    FROM Table2 t\n    CROSS APPLY dbo.DelimitedSplit8K(t.ExcludedList, ',') s\n),\nCteCross AS(\n    SELECT\n        t2.ClassID,\n        t1.nProdType,\n        t1.SprodDesc\n    FROM Table1 t1\n    CROSS JOIN(\n        SELECT DISTINCT ClassID FROM Table2\n    )t2\n\n)\nSELECT * \nFROM CteCross c\nWHERE NOT EXISTS(\n    SELECT 1\n    FROM CteDelimitted\n    WHERE\n        ClassID = c.ClassID\n        AND nProdType = c.nProdType\n)\nORDER BY ClassID, nProdType\n",
    "label": 1
  },
  {
    "text_1": "SQL: Check if a column contains any of given values",
    "text_2": "select userid\nfrom mytable\ngroup by userid\nhaving count(case when ruleid <> 102 then 1 end) = 0\n",
    "label": 1
  },
  {
    "text_1": "How to create a stored procedure to find cliques in the table of connections between users",
    "text_2": "1   1\n1   2\n2   3\n2   4\n3   5\n3   6\n3   7\n3   8\n4   9\n4   10\n4   11\n4   12\n4   13\n5   14\n5   15\n5   16\n5   17\n5   18\n5   19\n5   20\n",
    "label": 1
  },
  {
    "text_1": "Update a count (field) safely in SQL",
    "text_2": "begin transaction\nupdate table \n    set counter=counter+1\n    where id=@id;\nselect counter\n    from table\n    where id=@id;\ncommit;\n",
    "label": 1
  },
  {
    "text_1": "Group similar values in first column and join its second column value using delimiter in SQL",
    "text_2": "SELECT t1.Pattern,  \n       Ids = REPLACE( (SELECT Id AS [data()]\n             FROM Table1 t2\n             WHERE t2.Pattern = t1.Pattern\n             ORDER BY t2.Pattern\n             FOR XML PATH('')\n            ), ' ', ',')\nFROM Table1 t1\nGROUP BY Pattern;\n",
    "label": 1
  },
  {
    "text_1": "ColdFusion 9 - SQL Statement - Boolean Logic",
    "text_2": "    WHERE FE >= SD and FS <= ED\n",
    "label": 1
  },
  {
    "text_1": "Get unique pairs from self-join, plus rows without a match",
    "text_2": "SELECT DISTINCT\n       GREATEST (p1.player_id, p2.player_id) AS id1\n     , LEAST    (p1.player_id, p2.player_id) AS id2\nFROM   player_standings p1\nLEFT   JOIN  player_standings p2 ON p1.wins = p2.wins\n                                AND p1.player_id <> p2.player_id;\n",
    "label": 1
  },
  {
    "text_1": "SQL to group on/off (bit) together to calculate a duration",
    "text_2": "select case_id, start_time, timer_name, type, value, duration,\n       (select top 1 start_time\n        from event e2\n        where e2.case_id = e.case_id and e2.type = e.type and e2.value = 0 and\n              e2.start_time > e.start_time\n        order by start_time desc\n       ) - start_time as duration\nfrom event e\nWHERE (type IN (1, 2, 3, 25, 26, 27, 28)) AND (defunct = 'N') and value = 1\n",
    "label": 1
  },
  {
    "text_1": "oracle sql compare result two subselects",
    "text_2": "SELECT SELECT DISTINCT H1.ID, H2.ID\n  FROM INV_HEAD H1, INV_HEAD H2\n  WHERE H1.ID <> H2.ID AND\n    (SELECT ART_ID, QUANTITY, PRICE FROM INV_POS WHERE HE_ID = H1.ID) =\n    (SELECT ART_ID, QUANTITY, PRICE FROM INV_POS WHERE HE_ID = H2.ID)\n",
    "label": 1
  },
  {
    "text_1": "To append all rows from one table to another",
    "text_2": "SELECT id, partner_registration_date\nFROM partner as tbl1\nUNION ALL\nSELECT id, partner_registration_date\nFROM partner_statistic as tbl2;\n",
    "label": 1
  },
  {
    "text_1": "Count particular substring text within column",
    "text_2": "SELECT fruit_suffix, count(1) as count FROM \n( SELECT \n     explode(split(Fruit, '[A-Z]')) as fruit_suffix \n  FROM UK.Choices ) X\nWHERE fruit_suffix <> ''\nGROUP BY fruit_suffix\n",
    "label": 1
  },
  {
    "text_1": "How to display duplicate items based on the quantity in SQL?",
    "text_2": "CREATE TABLE #TEMP(ITEM VARCHAR(10),QTY INT)    \n\nINSERT INTO #TEMP\nSELECT 'TEA',2\nUNION ALL\nSELECT 'COFFEE',3\n",
    "label": 1
  },
  {
    "text_1": "how to sum up the values for custom groups",
    "text_2": "1   1   175\n1   2   5\n1   3   646\n2   1   12\n2   2   33\n2   3   813\n3   1   256\n3   2   7\n3   3   581\n4   1   81\n4   2   425\n4   3   1735\n5   1   239\n5   2   93\n5   3   2265\n6   1   104\n6   2   437\n6   3   1259\n",
    "label": 1
  },
  {
    "text_1": "How do I write a sql query to \"expand\" a table that currently has a field to denote repeating records?",
    "text_2": "+----------+------+-------------------------+--------------+--------+-------------------------+\n| Property | Item |          Month          | Repeat_Count | Amount |         NewDate         |\n+----------+------+-------------------------+--------------+--------+-------------------------+\n| A        | Rent | 2016-01-01 00:00:00.000 |            1 |    100 | 2016-01-01 00:00:00.000 |\n| A        | Rent | 2016-02-01 00:00:00.000 |            1 |    105 | 2016-02-01 00:00:00.000 |\n| A        | Rent | 2016-03-01 00:00:00.000 |            3 |    110 | 2016-03-01 00:00:00.000 |\n| A        | Rent | 2016-03-01 00:00:00.000 |            3 |    110 | 2016-03-02 00:00:00.000 |\n| A        | Rent | 2016-03-01 00:00:00.000 |            3 |    110 | 2016-03-03 00:00:00.000 |\n| A        | Rent | 2016-06-01 00:00:00.000 |            1 |    115 | 2016-06-01 00:00:00.000 |\n| A        | Rent | 2016-07-01 00:00:00.000 |            6 |    120 | 2016-07-01 00:00:00.000 |\n| A        | Rent | 2016-07-01 00:00:00.000 |            6 |    120 | 2016-07-02 00:00:00.000 |\n| A        | Rent | 2016-07-01 00:00:00.000 |            6 |    120 | 2016-07-03 00:00:00.000 |\n| A        | Rent | 2016-07-01 00:00:00.000 |            6 |    120 | 2016-07-04 00:00:00.000 |\n| A        | Rent | 2016-07-01 00:00:00.000 |            6 |    120 | 2016-07-05 00:00:00.000 |\n| A        | Rent | 2016-07-01 00:00:00.000 |            6 |    120 | 2016-07-06 00:00:00.000 |\n| A        | Rent | 2017-01-01 00:00:00.000 |            1 |    125 | 2017-01-01 00:00:00.000 |\n+----------+------+-------------------------+--------------+--------+-------------------------+\n",
    "label": 1
  },
  {
    "text_1": "how to know which online databases are available to connect",
    "text_2": "private Context _context;\nprivate State _state;\nprivate boolean _listening;\nprivate String _reason;\nprivate boolean _isFailOver;\n\nprivate NetworkInfo _networkInfo;\n\nprivate NetworkInfo _otherNetworkInfo;\nprivate ConnectivityBroadcastReceiver _receiver;\n/**\n * The broadcast that listens to connectivity changes(wifi, mobile network etc)\n * */\nprivate class ConnectivityBroadcastReceiver extends BroadcastReceiver {\n    /**\n     * Called when connectivity state changes\n     * \n     * @param Context the context\n     * @param Intent the intent containing the information about the change\n     * */\n    @Override\n    public void onReceive(Context context, Intent intent) {\n        String action = intent.getAction();\n\n        if(!action.equals(ConnectivityManager.CONNECTIVITY_ACTION) || _listening == false) {\n            Log.w(TAG, \"onReceived() called with \" + _state.toString() + \" and \" + intent);\n            return;\n        }\n\n        boolean noConnectivity = intent.getBooleanExtra(ConnectivityManager.EXTRA_NO_CONNECTIVITY, false);\n\n        //Set the state according to current connectivity.\n        if(noConnectivity) {\n            _state = State.NOT_CONNECTED;\n        } else {\n            _state = State.CONNECTED;\n        }\n\n        //If current state is CONNECTED. Start background services, otherwise stop services.\n        switch(_state) {\n        case CONNECTED:\n            //Do stuff when connected\n            break;\n        case NOT_CONNECTED:\n            //Do stuff if not connected\n            break;\n        }\n\n        _networkInfo = (NetworkInfo)intent.getParcelableExtra(ConnectivityManager.EXTRA_NETWORK_INFO);\n        _otherNetworkInfo = (NetworkInfo)intent.getParcelableExtra(ConnectivityManager.EXTRA_OTHER_NETWORK_INFO);\n\n        _reason = intent.getStringExtra(ConnectivityManager.EXTRA_REASON);\n        _isFailOver = intent.getBooleanExtra(ConnectivityManager.EXTRA_IS_FAILOVER, false);\n\n        Log.d(TAG, \"onRecieve(): _networkInfo= \" + _networkInfo + \" _otherNetworkInfo= \" + (_otherNetworkInfo == null ? \"[none]\" : _otherNetworkInfo + \n                \" noConn= \" + noConnectivity) + \" _state= \" + _state.toString());\n    }\n};\n",
    "label": 1
  },
  {
    "text_1": "Multiple Select Subquery Count based on Hour of Day, Would Like to Add Table/Column",
    "text_2": "where  Date(d_date) = '2013-01-07'\n",
    "label": 1
  },
  {
    "text_1": "Make one row in result table from two rows in SQLite",
    "text_2": "select imageid, \n       max(case when attributetype = 'color' then attributevalue end) Color,\n       max(case when attributetype = 'quality' then attributevalue end) Quality\nfrom imageattribute\ngroup by imageid\n",
    "label": 1
  },
  {
    "text_1": "To take out those dept who has no employees assigned to it",
    "text_2": "SELECT D.DNAME\nFROM DEPT D\nWHERE\n NOT EXISTS (SELECT * FROM EMP E WHERE D.DEPTNO = E.DEPTNO)\n",
    "label": 1
  },
  {
    "text_1": "how to get value containing special symbol in where clause",
    "text_2": "select 'R&D.dept' from dual;\n\nEnter value for d: D\nold   1: select 'R&D.dept' from dual\nnew   1: select 'RDdept' from dual\n\n'RDDEP\n------\nRDdept\n",
    "label": 1
  },
  {
    "text_1": "How to find the difference between dates within the same column using SQL?",
    "text_2": ";WITH TempDataSource ([ATIENT_ID], [ADMIT_DATE], [LOCATION], [Rank])  AS\n(\n    SELECT [ATIENT_ID]\n          ,[ADMIT_DATE]\n          ,[LOCATION]\n          ,ROW_NUMBER() OVER (PARTITION BY [ATIENT_ID], [LOCATION] ORDER BY [ADMIT_DATE] ASC)\n    FROM @DataSource    \n),\nDataSource ([ATIENT_ID], [ADMIT_DATE], [LOCATION], [DIFF_IN_HOURS]) AS\n(\nSELECT DS1.[ATIENT_ID]\n      ,DS1.[ADMIT_DATE]\n      ,DS1.[LOCATION]\n      ,DATEDIFF(HOUR, DS2.[ADMIT_DATE], DS1.[ADMIT_DATE])\nFROM TempDataSource DS1\nLEFT JOIN TempDataSource DS2\n    ON DS1.[Rank] - 1 = DS2.[Rank]\n    AND DS1.[ATIENT_ID] = DS2.[ATIENT_ID]\n    AND DS1.[LOCATION] = DS2.[LOCATION]\n)\nSELECT [ATIENT_ID]\n      ,[ADMIT_DATE]\n      ,[LOCATION]\n      ,ROW_NUMBER() OVER (PARTITION BY [ATIENT_ID], [LOCATION] ORDER BY [ADMIT_DATE] ASC)\nFROM DataSource\nWHERE [DIFF_IN_HOURS] >= 48\n    OR [DIFF_IN_HOURS] IS NULL -- these are first records\n",
    "label": 1
  },
  {
    "text_1": "SQL select distinct max issue",
    "text_2": "select name, surname, group, max(year)\nfrom TheTable\ngroup by name, surname, group\n",
    "label": 1
  },
  {
    "text_1": "How can I create a pivot table from 3 tables?",
    "text_2": ";with cte as\n(\n  select pkid, name,\n    col = typeDescription+col,\n    value\n  from\n  (\n    select r.pkid,\n      r.name,\n      at.typedescription,\n      a.street,\n      a.number,\n      a.zipcode,\n      a.location\n    from relation r\n    left join RelationXAdres ra\n      on r.pkid = ra.RelationID\n    left join adres a\n      on ra.adresid = a.pkid\n    left join adrestype at\n      on a.AdresTypeId = at.PKid\n  ) d\n  unpivot\n  (\n    value\n    for col in (street, number, zipcode, location)\n  ) unpiv\n) \nselect pkid, name,\n  homestreet, homenumber, homezipcode, homelocation,\n  workstreet, worknumber, workzipcode, worklocation,\n  extrastreet, extranumber, extrazipcode, extralocation\nfrom cte\npivot\n(\n  max(value)\n  for col in (homestreet, homenumber, homezipcode, homelocation,\n              workstreet, worknumber, workzipcode, worklocation,\n              extrastreet, extranumber, extrazipcode, extralocation)\n) p;\n",
    "label": 1
  },
  {
    "text_1": "MySQL: Query entire file but by separate data, grouped by each unique column element",
    "text_2": "+--------+-------------+--------+---------+\n| PREFIX | PREFIXCOUNT | FIELD2 | AVERAGE |\n+--------+-------------+--------+---------+\n| 11-1   |           2 | Chris  | 3.50    |\n| 12-2   |           1 | Chris  | 2.00    |\n| 13-3   |           3 | Chris  | 3.00    |\n| 11-1   |           2 | Jacob  | 3.50    |\n| 12-2   |           1 | Jacob  | 3.00    |\n| 13-3   |           3 | Jacob  | 3.00    |\n| 11-1   |           2 | Mike   | 3.50    |\n+--------+-------------+--------+---------+\n",
    "label": 1
  },
  {
    "text_1": "Why is this query not using an index sort?",
    "text_2": "FROM PUBLIC.A\n   /* PUBLIC.A_FK_ID_B: A_FK_ID = 3 */\nWHERE A_FK_ID = 3\nORDER BY 25, 19\n/* index sorted */    \n",
    "label": 1
  },
  {
    "text_1": "Selecting Most recent records within a month?",
    "text_2": "WITH CTE_Group AS \n(\n    SELECT EmpId, MAX(TestDate) AS MaxDate\n    FROM MyTable\n    GROUP BY EmpId\n) \nSELECT m.* \nFROM CTE_Group g\nLEFT JOIN dbo.MyTable m ON g.EmpId = m.EmpId AND g.MaxDate = m.TestDate\n",
    "label": 1
  },
  {
    "text_1": "Getting only one row for a given column value",
    "text_2": "SELECT DISTINCT location_id\n  FROM locations\n ORDER BY your_spherical_cosine_law_distance_formula\n LIMIT 1\n",
    "label": 1
  },
  {
    "text_1": "Is it possible to move a record from one table to another using a single SQL statement?",
    "text_2": "DELIMITER $$\n\nDROP TRIGGER IF EXISTS TR_A_DEL_SOURCE_TABLE $$\n\nCREATE TRIGGER TR_A_DEL_SOURCE_TABLE AFTER DELETE ON SOURCE_TABLE FOR EACH ROW BEGIN\n\n  INSERT IGNORE INTO TARGET_TABLE(id,val1,val2) VALUES(old.id,old.va1,old.val2);\n\nEND $$\n\nDELIMITER ;\n",
    "label": 1
  },
  {
    "text_1": "Wildcard for a column name in the WHERE clause of a SELECT statement?",
    "text_2": "SELECT column_name FROM information_schema.columns\nWHERE table_schema = 'foo'\n AND table_name = 'bar'\n AND column_name LIKE '%_check'\n",
    "label": 1
  },
  {
    "text_1": "Select from a column which is saved in another column",
    "text_2": "id    normal_col_name    other_col_name     another_col \n-------------------------------------------------------\n1     a                  b                  c\n2     d                  e                  f \n",
    "label": 1
  },
  {
    "text_1": "Using Oracle..Need to compare each row of column having 1 word content with rows of column having paragrahs as row values",
    "text_2": "select\nword\n,paragraph\nfrom \n(select\n'(\\W|^)' || word || '(\\W|$)' as regexp\n,word\nfrom t1\n) t\njoin t2 on \n    (regexp_instr(paragraph, regexp, 1, 1, 0, 'i') > 0)\n;\n",
    "label": 1
  },
  {
    "text_1": "Link all query (select and delete) in one",
    "text_2": "SELECT s.*\nFROM tblIdentifiedThreatenedSpecies s\nINNER JOIN tblAssessmentVersion v\n    ON v.AssessmentVersionID = s.AssessmentVersionID\nINNER JOIN tblAssessment a\n    ON a.AssessmentID = v.AssessmentID\nWHERE\n    a.ProposalID LIKE '%0081/2013/0587B%'\n    AND PercentGain = 0\n",
    "label": 1
  },
  {
    "text_1": "Reorder list by column",
    "text_2": "DECLARE @T TABLE\n(\n    ID int,\n    Name char(1),\n    SortIndex int\n)\n\nINSERT @T \nSELECT 21, 'A', 1 UNION ALL\nSELECT 23, 'B', 2 UNION ALL\nSELECT 35, 'C', 3 UNION ALL\nSELECT 45, 'D', 4 UNION ALL\nSELECT 55, 'E', 5\n\n\nDECLARE @SortIndex int,@MoveTo int, @CurrentSortIndex int\nDECLARE @IDToMove INT \nSET @IDToMove = 21--A\n\nSET @CurrentSortIndex  = (SELECT SortIndex FROM @T WHERE ID = @IDToMove) \nSET @MoveTo = 2\n\nUPDATE\n  @T\nSET\n  SortIndex = @MoveTo\nWHERE\n  ID = @IDToMove\n\nUPDATE\n  @T\nSET\n  SortIndex = SortIndex - ((@MoveTo-@CurrentSortIndex)/(ABS(@MoveTo-@CurrentSortIndex)))\nWHERE\n(\n    SortIndex BETWEEN @CurrentSortIndex AND @MoveTo\n OR\n    SortIndex BETWEEN @MoveTo AND @CurrentSortIndex  \n)\nAND\n  ID != @IDToMove\n\nSELECT * FROM @T ORDER BY SortIndex\n",
    "label": 1
  },
  {
    "text_1": "update table pl/sql",
    "text_2": "CREATE OR REPLACE PROCEDURE update_sales\n( \n  p_customer_id IN sales.customer_id%type,\n  p_product_id IN sales.product_id%type,\n  p_new_quantity IN sales.quantity%type,\n  p_old_quantity OUT sales.quantity%type\n) AS\nBEGIN\n  SELECT quantity\n  INTO p_old_quantity\n  FROM sales\n  WHERE customer_id = p_customer_id\n  AND product_id = p_product_id\n  FOR UPDATE;\n\n  UPDATE sales\n  SET quantity = p_new_quantity\n  WHERE customer_id = p_customer_id\n  AND product_id = p_product_id;\nEND;\n/\n",
    "label": 1
  },
  {
    "text_1": "SQL Server Function for Maximum Date in Different Fields",
    "text_2": "SELECT \n a.a_Id,\n a.Name,\n b.b_Id,\n b.Detail,\n c.c_Id,\n c.OtherField,\n ld.LastUpdatedDate,\n (  SELECT  MAX(LastUpdated)\n    FROM    (   SELECT a.LastUpdated UNION ALL\n                SELECT a.LastUpdatedFromWeb UNION ALL\n                SELECT b.LastUpdated UNION ALL\n                SELECT c.LastUpdated\n            ) d\n) AS LastUpdated\nFROM \n a INNER JOIN b ON a.a_Id = b.a_Id \n   INNER JOIN c ON b.b_Id = c.b_Id;\n",
    "label": 1
  },
  {
    "text_1": "Increase Ms Access Insert Performance",
    "text_2": "\"UPDATE recTable SET SomeBoolean = SomeOtherBoolean WHERE someCriteria\"\n",
    "label": 1
  },
  {
    "text_1": "Query performance - Brain teaser",
    "text_2": " SELECT fieldB FROM Table WHERE fieldA  = Value;\n",
    "label": 1
  },
  {
    "text_1": "Inner Join with CASE statement is not working in SQL SERVER",
    "text_2": "Account1    Account2\n50000       50000\n50006       50006\n50015       50015\n50105       50105\n50150       50150\n50155       50155\n50165       50165\n",
    "label": 1
  },
  {
    "text_1": "Sub query in check \"not allowed here\"",
    "text_2": "alter table WORKER add constraint wrk_state_uk unique (worker_id, employing_state) ;\n\nalter table STATION add constraint stn_state_uk unique (station_id, state) ;\n",
    "label": 1
  },
  {
    "text_1": "How find Customers who Bought Product A and D > 6 months apart?",
    "text_2": "select A.CustID, ElapsedDays = datediff(d, A.InvoiceDate, B.InvoiceDate)\nfrom Orders A\ninner join Orders B on B.CustID = A.CustID\n    and B.ProdID = 312\n    -- more than 6 months ago\n    and B.InvoiceDate > dateadd(m,6,A.InvoiceDate)\nwhere A.ProdID = 105\n  AND NOT EXISTS (\n    SELECT *\n    FROM Orders C\n    WHERE C.CustID=A.CustID\n    AND C.InvoiceDate > A.InvoiceDate\n    and C.InvoiceDate < B.InvoiceDate\n    and C.ProdID in (105,312))\n",
    "label": 1
  },
  {
    "text_1": "Dynamically updating column value in SQL",
    "text_2": "update U\nset U.column_password = 'password value'\nFROM dbo.SplitIDs(@UserIDs) I\nINNER JOIN user_table U ON I.ID=U.user_id\n",
    "label": 1
  },
  {
    "text_1": "order by multiple columns",
    "text_2": "with grp(Name,ImpFile,TimeGroup,ImpTime) as \n(\n  select cast(null as varchar(5)), ImpFile, max(ImpTime) as TimeGroup, \n         max(ImpTime) as ImpTime\n  from people \n  group by ImpFile  \n\n  union all\n\n  select p.Name, p.ImpFile, ldr.TimeGroup, p.ImpTime\n  from people p\n  inner join grp ldr -- leader\n  on ldr.name is null and ldr.ImpFile = p.ImpFile\n)\nselect *\nfrom grp \norder by TimeGroup desc, Name;\n",
    "label": 1
  },
  {
    "text_1": "SQL query to retrieve a row with the highest possible ID",
    "text_2": "SELECT TOP 1 ID, Value\nFROM table\nWHERE Value = 'X'\nORDER BY ID DESC\n",
    "label": 1
  },
  {
    "text_1": "Normalizing/optimizing structure of large mysql table",
    "text_2": "SELECT COUNT(*) FROM all_downloads WHERE (node_id,license_id) = (123,456) \nAND timestamp > NOW() - INTERVAL 30 DAY\n",
    "label": 1
  },
  {
    "text_1": "SQL query for selecting the firsts in a series by column",
    "text_2": "CREATE TABLE Movements (RecID INT NOT NULL, Element INT NOT NULL, Time DATETIME NOT NULL, Room INT NOT NULL);\nINSERT INTO Movements (RecID, Element, Time, Room) VALUES\n(1, 1, '2010-06-01 00:00:00', 1),\n(2, 1, '2010-06-01 01:00:00', 2),\n(3, 1, '2010-06-01 02:00:00', 1),\n(4, 2, '2010-06-01 03:00:00', 1),\n(5, 2, '2010-06-01 04:00:00', 2),\n(6, 1, '2010-06-01 05:00:00', 3),\n(7, 2, '2010-06-01 06:00:00', 2);\n",
    "label": 1
  },
  {
    "text_1": "Debug statements in plsql code",
    "text_2": "PRAGMA INLINE(debug_msg, 'YES');     \n",
    "label": 1
  },
  {
    "text_1": "mysql how to order by user defined order/sort by number of items on a field",
    "text_2": "select name, Category, \n       (select count(*) from MyTable mt2 where mt2.Category = mt1.category) CatCount\nfrom MyTable mt1\norder by 3 DESC, name\n",
    "label": 1
  },
  {
    "text_1": "Non duplicate records with max date query on oracle",
    "text_2": "SELECT * FROM (\n  SELECT\n    a.aa_codart,\n    t.tr_fechafac,\n    t.tr_tipo,\n    ROW_NUMBER() OVER (PARTITION BY a.aa_codart ORDER BY t.tr_fechafac DESC) as rnk\n  FROM artalm a\n  INNER JOIN trapaso t ON a.aa_codart = t.tr_codart\n  WHERE t.tr_tipomov > 1\n    AND a.aa_codalm = '1'\n    AND t.tr_tipo BETWEEN 1 AND 2\n) WHERE rnk = 1;\n",
    "label": 1
  },
  {
    "text_1": "Two aggregate functions in MS ACCess SQL?",
    "text_2": "SELECT Category, SUM([market Value]) as sum_value\nFROM (\nSELECT Category, [market Value]\nFROM DEC\nUNION ALL \nSELECT Category, [market Value]\nFROM NOV\n) as A\nGROUP BY Category\n",
    "label": 1
  },
  {
    "text_1": "Merge 3 structurally identical tables if value in date column exists in all 3",
    "text_2": "SELECT Table1.dtcol, Table1.intcol + Table2.intcol + Table3.intcol AS intcolsum\n  FROM Table1 T1\n  INNER JOIN Table2 T2 ON T2.dtcol = T1.dtcol\n  INNER JOIN Table3 T2 ON T3.dtcol = T1.dtcol\n",
    "label": 1
  },
  {
    "text_1": "Oracle Not exists inside not exists",
    "text_2": "SELECT *\nFROM big_table big\nWHERE sum_number = 1 AND\n      (NOT EXISTS (SELECT 1\n                   FROM small_table smal\n                   WHERE other_number = big.other_number\n                  ) OR\n       NOT EXISTS (SELECT 1\n                   FROM and_another_table another\n                   WHERE and_another_number = big.and_another_number\n                  )\n      );\n",
    "label": 1
  },
  {
    "text_1": "RSQLite: binding sets and scalars in the same select query",
    "text_2": "dbGetQuery (c, \n            \"select * from tst where x = ? and y in (?)\", \n            data.frame(x=1, y=c(7,6)))\n",
    "label": 1
  },
  {
    "text_1": "Instr - Last index of last character",
    "text_2": "create table city (input char(64));\n\ninsert into city values('\"City=Amsterdam\"; \"Customer=124\"');\n\ninsert into city values('\"Customer=11\"; \"City=USA\"');\n\ninsert into city values('\"Tel=+00\"; \"City=China\"; \"Customer=1\"');\n\ninsert into city values('\"Tel=+00\"; \"Post=11111\";  \"Customer=333\"; \"City=Canada\"');\n",
    "label": 1
  },
  {
    "text_1": "SQL Server Free Text search: search words from a phrase in two tables",
    "text_2": "create unique clustered index [View_Index] \n    on View_FreeTextHelper (PrimaryKey ASC)\n",
    "label": 1
  },
  {
    "text_1": "MySQL - Combining multiple queries + counts",
    "text_2": "Select I.id, I.custname, I.custemail, I.sku\n    , DATE_FORMAT(FROM_UNIXTIME(I.ts), '%l:%i:%s %p, %c/%e/%Y') AS ts\n    ,   (\n        Select Sum( Case\n                    When I1.sku = ? Then 1\n                    When I1.sku In( Select subsku From combo As S1 Where S1.sku = ? ) Then 1\n                    Else 0\n                    End ) As Total\n        From images As I1\n        Where I1.stat = 1\n        ) As Total\nFrom images As I\nWhere stat = 0\n",
    "label": 1
  },
  {
    "text_1": "MySQL Frequency/Distribution",
    "text_2": "SELECT COUNT(*) AS LikesPorkChicken\nFROM MyTable t1\n  INNER JOIN Mytable t2 ON t1.Email = t2.Email\nWHERE t1.Type ='Pork' \n  AND t2.Type = 'Chicken'\n",
    "label": 1
  },
  {
    "text_1": "i have a oracle table EMP columns are NAME,AGE,DEPT",
    "text_2": "Select * from EMP.\n",
    "label": 1
  },
  {
    "text_1": "SQL Server 2008 Get Records where Group Count = 1",
    "text_2": "select UserID\nfrom dbo.tbl_User_Statistics2\ngroup by UserID\nhaving count(*) = 1\norder by UserId;\n",
    "label": 1
  },
  {
    "text_1": "SQL aggregation query, grouping by entries in junction table",
    "text_2": "SELECT    \n   sum(tableA.val) as sumVal,    \n   tableC.data  \nFROM    \n   tableA \n     inner join tableB ON tableA.id = tableB.fkeyA \n     INNER JOIN tableC ON tableB.fkeyC = tableC.id  \nGROUP by tableC.data\n",
    "label": 1
  },
  {
    "text_1": "How to set up JWT-Auth with Laravel 5",
    "text_2": "User::create(\n     [\n         'name' => 'you', \n         'email' => 'you@you.com', \n         'password' => Hash::make('secret')\n     ]\n);\n",
    "label": 1
  },
  {
    "text_1": "Slow MySQL SELECT performance",
    "text_2": "CREATE INDEX mr_ndx     ON meter_relevation ( Date, Id_Meter );\n",
    "label": 1
  },
  {
    "text_1": "DB2 CASE Statement",
    "text_2": "update royalties set royalty =\n    case when royalty >= 0.16 then royalty * 1.2\n    case when royalty >= 0.11 and royalty < 0.16 then royalty * 1.2\n    case when royalty <  0.11 then royalty * 1.1\n    end;\n",
    "label": 1
  },
  {
    "text_1": "MySQL JOIN two tables with different number of rows by id",
    "text_2": "| COLUMN1 | COLUMN2 |\n---------------------\n|      10 |      23 |\n|      11 |      23 |\n|      21 |      34 |\n|      33 |      99 |\n",
    "label": 1
  },
  {
    "text_1": "Including Data from other columns in Aggregate Function Result",
    "text_2": " SELECT client_ref,MAX(date_opened) last_opened\n FROM YourTable\n GROUP BY client_ref\n",
    "label": 1
  },
  {
    "text_1": "MYSQL - Insert result of concat of multiple rows based on ID",
    "text_2": "CREATE TABLE my_new_table\nSELECT `order_item_id`, group_concat(`customizations` separator ';')\nFROM `ojs_order_ing_export`\nGROUP BY `order_item_id`\n",
    "label": 1
  },
  {
    "text_1": "SQL NOT IN explaination",
    "text_2": "SELECT r.name \nFROM recipes r\nJOIN ingredients_recipes ir \n  ON ir.recipe_id = r.id\nWHERE EXISTS ( SELECT *\n    FROM ingredients_recipes ex\n    WHERE ex.recipe_id = r.recipe_id\n    AND ex.ingredient_id IN ( 2 , 3 )\n    GROUP BY nx.recipe_id\n    HAVING COUNT(*) = 2\n    );\n",
    "label": 1
  },
  {
    "text_1": "SQL sum and group values from two tables",
    "text_2": "SELECT seller, SUM(amount) FROM InvoiceRow \nJOIN InvoiceHead \nON InvoiceRow.InvoiceNr = InvoiceHead.InvoiceNr\nGROUP BY InvoiceHead.seller;\n",
    "label": 1
  },
  {
    "text_1": "Select max date per month SQL SERVER",
    "text_2": "declare @table table\n(\ndate date,\nperson varchar(10),\nbalance int\n)\n\ninsert into @table\nselect '01-15-12', 'A', 79\nunion all\nselect '01-23-12', 'c', 150\nunion all\nselect '01-17-12', 'A', 65\nunion all\nselect '02-23-12', 'c', 150\nunion all\nselect '02-15-12', 'A', 70\nunion all\nselect '03-23-12', 'c', 15\nunion all\nselect '03-15-12', 'A', 705\nunion all\nselect '03-28-12', 'c', 150\nunion all\nselect '04-15-12', 'A', 700\nunion all\nselect '04-23-12', 'c', 150;\n\n-- Average of max balance in month\nwith maxMonth as\n(\n  select year = year(date)\n    , month = month(date)\n    , person, monthMaxBalanace = max(balance)\n  from @table\n  where date between '01-17-2012' and getdate()\n  group by year(date), month(date), person\n)\nselect person, maxInMonthAverage = avg(monthMaxBalanace)\nfrom maxMonth\ngroup by person;\n",
    "label": 1
  },
  {
    "text_1": "SQL query not returning expected date time range",
    "text_2": "WHERE DATEADD(HH,-DATEDIFF(Hour,GETDATE(),GETUTCDATE()),Documents.CreationTime) >= '2014-10-01 00:00:00.000' and DATEADD(HH,-DATEDIFF(Hour,GETDATE(),GETUTCDATE()),Documents.CreationTime) <= '2014-10-03 08:00:00.000'\n",
    "label": 1
  },
  {
    "text_1": "Summing edges properties for order by in select statement",
    "text_2": "CREATE CLASS Entity EXTENDS V;\nCREATE CLASS isConnectedTo EXTENDS E;\nCREATE PROPERTY isConnectedTo.strengthOut INTEGER;\nCREATE PROPERTY isConnectedTo.strengthIn INTEGER;\n\nCREATE VERTEX Entity SET name = \"John\";\nCREATE VERTEX Entity SET name = \"Mike\";\nCREATE VERTEX Entity SET name = \"Susan\";\n\nCREATE EDGE isConnectedTo FROM (SELECT FROM Entity WHERE name = \"Mike\") TO (SELECT FROM Entity WHERE name = \"John\") SET strengthOut = 3, strengthIn = 2;\nCREATE EDGE isConnectedTo FROM (SELECT FROM Entity WHERE name = \"Mike\") TO (SELECT FROM Entity WHERE name = \"Susan\") SET strengthOut = 4;\n",
    "label": 1
  },
  {
    "text_1": "SQL subqueries to get field's value as a field name on the result",
    "text_2": "| place_id | location | country | longitude | weather |\n|----------|----------|---------|-----------|---------|\n|        1 |   Athens |  Greece |   12.3333 |    good |\n",
    "label": 1
  },
  {
    "text_1": "Creating and using a temporary table to return a specific row, instead of running the query repeatedly",
    "text_2": "declare @partition int = {0}\n\nIF @partition = 0\nbegin \n   truncate table TableCache;\n   insert into TableCache (column1, column2, rownumber) \n   SELECT column1, column2, \n          Row_number() OVER (ORDER BY table1.column1, column2) AS rownumber \n   ......;\nend\nselect column1, column2 \n  from TableCache \n where rownumber - 1 = @partition; \n",
    "label": 1
  },
  {
    "text_1": "How to delete old MediaWiki revisions when deleteOldRevisions run out of memory",
    "text_2": "DELETE FROM text WHERE NOT EXISTS\n  ( SELECT * FROM revision WHERE rev_text_id = old_id )\n",
    "label": 1
  },
  {
    "text_1": "Replace column output in a more readable form Oracle - SQL",
    "text_2": "SELECT payment_type.payment_type_description,\n       <<other columns>>\n  FROM payment pay\n       JOIN payment_type ON (pay.paymentType = payment_type.paymentType)\n",
    "label": 1
  },
  {
    "text_1": "Is there a way to change all char(1) columns to number(1) columns in Oracle?",
    "text_2": "select 'ALTER TABLE '\n        || table_name \n        || ' RENAME COLUMN '\n        || column_name \n        || ' TO ' || substr(column_name, 1, length(column_name) - 5) \n        || '_CHAR ;'\n  from user_tab_columns\n where data_type = 'CHAR'\n   and data_length = 1\n",
    "label": 1
  },
  {
    "text_1": "ORDER BY alternative values from main- and subquery",
    "text_2": "SELECT id \nFROM   post_table p\nLEFT   JOIN  (\n   SELECT comments_post_id AS id, max(comment_created_date) AS max_date\n   FROM   comments_table\n   GROUP  BY 1\n   ) c USING (id)\nWHERE  post_user_id = $user_id\nORDER  BY GREATEST(c.max_date, p.post_created_date) DESC NULLS LAST;\n",
    "label": 1
  },
  {
    "text_1": "Is it possible to have 1 query instead of 2 queries for the below mentioned case?",
    "text_2": "SELECT account, SUM(amount) AS int_total, MAX(date)\nFROM ((SELECT amount, date, account FROM non_cash\n      ) UNION ALL\n      (SELECT amount, date, account FROM receipts)\n     ) v\nWHERE account IN ('00210_int', '00210_pre')\nGROUP BY account;\n",
    "label": 1
  },
  {
    "text_1": "Mysql Fetching data",
    "text_2": "SELECT o.name, l.name FROM offers o\nINNER JOIN locations l ON o.id = l.offer_id\n",
    "label": 1
  },
  {
    "text_1": "Getting record with the only document by priority issue",
    "text_2": "WITH example AS (\n  SELECT c.name,\n         d.type,\n         ROW_NUMBER() OVER (PARTITION BY c.id\n                                ORDER BY CASE d.type\n                                           WHEN 2 THEN 1\n                                           WHEN 3 THEN 2\n                                           WHEN 1 THEN 3\n                                           ELSE 4\n                                         END) AS rnk    \n    FROM CONTACTS c\n    JOIN DOCUMENTS d ON d.contactid = c.id)\nSELECT e.name, e.type\n  FROM example e\n WHERE e.rnk = 1\n",
    "label": 1
  },
  {
    "text_1": "does this table fit for the 2NF?",
    "text_2": "coursenumber   name      credit\n\n1              math      5\n2              computer  4\n",
    "label": 1
  },
  {
    "text_1": "Change Value on SQL View",
    "text_2": "SELECT \nID, \nmyDate, \nIIF(myTime='00:00:00', '24:00:00', myTime) as myTime \nFROM MyTable WHERE myDate = '2014-06-01'\n",
    "label": 1
  },
  {
    "text_1": "Using 'in' in Join",
    "text_2": "SQL> select a.ids\n  2         , a.name\n  3         , a.surname\n  4         , b.id\n  5         , b.second_name\n  6  from\n  7      (\n  8           select n.id_b || ',' || s.id_b ids\n  9                  , n.name\n 10                  , s.surname\n 11                  , n.id_b as n_id_b\n 12                  , s.id_b as s_id_b\n 13           from names n,\n 14                surnames s\n 15           where n.id_a = s.id_a\n 16      ) a\n 17  left join\n 18      (\n 19          select sn.id, sn.second_name\n 20          from whatever sn\n 21      ) b on (b.id = a.n_id_b or b.id = a.s_id_b )\n 22  /\n\nIDS        NAME       SURNAME            ID SECOND_NAM\n---------- ---------- ---------- ---------- ----------\n12,24      SAM        I-AM               24 I AM SAM\n\nSQL>\n",
    "label": 1
  },
  {
    "text_1": "Joining tables with set data",
    "text_2": "garment_id  garment_name    garment_type    size_chart  available_sizes\n0           Boating Jacket  jacket          0           8,10,12      \n1           Polka Dot Skirt skirt           1           10,12\n",
    "label": 1
  },
  {
    "text_1": "Select from list of values received from a subquery, possibly null",
    "text_2": "SELECT tt.id\nFROM thetable tt\nWHERE EXISTS (\n    SELECT * FROM thetable ex\n    WHERE (ex.column1 = tt.column1 \n          OR (ex.column1 IS NULL AND tt.column1 IS NULL)\n          )\n    AND ex.id <> tt.id\n);\n",
    "label": 1
  },
  {
    "text_1": "JOIN 2 select queries FROM ONE TABLE",
    "text_2": "create table journal\n(\n    date datetime,\n    account int,\n    amount money,\n    type varchar(1)\n)\n\ninsert into journal values ('05/31/12', 20001, 300, 'D')\ninsert into journal values ('05/31/12', 20002, 700, 'C')\ninsert into journal values ('05/31/12', 20003, 600, 'D')\ninsert into journal values ('05/31/12', 20004, 900, 'C')\n\nselect date\n    , account\n    , isnull([D], 0) as D\n    , isnull([C], 0) as C\nfrom \n(\n    select *\n    from journal\n) x\npivot\n(\n    sum(amount)\n    for type in ([D], [C])\n) p\n\ndrop table journal\n",
    "label": 1
  },
  {
    "text_1": "pratical example of Postgres regex substring or regexp_matches",
    "text_2": "select * from locations where 'Greetings from Texas to all Cowboys' ~ State;\n",
    "label": 1
  },
  {
    "text_1": "ORDER BY FIELD Not Ordering by id number specified",
    "text_2": "Change ORDER BY FIELD('id',\n",
    "label": 1
  },
  {
    "text_1": "How to use value from two different rows of a table in another table",
    "text_2": " select employee_id\n      , ((a * 8) / 30 + (b * 22) / 30) as basic_salary \n from (\n     select x.employee_id\n          , max(starting_salary + (increment_rate * case when y.id = 2 then increment_frequency end )) as a\n          , max(starting_salary + (increment_rate * case when y.id = 3 then increment_frequency end)) as b\n          , x.salary_month\n          , x.arrear \n     from payslips x \n     join increments y \n         on x.employee_id = y.emp_id \n     group by x.employee_id, x.salary_month, x.arrear\n) as t;\n",
    "label": 1
  },
  {
    "text_1": "Select all forms with no records in the last 24 hours (but some records in the last 48, etc)",
    "text_2": "select name, count(name) \n    from table \nwhere gmts > sysdate -1 \n    or name = (select name from table where gmts > sysdate -2 and rownum <= 1) \ngroup by name\norder by gmts desc;\n",
    "label": 1
  },
  {
    "text_1": "Retrieve data from SQL Server and concatenate results over rows based on grouping",
    "text_2": ">>> import pandas as pd\n>>> import pymssql\n>>> import getpass\n",
    "label": 1
  },
  {
    "text_1": "Is there a more efficient way than doing several JOINS (MySQL)?",
    "text_2": "SELECT u.user_id,u.username, m.field_id,m.value FROM user u\nLEFT JOIN metadata m\nON u.user_id=m.user_id \nWHERE 1 ORDER BY user_id\n",
    "label": 1
  },
  {
    "text_1": "oracle job to run daily in oracle express edition 11g",
    "text_2": "BEGIN\n\n  dbms_scheduler.create_job(\n    job_name=>'JOB_TEST2',\n    job_type=>'PLSQL_BLOCK',\n    job_action=>'BEGIN\n    dbms_lock.sleep(10);\n    END;',\n    start_date=>systimestamp,\n    repeat_interval=>'FREQ=MINUTELY;INTERVAL=1',\n    number_of_arguments=>0,\n    enabled=>TRUE,\n    comments=>'Job duration is 10 seconds, launches every minute'\n  );\n\nEND;\n",
    "label": 1
  },
  {
    "text_1": "Windows Forms VB.NET - Populate TreeView with Hierarchical data",
    "text_2": "using System.Windows.Forms;\nusing System.Threading;\nusing System.Collections.Generic;\nusing System.Data.SqlClient;\npublic class TreeViewSample : Form\n{\n    private TreeView _treeView;\n    public TreeViewSample()\n    {\n        this._treeView = new System.Windows.Forms.TreeView();\n        this._treeView.Location = new System.Drawing.Point(12, 12);\n        this._treeView.Size = new System.Drawing.Size(200, 400);\n        this._treeView.AfterExpand +=\n            new TreeViewEventHandler(TreeView_AfterExpand);\n        this.ClientSize = new System.Drawing.Size(224, 424);\n        this.Controls.Add(this._treeView);\n        this.Text = \"TreeView Lazy Load Sample\";\n        PopulateChildren(null);\n    }\n\n    void TreeView_AfterExpand(object sender, TreeViewEventArgs e)\n    {\n        if (e.Node.Nodes.Count == 1 && e.Node.Nodes[0].Tag == \"dummy\")\n        {\n            PopulateChildren(e.Node);\n        }\n    }\n\n    private void PopulateChildren(TreeNode parent)\n    {\n        // this node has not yet been populated, launch a thread\n        // to get the data\n        int? parentId = parent != null ? (parent.Tag as DataNode).Id : (int?)null;\n        ThreadPool.QueueUserWorkItem(state =>\n        {\n            IEnumerable<DataNode> childItems = GetNodes(parentId);\n            // load the data into the tree view (on the UI thread)\n            _treeView.BeginInvoke((MethodInvoker)delegate\n            {\n                PopulateChildren(parent, childItems);\n            });\n        });\n    }\n\n    private void PopulateChildren(TreeNode parent, IEnumerable<DataNode> childItems)\n    {\n        TreeNodeCollection nodes = parent != null ? parent.Nodes : _treeView.Nodes;\n        TreeNode child;\n        TreeNode dummy;\n        TreeNode originalDummyItem = parent != null ? parent.Nodes[0] : null;\n        foreach (var item in childItems)\n        {\n            child = new TreeNode(item.Text);\n            child.Tag = item;\n            dummy = new TreeNode(\"Loading. Please wait...\");\n            dummy.Tag = \"dummy\";\n            child.Nodes.Add(dummy);\n            nodes.Add(child);\n        }\n        if (originalDummyItem != null)\n        {\n            originalDummyItem.Remove();\n        }\n    }\n\n    private IEnumerable<DataNode> GetNodes(int? parentId)\n    {\n        List<DataNode> result = new List<DataNode>();\n        using (SqlConnection conn = new SqlConnection(@\"[your connection string]\"))\n        using (SqlCommand cmd = new SqlCommand(\"select * from Nodes where ParentNodeId = @parentNodeId\", conn))\n        {\n            cmd.Parameters.Add(new SqlParameter(\"@parentNodeId\", System.Data.SqlDbType.Int));\n            cmd.Parameters[\"@parentNodeId\"].Value = parentId != null ? parentId : -1;\n            conn.Open();\n            using (SqlDataReader reader = cmd.ExecuteReader())\n            {\n                int nodeIdCol = reader.GetOrdinal(\"NodeId\");\n                int nameCol = reader.GetOrdinal(\"Name\");\n                int parentIdCl = reader.GetOrdinal(\"ParentNodeId\");\n                while (reader.Read())\n                {\n                    result.Add(new DataNode\n                       {\n                           Id = reader.GetInt32(nodeIdCol),\n                           Text = reader.GetString(nameCol),\n                           ParentId = reader.IsDBNull(parentIdCl) ? (int?)null : reader.GetInt32(parentIdCl)\n                       });\n                }\n            }\n        }\n        return result;\n    }\n}\n\npublic class DataNode\n{\n    public int Id { get; set; }\n    public string Text { get; set; }\n    public int? ParentId { get; set; }\n}\n",
    "label": 1
  },
  {
    "text_1": "SQL Add for Weekly & Monthly Totals",
    "text_2": "select\n    case\n        when grouping(d.w)=1 then 'Year ' + cast(max(d.y) as varchar(10))\n        when grouping(Sales_Date)=1 then 'Week ' + datename(m, max(ws)) + ' ' + cast(datepart(d, max(ws)) as varchar(20)) + ' - '\n            + datename(m, max(we)) + ' ' + cast(datepart(d, max(we)) as varchar(20))\n        else cast(cast([Sales_Date] as date) as varchar(255))\n    end as Period\n    , Sales = sum(Amount)\n    , Store = Store_ID\nfrom KF_Store_Sales_Daily\n    cross apply (\n        select\n            datepart(yy, [Sales_Date]),\n            datepart(wk, [Sales_Date]),\n            dateadd(d, 1-datepart(w, Sales_date), Sales_date),\n            dateadd(d, 7-datepart(w, Sales_date), Sales_date)\n    ) d(y, w, ws, we)\ngroup by Store_ID, d.y, rollup (d.w, Sales_Date)\norder by d.y desc,\n    grouping(d.w), d.w,\n    grouping(Sales_Date), Sales_Date\n",
    "label": 1
  },
  {
    "text_1": "SQL - Get custom day start datetime for passed datetime",
    "text_2": "Create Function dbo.MyStartOfDay(@datetime datetime) returns datetime as\nbegin\n    return dateadd(hour, -1, dateadd(day, datediff(day, 0, dateadd(hour, 1, @datetime)), 0))\nend\nGo\nSelect dbo.MyStartOfDay('2013-10-30 22:00');\n",
    "label": 1
  },
  {
    "text_1": "Oracle Select Query, distributing frequency of labels",
    "text_2": "select value_column,\n       (CASE WHEN mod(row_number() over (order by value_date),\n                      trunc(count(*) over () / 5)) = 0\n             THEN TO_CHAR(VALUE_DATE, 'MON-yyyy') \n             else ' '\n        END) as VALUE_DATE_STRING\nfrom SomeTable t;\n",
    "label": 1
  },
  {
    "text_1": "SQL Filtering a date grabbing column and having it grab 10 days previous of record",
    "text_2": "WHERE Date_Complete >= DATEADD(day,-10, yourdatecolumn)\n",
    "label": 1
  },
  {
    "text_1": "How to count databases elements in a range of date?",
    "text_2": "DECLARE @year INT;\nSET @year = 2012;\n\nDECLARE @start SMALLDATETIME;\nSET @start = DATEADD(YEAR, @year-1900, 0);\n\n;WITH y AS (SELECT TOP (12) rn = ROW_NUMBER() OVER (ORDER BY [object_id])-1\n  FROM sys.all_objects ORDER BY [object_id])\nSELECT DATEADD(MONTH, y.rn, @start), COUNT(t.issueDate)\n  FROM y\n  LEFT OUTER JOIN dbo.MyTable AS t\n  ON t.issueDate >= DATEADD(MONTH, y.rn, @start)\n  AND t.issueDate < DATEADD(MONTH, y.rn + 1, @start)\nGROUP BY DATEADD(MONTH, y.rn, @start);\n",
    "label": 1
  },
  {
    "text_1": "how to create index with accent in MySQL",
    "text_2": "mysql> ALTER TABLE verbs COLLATE latin1_general_cs;\n",
    "label": 1
  },
  {
    "text_1": "How to add a column to a table from another table in Mysql?",
    "text_2": "ALTER TABLE table1 ADD COLUMN Age TINYINT UNSIGNED DEFAULT 0;\n",
    "label": 1
  },
  {
    "text_1": "Querying for Consecutive Rows with Certain Characteristics",
    "text_2": "\nleft join (\n    select cur.userid, cur.id\n    from #bingo cur\n    left join #bingo prev \n        on cur.userid = prev.userid\n        and prev.id < cur.id\n        and not exists(\n            select * \n            from #bingo inbetween \n            where prev.userid = inbetween.userid \n            and prev.id < inbetween.id \n            and inbetween.id < cur.id)\n    where cur.winner = 1\n    and IsNull(prev.winner,0) = 0\n) nexthead \n    on nexthead.userid = b.userid \n    and head.id < nexthead.id \n    and nexthead.id <= b.id\nwhere nexthead.id is null \nand b.winner = 1\ngroup by head.userid, head.id\n",
    "label": 1
  },
  {
    "text_1": "PHP: Parse all data from mysql where the 3rd and 4th digit of the id",
    "text_2": "SELECT *, (hours_a + hours_b + hours_c) totalHours \nFROM weird_table \nWHERE user_id = 9 AND SUBSTRING(id, 3, 6) = '012014'\n",
    "label": 1
  },
  {
    "text_1": "How to pivot the given structure to expected one?",
    "text_2": "DECLARE @sql1 VARCHAR(4000) = ''\nDECLARE @sql2 VARCHAR(4000) = ''\nDECLARE @sql3 VARCHAR(4000) = ''\n\nSELECT @sql1 = \n'SELECT\n    [Object]' + CHAR(10)\n\nSELECT @sql2 = @sql2 +\n'   , MAX(CASE WHEN [Date] = CAST(''' + CONVERT(VARCHAR(8), [Date], 112) + ''' AS DATE) THEN [count] END) AS ' + QUOTENAME([Date]) + CHAR(10)\nFROM(\n    SELECT DISTINCT [Date] FROM tbl\n)t\nORDER BY [Date]\n\nSELECT @sql3 = \n'FROM tbl\nGROUP BY [Object]\nORDER BY [Object]'\n\nPRINT(@sql1 + @sql2 + @sql3)\nEXEC (@sql1 + @sql2 + @sql3)\n",
    "label": 1
  },
  {
    "text_1": "Copying Tables Without Data in MySQL Retaining Auto Increment",
    "text_2": "SET @ai = CONCAT(\"ALTER TABLE foo AUTO_INCREMENT =\", (SELECT AUTO_INCREMENT FROM information_schema.TABLES WHERE TABLE_SCHEMA = 'databasename' AND TABLE_NAME = 'bar'));\n",
    "label": 1
  },
  {
    "text_1": "MySQL relations and query",
    "text_2": "CREATE TABLE meal_restaurant\n(\n  meal_id int not null,\n  restaurant_id int not null,\n  primary key (meal_id, restaurant_id),\n  foreign key (meal_id) references meals (meal_id),\n  foreign key (restaurant_id) references restaurants (id) \n);\n",
    "label": 1
  },
  {
    "text_1": "How to parameterize the set for an IN statement using inline SQL?",
    "text_2": "string[] tags = new string[] { \"Subway\",\"A & W\",\"Pizzahut\" };\nstring cmdText = \n    \"SELECT CompanyId FROM CompanyTable WHERE CompanyName IN ({0})\";\n\nstring[] paramNames = tags.Select(\n    (s, i) => \"@tag\" + i.ToString()\n).ToArray();\n\nstring inClause = string.Join(\",\", paramNames);\nusing (SqlCommand cmd = new SqlCommand(string.Format(cmdText, inClause))) {\n    for(int i = 0; i < paramNames.Length; i++) {\n       cmd.Parameters.AddWithValue(paramNames[i], tags[i]);\n    }\n}\n",
    "label": 1
  },
  {
    "text_1": "How to do an update based on a count - SQL (postgres)",
    "text_2": "with T(id, user_id, created, processed, rk) as (\n  select\n    id, user_id, created, processed,\n    row_number() over (\n      partition by user_id\n      order by created desc, id\n    )\n  from entries\n)\n  update T set\n    processed = true\n  where rk > 3;\n",
    "label": 1
  },
  {
    "text_1": "SQL Query Returns DataType Mismatch in Query - Why?",
    "text_2": "Public Function getState(description As String) As String\n",
    "label": 1
  },
  {
    "text_1": "Does ServiceStack.OrmLite.JoinSqlBuilder allow to build a simple query",
    "text_2": "//Modify Table1 to include a reference to Table2 \npublic class Table1\n{\n    public string Column1 { get; set; }\n    public string Column2 { get; set; }\n\n    [ServiceStack.DataAnnotations.Ignore]\n    public Table2 Table2 { get; set; }\n}\n\nvar ev = OrmLiteConfig.DialectProvider.ExpressionVisitor<Table1>();\nev.PrefixFieldWithTableName = false;\n\nvar jn = new JoinSqlBuilder<Table1, Table2>();\njn = jn.Join<Table1, Table2>(s => s.Column1, d => d.Field1);\nev.Where(x => x.Column1 == \"1\");\nev.Where(x => x.Column2 == \"2\" || ((Table2)x.Table2).Column3 == \"3\"); //do cast to avoid InvalidOperationException\n\nvar sql = jn.ToSql() + ev.WhereExpression; \n",
    "label": 1
  },
  {
    "text_1": "How to get counts among tree-structured records with a single SQL query",
    "text_2": "INNER JOIN middle AS mred ON mred.top_id = top.id\n",
    "label": 1
  },
  {
    "text_1": "Test the sequentiality of a column with a single SQL query",
    "text_2": "IF EXISTS (SELECT set_ID\n             FROM mytable\n            GROUP BY set_ID\n           HAVING MAX(n) - MIN(n) + 1 > COUNT(n)\n          )\n    ROLLBACK\n",
    "label": 1
  },
  {
    "text_1": "Updating table with the closest value from a lookup matrix",
    "text_2": "vx  vz  v\n1.8 2.8 NULL  -- x = 2, z = 3\n1.3 1.5 NULL  -- x = 1, z = 2\n",
    "label": 1
  },
  {
    "text_1": "Create tables with Many-to-One relation in Postgresql",
    "text_2": "CREATE TABLE Products_in_shop (\n   shop_id INTEGER,\n   product_id INTEGER\n)\n",
    "label": 1
  },
  {
    "text_1": "Filtering Nulls from multiple columns",
    "text_2": "DECLARE @a TABLE(id INT, DateTime1 DATETIME);\nDECLARE @b TABLE(id INT, DateTime2 DATETIME);\n\nINSERT @a SELECT 1, '20120602' ; INSERT @b SELECT 1, NULL;\nINSERT @a SELECT 2, NULL       ; INSERT @b SELECT 2, '20120605';\nINSERT @a SELECT 3, '20120604' ; INSERT @b SELECT 3, '20120605';\nINSERT @a SELECT 4, NULL       ; INSERT @b SELECT 4, NULL;\nINSERT @a SELECT 5, '20120602' ; INSERT @b SELECT 9, NULL;\nINSERT @a SELECT 6, NULL       ; INSERT @b SELECT 10, '20120605';\nINSERT @a SELECT 7, '20120604' ; INSERT @b SELECT 11, '20120605';\nINSERT @a SELECT 8, NULL       ; INSERT @b SELECT 12, NULL;\n\nSELECT * FROM @a AS a LEFT OUTER JOIN @b AS b\nON a.id = b.id\nWHERE COALESCE(a.DateTime1, b.DateTime2) IS NOT NULL;\n\nSELECT * FROM @a AS a LEFT OUTER JOIN @b AS b\nON a.id = b.id\nWHERE a.DateTime1 IS NOT NULL OR b.DateTime2 IS NOT NULL;\n",
    "label": 1
  },
  {
    "text_1": "How to select same value(string) from two tables",
    "text_2": "Select table_1.*\nfrom table_1\nwhere name in (\n                Select Table_2.name\n                from Table_2\n              )\n",
    "label": 1
  },
  {
    "text_1": "Need to concatenate multiple rows into single cell using SQL?",
    "text_2": "IT_ID GROUPS\n----- --------------------\nalv77 USER\nafz23 ADMIN,QA\njaj23 USER\nmav45 ADMIN\nklo26 PROD,ADMIN,QA\n",
    "label": 1
  },
  {
    "text_1": "SQL Server 2008R2 from Table to edges for Graph",
    "text_2": "╔═══════╦═══════╗\n║ Name  ║ Name  ║\n╠═══════╬═══════╣\n║ John  ║ Mark  ║\n║ John  ║ Peter ║\n║ John  ║ Mia   ║\n║ Mark  ║ Peter ║\n║ Mark  ║ Mia   ║\n║ Peter ║ Mia   ║\n║ John  ║ Billy ║\n╚═══════╩═══════╝\n",
    "label": 1
  },
  {
    "text_1": "oracle SQL: improve connect by clause",
    "text_2": "SQL> with Table_1(id, column1) as (\n  2    select 10, 'abc, kdm' from dual\n  3    union\n  4    select 20, 'xyz, lop, nkk' from dual\n  5  )\n  6  select id, regexp_substr(column1,'[^,]+', 1, level) from Table_1\n  7  connect by regexp_substr(column1, '[^,]+', 1, level) is not null;\n\n        ID REGEXP_SUBSTR\n---------- -------------\n        10 abc\n        10  kdm\n        20  nkk\n        20  lop\n        20  nkk\n        20 xyz\n        10  kdm\n        20  nkk\n        20  lop\n        20  nkk\n\n10 rows selected.\n\nSQL>\n",
    "label": 1
  },
  {
    "text_1": "Externalizing where condition in a sql query",
    "text_2": "DELETE \n   T\nFROM \n    MYSCHEMA.MY_TABLE T \n    INNER JOIN PROD_NAME P\n      ON LEFT(T.PROD, LEN(P.PROD_NAM)) = P.PROD_NAME\n",
    "label": 1
  },
  {
    "text_1": "SQL Server - splitting a value over several months without a cursor",
    "text_2": "create table T(\n  id int,\n  dat datetime,\n  val int,\n  primary key(id, dat)\n);\n\ninsert into T values (1, '20140101', 100);\ninsert into T values (2, '20140101', 99);\ninsert into T values (3, '20140201', 274);\ninsert into T values (4, '20140301', 300);\n\ndeclare @chunk int = 100;\nselect\n  id,\n  dateadd(month,n-1,dat) as dat,\n  case when n=max(n) over (partition by id) then (val-1)%@chunk+1 else @chunk end as val\nfrom T\ncross apply (\n  select n from Nums\n  where n <= ceiling((val+@chunk-1)/@chunk)\n) as N(n);\n",
    "label": 1
  },
  {
    "text_1": "Stored Procedure Writing",
    "text_2": "Create Procedure usp_PocedureName --give proper procedure name\n@PAN_No int, -- not sure what the exact data types\n@PolicyNo int,\n@ClientID int\n\nAS\n\nSelect Coulumn1, Coulumn2,Coulumn3 -- Select whatever the columns you need\nFrom Client_ details Client\n     Inner Join Contract_Details Contract ON Contract.ClientID =Client.ClientID\nWhere Client.ClientID=@ClientID \n      AND (PAN_No=@PAN_No OR PolicyNo =@PolicyNo)\n",
    "label": 1
  },
  {
    "text_1": "SQL Get previous stocks based on modified dates",
    "text_2": "|       Date | PRODUCT_ID | STOCK_QTY |\n|------------|------------|-----------|\n| 2015-03-14 |          A |        18 |\n| 2015-03-14 |          B |        10 |\n| 2015-03-15 |          A |        28 |\n| 2015-03-15 |          B |        10 |\n| 2015-03-16 |          A |        28 |\n| 2015-03-16 |          B |        10 |\n| 2015-03-17 |          A |        30 |\n| 2015-03-17 |          B |        15 |\n| 2015-03-18 |          A |        30 |\n| 2015-03-18 |          B |        15 |\n| 2015-03-19 |          A |        20 |\n| 2015-03-19 |          B |        15 |\n",
    "label": 1
  },
  {
    "text_1": "SQL Server - Delete Values after Decimal (non-int field)",
    "text_2": "SELECT CAST(ColumnName AS DECIMAL(18,3))\n",
    "label": 1
  },
  {
    "text_1": "join tables in a SQL database",
    "text_2": "SELECT p.ProductID FROM dbo.Product p\nINNER JOIN dbo.ProuductSection ps ON (p.ProductID = ps.ProductID)\nWHERE ps.SectionID IN (5345, 5346)\n",
    "label": 1
  },
  {
    "text_1": "How to write the sql select query for this?",
    "text_2": "SELECT COUNT(*), Rating FROM mytable WHERE Code = 10 GROUP BY Rating\n",
    "label": 1
  },
  {
    "text_1": "SQL database structure for Like and DisLike",
    "text_2": "   SELECT topic FROM likesdislikes WHERE userName = 'user' AND isLike = true;\n",
    "label": 1
  },
  {
    "text_1": "Get Maximum Record even if its Null",
    "text_2": "CREATE TABLE UserTransaction (\nUserTransactionId int,\nUserId int,\nTransactionTypeId int\n);\n",
    "label": 1
  },
  {
    "text_1": "Stop (long) running SQL query in PostgreSQL when session or requests no longer exist?",
    "text_2": "SELECT pg_terminate_backend(procpid);\n",
    "label": 1
  },
  {
    "text_1": "Oracle Index with multiple Columns querying on single column",
    "text_2": "select last_analyzed from dba_tables where table_name = 'TABLE_Y';\n",
    "label": 1
  },
  {
    "text_1": "Fastest way to perform nested bulk inserts with scope_identity() usage?",
    "text_2": "CREATE TYPE udt_base As Table\n(\n    base_id int,\n    base_temp_id int,  -- NOTE: when populating the table valued parameters, this column holds the id used to connect the base and related tables.\n\n    base_data int  \n);\n\nCREATE TYPE udt_related As Table\n(\n    related_base_id int,\n    related_data int\n);\n\nCREATE TYPE udt_idMap as table\n(\n    temp_id int,\n    id int\n)\nGO\n",
    "label": 1
  },
  {
    "text_1": "Creating a query that uses many to many tables",
    "text_2": "Paper ID  Paper Name  Publication Date  Co-author ...\nPaper_1   asd         2013              Author_2\nPaper_1   asd         2013              Author_5\nPaper_1   asd         2013              Author_7\n",
    "label": 1
  },
  {
    "text_1": "Creating a view that shows the balance of accounts on every day, when the \"balance\" table only has entries on those days where the balance changes",
    "text_2": "SELECT * FROM DATES d, BALANCE b\nWHERE d.date >= b.date\n      AND b.date >= ALL (SELECT b1.date FROM BALANCE b1\n                    WHERE b1.date <= d.date\n                          AND b1.account = b.account)\n",
    "label": 1
  },
  {
    "text_1": "sql select most recent datetime for each member",
    "text_2": "SELECT \ncm.FNAME, \ncm.LNAME, \ncl.entry_access_point, \ncl.date_entered, \ncl.res_id, \ndbo.HourMinuteSecond(cl.date_entered, getUTCDate())[Day:Hour:Minute:Second]\nFROM cred.members cm, cred.allocate_log cl\nWHERE cm.member_id = cl.member_id AND\n    cl.date_exited IS NULL AND \n    cl.evt_id = @eventId AND\n    date_entered IN (\n        SELECT max(cl.date_entered)\n        FROM cred.allocate_log cl, cred.members cms\n        WHERE cl.member_id = cms.member_id and cms.member_id = cm.member_id)\nORDER BY cl.date_entered\n",
    "label": 1
  },
  {
    "text_1": "Linear Regression analysis for Date column in SQL Server",
    "text_2": "CREATE TYPE [dbo].[DateRegressionDataTableType] AS TABLE(\n    [x] [date] NOT NULL,\n    [y] [float] NOT NULL\n)\nGO\n",
    "label": 1
  },
  {
    "text_1": "Call stored procedure with table-valued parameter from java",
    "text_2": "EXECUTE [dbo].[GetLawyers] '12345', '1,4'\n",
    "label": 1
  },
  {
    "text_1": "Oracle regular expression split string from last occurence",
    "text_2": "WITH t ( VAL ) AS (\n  SELECT 'my_new_table_2015_06_31' FROM DUAL UNION ALL\n  SELECT 'my_new_table_temp_2016_06_31' FROM DUAL\n)\nSELECT SUBSTR( val, 1,        pos1 - 1        ) AS col4,\n       SUBSTR( val, pos1 + 1, pos2 - pos1 - 1 ) AS col3,\n       SUBSTR( val, pos2 + 1, pos3 - pos2 - 1 ) AS col2,\n       SUBSTR( val, pos3 + 1                  ) AS col1\nFROM   (\n  SELECT val,\n         INSTR( val, '_', -1, 1 ) AS pos3,\n         INSTR( val, '_', -1, 2 ) AS pos2,\n         INSTR( val, '_', -1, 3 ) AS pos1\n  FROM   t\n);\n",
    "label": 1
  },
  {
    "text_1": "SQL Server Transpose Data - Pivot Possibly?",
    "text_2": "SrcId, ColVal, Columz\n1,32,AGE\n1,London,City\n1,2013-01-01,Date\n2,35,AGE\n2,Lagos,City\n2,2013-02-01,Date\n3,36,AGE\n3,NY,City\n3,2013-03-01,Date\n",
    "label": 1
  },
  {
    "text_1": "Getting previous value + new value as a column?",
    "text_2": "select t.am, t.m, sum(tprev.m) as cumsum\nfrom t join\n     t tprev\n     on tprev.am <= t.am\ngroup by t.am, t.m\n",
    "label": 1
  },
  {
    "text_1": "How can I get Oracle to have a better execution plan for this query?",
    "text_2": "with cte_last_trans as (\n  select id\n  from   (select   id\n          from     trans\n          where    id > (select max(id)-100 from trans)\n          order by id desc)\n  where  rownum <= 100)\nselect a.id,\n       b.field_one,\n       c.field_two\nfrom   cte_last_trans a,\n       table_two      b,\n       table_three    c\nwhere  a.id = b.id\nand    a.id = c.id\n",
    "label": 1
  },
  {
    "text_1": "SQL Query; How to get only records with two matching fields",
    "text_2": "select * \nfrom YourTable t\njoin (select origin, destination\n      from YourTable\n      group by origin, destination\n      having count(*) > 1) m\non t.origin = m.origin and t.destination = m.destination\n",
    "label": 1
  },
  {
    "text_1": "ColdFusion 9 - SQL Statement - Boolean Logic",
    "text_2": "WHERE   DateColumn = #RequestedDate#\nAND     StartTimeColumn < #RequestedEndTime#\nAND     EndTimeColumn > #RequestedStartTime#\n",
    "label": 1
  },
  {
    "text_1": "SQL: Selecting previously unseen records by a given user",
    "text_2": "p.author_id IS DISTINCT FROM $author_id \n",
    "label": 1
  },
  {
    "text_1": "Pivot on Oracle 10g",
    "text_2": "select *\nfrom temp\npivot\n(\n  sum(cnt)\n  for tp in ('T1', 'T2', 'T3')\n) piv\n",
    "label": 1
  },
  {
    "text_1": "TSQL increment a column and start over based on another column",
    "text_2": "CREATE VIEW your_view AS\n  SELECT t.cola,\n         t.colb,\n         ROW_NUMBER() OVER(PARTITION BY t.cola\n                               ORDER BY t.colc) AS colc\n    FROM YOUR_TABLE t\n",
    "label": 1
  },
  {
    "text_1": "One table which refers to several other tables. Is this a good design?",
    "text_2": "SELECT UserID from UsersInArticles WHERE ArticleID = 123\n",
    "label": 1
  },
  {
    "text_1": "Perform wildcard search of all (displayed) model fields in MVC?",
    "text_2": "public ActionResult SearchAssets(string searchCriteria)\n    { \n        fillPagingIntervalList();\n        var assetSearchResults = db.ENTITY_COLLECTION.ToList().Where(m => m.ID.ToString() == searchCriteria ||\n        m.Model.ToString() == searchCriteria ||\n        m.COST.ToString() == searchCriteria ||\n        // etc. -- ALL FIELDS\n        ).FirstOrDefault();\n        var assetCount = db.ENTITY_COLLECTION.ToList().Count();\n        return View(assetSearchResults);\n    }\n",
    "label": 1
  },
  {
    "text_1": "How sql with-recursive statement interpreted?",
    "text_2": "WITH RECURSIVE t(n) AS (\n  VALUES (1)\n  UNION ALL\n  SELECT n+1 FROM t WHERE n < 100\n)\nSELECT * FROM t;\n",
    "label": 1
  },
  {
    "text_1": "AJAX Autocomplete Query from a MYSQL Table",
    "text_2": "$(function(){  //runs on page load\n\n$.ajax({\n  type: \"POST\",\n  url: \"/searchlist/\", //server function that returns the search list\n  data: '',\n  dataType: \"json\",\n  success: function(json){\n    search_choices = json.list; // search option list\n    $(\"input#searchbox\").autocomplete(search_choices, {\n                               max: 4,\n                               scroll: false,\n                               autoFill: true,\n                               multiple: true,\n                               matchContains: true,\n                               multipleSeparator: \" \",\n                               width: 180\n                             });\n\n  }\n});\n\n});\n",
    "label": 1
  },
  {
    "text_1": "Should I relate all of my MySQL tables to each other?",
    "text_2": "SELECT `time_records`.* FROM `time_records`\n    JOIN `line_items` ON `line_items`.`id` = `time_records`.`line_item_id`\n    JOIN `reports` ON `reports`.`id` = `line_items`.`id`\n    JOIN `clients` ON `clients`.`id` = `reports`.`client_id`\n    WHERE `client_id` = ?;\n",
    "label": 1
  },
  {
    "text_1": "Comma-Delimited List with \"and\" concatenated before Last Element in Oracle SQL",
    "text_2": "select regexp_replace(listagg(name, ', ') within group (order by name), ',([^,]+)$', ' and\\1') from (\n  select 'First' name from dual\n  union all select 'Second' from dual\n  union all select 'Third' from dual\n);\n",
    "label": 1
  },
  {
    "text_1": "How to truncate a row based on column data?",
    "text_2": "DELETE FROM table WHERE characterid IS NULL\n",
    "label": 1
  },
  {
    "text_1": "Sum rows by a value and remove duplicate rows in Mysql",
    "text_2": "update table t join\n       (select word, docnum, sum(frequency) as freq\n        from table t\n        group by word, docnum\n       ) tsum cross join\n       (select @rn := -1) hack\n    t.frequency = tsum.freq + (@rn := @rn + 1);\n\ndelete t\n    from table t\n    where not exists (select 1\n                      from table t2\n                      where t2.word = t.word and\n                            t2.docnum = t.docnum and\n                            t2.frequency > t.frequency\n                     );\n",
    "label": 1
  },
  {
    "text_1": "Return one row for each ID based on date column (SQL)",
    "text_2": "SELECT \n  Table1.Name, Table2.Rating\nFROM\n  table1 \nINNER JOIN \n  table2 ON table1.Table1ID = table2.Table2ID\nWHERE\n  inserteddate = (SELECT MAX(InsertedDate) \n                    FROM Table2 t2 \n                   WHERE t2.Table2ID = Table2.Table2ID)\n",
    "label": 1
  },
  {
    "text_1": "aggregating Data by Time Interval in Oracle SQL",
    "text_2": "       (Case When Minutes <= 15\n             Then To_Timestamp(Calendar_Date &' '&'0'&Hours&':15', 'dd-mon-yy hh24:mi')\n             When Minutes <= 30\n             Then To_Timestamp(Calendar_Date &' '&'0'&Hours&':30', 'dd-mon-yy hh24:mi')\n             When Minutes <= 45\n             Then To_Timestamp(Calendar_Date &' '&'0'&Hours&':45', 'dd-mon-yy hh24:mi')\n             else To_Timestamp(Calendar_Date &' '&'0'&Hours&':60', 'dd-mon-yy hh24:mi')\n       End)\n",
    "label": 1
  },
  {
    "text_1": "A single table to keep reports for different type of information",
    "text_2": "Report\n------\nReportId                     \nInformationId              --- which message, article, etc is reported\nReporterId                 --- who reports it\nReportType                 --- what type of abuse it is (racist, etc.)\nDateOfReport \nExplanation\nPRIMARY KEY (ReportId)      \nFOREIGN KEY InformationId\n  REFERENCES Information (InformationId)\nFOREIGN KEY ReporterId\n  REFERENCES Person (PersonId)              --- the User table\n",
    "label": 1
  },
  {
    "text_1": "MySQL indexes performance on huge tables",
    "text_2": "SELECT MAX(YEAR(p.birthdate)) as max_year, wi.department as department\nFROM person p INNER JOIN\n     works_in wi\n     ON wi.person_id = p.id\nWHERE p.birthdate IS NOT NULL\nGROUP BY wi.department;\n",
    "label": 1
  },
  {
    "text_1": "Display the name of the maximum salary holder (WITHOUT USING A SUBQUERY)",
    "text_2": "CREATE VIEW emp_ordered AS\nSELECT *\n FROM emp\nORDER BY salary desc;\n",
    "label": 1
  },
  {
    "text_1": "Setup Database before run ui coded tests on Visual Studio 2010",
    "text_2": "   internal static object FireSqlStatement(string sqlStatement)\n        {\n            object result = null;\n            using (var cn = new SqlConnection(ConfigurationManager.ConnectionStrings[connectionString].ConnectionString))\n            {\n                cn.Open();\n\n                var cmd = new SqlCommand\n                {\n\n                    CommandText = sqlStatement,\n                    CommandType = CommandType.Text,\n                    Connection = cn\n                };\n                result = cmd.ExecuteScalar();\n                cmd.Dispose();\n\n                cn.Close();\n            }\n            return result;\n        }\n",
    "label": 1
  },
  {
    "text_1": "Simple way to print structured SQL SELECT in bash",
    "text_2": "-table, -t\n\n       Display output in table format. This is the default for interactive use, but can be used to produce table output in batch mode.\n",
    "label": 1
  },
  {
    "text_1": "How to get file extension of file as a result of sql query?",
    "text_2": "SELECT SUBSTR('Test.Document.doc', INSTR('Test.Document.doc', '.',-1)) \nFROM dual; \n",
    "label": 1
  },
  {
    "text_1": "sql NOT with ALL operator",
    "text_2": "SELECT id, name FROM tablex WHERE id >= (SELECT min(id) FROM tabley)\n",
    "label": 1
  },
  {
    "text_1": "a better understanding of Schema in SQLServer",
    "text_2": "Select * from Employee\n",
    "label": 1
  },
  {
    "text_1": "How to obtain summary rows where each summary is dependent on another column?",
    "text_2": "select item_id, \n       code, \n       sum(lot_size) total_lot\nfrom inventory_items \ngroup by item_id, code\nhaving sum(lot_size) > (case \n                         when code = 'KEYS' then 6\n                         when code = 'LOCK' then 4\n                        end)\n",
    "label": 1
  },
  {
    "text_1": "How to specify a foreign key?",
    "text_2": "belongs_to :poster, :class_name => 'User'\n",
    "label": 1
  },
  {
    "text_1": "query to find specific word in a cloumn using oracle database",
    "text_2": "Select col1, col2 from table1\nwhere INSTR(col1,'word1') > 0\n",
    "label": 1
  },
  {
    "text_1": "dynamic databases created by users - django",
    "text_2": "from fabric import api\n\ndef django_start_project(project_name):\n    api.run('mkproject %s' % project_name)  # Assumes you have virtualenvwrapper\n    with api.prefix('workon %s' % project_name):\n        api.run('pip install django')\n        api.run('django-admin.py startproject')\n",
    "label": 1
  },
  {
    "text_1": "How to translate Oracle package to SQL Server?",
    "text_2": "DECLARE @params xml = (SELECT dbo.uf_get_parms(12))\n",
    "label": 1
  },
  {
    "text_1": "Oracle SQL Group By if",
    "text_2": "SELECT  TESTID,\n        REGEXP_REPLACE( \n          LISTAGG( SITE, ', ' )\n            WITHIN GROUP( ORDER BY SITE ),\n          '([^, ]+)(, \\1)+($|, )',\n          '\\1\\3'\n        ) AS SITES, \n        MAX( LATEST_READ ) AS LATEST_READ,\n        SUM(READ_COUNT) AS Total_Read_Count\nFROM    FILE_USAGE_LOG \nGROUP BY\n        TESTID\nHAVING  COUNT( CASE FILE_ORIGIN_ID WHEN 2 THEN NULL ELSE 1 END ) > 0\nUNION ALL\nSELECT  TESTID,\n        SITE,\n        LATEST_READ,\n        READ_COUNT\nFROM    FILE_USAGE_LOG l\nWHERE   FILE_ORIGIN_ID = 2\nAND     NOT EXISTS ( SELECT 'X'\n                     FROM   FILE_USAGE_LOG x\n                     WHERE  x.TESTID      = l.TESTID\n                     AND    x.FILE_ORIGIN_ID <> 2\n                   )\nORDER BY 1,2\n",
    "label": 1
  },
  {
    "text_1": "XMLType pl/sql add child",
    "text_2": "SQL> create table xml_children (\n  2    xml_data xmltype\n  3  );\n\nTable created.\n\n\nSQL> ed\nWrote file afiedt.buf\n\n  1  insert into xml_children\n  2   values( '<DATA>\n  3    <CHILDRENS>\n  4      <CHILDRENS_DEF lname=\"smith\">\n  5        <CHILD_KOL no=\"1\" name=\"Id\" desc=\"Id\" typ=\"NUMBER\"/>\n  6        <CHILD_KOL no=\"2\" name=\"Fname\" desc=\"Fname\" typ=\"VARCHAR2\"/>\n  7      </CHILDRENS_DEF>\n  8      <CHILDRENS_DATA>\n  9        <CHILD_DATA no=\"1\">\n 10          <CHILD_COL_VALUE no=\"1\" name=\"Id\">1</CHILD_COL_VALUE>\n 11          <CHILD_COL_VALUE no=\"2\" name=\"Fname\">Christopher</CHILD_COL_VALUE>\n 12        </CHILD_DATA>\n 13        <CHILD_DATA no=\"2\">\n 14          <CHILD_COL_VALUE no=\"1\" name=\"Id\">1</CHILD_COL_VALUE>\n 15          <CHILD_COL_VALUE no=\"2\" name=\"Fname\">Alice</CHILD_COL_VALUE>\n 16        </CHILD_DATA>\n 17        <CHILD_DATA no=\"3\">\n 18          <CHILD_COL_VALUE no=\"1\" name=\"Id\">1</CHILD_COL_VALUE>\n 19          <CHILD_COL_VALUE no=\"2\" name=\"Fname\">John</CHILD_COL_VALUE>\n 20        </CHILD_DATA>\n 21      </CHILDRENS_DATA>\n 22    </CHILDRENS>\n 23    <CHILDRENS>\n 24      <CHILDRENS_DEF lname=\"mushroom\">\n 25        <CHILD_KOL no=\"1\" name=\"Id\" desc=\"Id\" typ=\"NUMBER\"/>\n 26        <CHILD_KOL no=\"2\" name=\"Fname\" desc=\"Fname\" typ=\"VARCHAR2\"/>\n 27      </CHILDRENS_DEF>\n 28      <CHILDRENS_DATA>\n 29        <CHILD_DATA no=\"1\">\n 30          <CHILD_COL_VALUE no=\"1\" name=\"Id\">1</CHILD_COL_VALUE>\n 31          <CHILD_COL_VALUE no=\"2\" name=\"Fname\">Arthur</CHILD_COL_VALUE>\n 32        </CHILD_DATA>\n 33      </CHILDRENS_DATA>\n 34    </CHILDRENS>\n 35* </DATA>' )\nSQL> /\n",
    "label": 1
  },
  {
    "text_1": "GETUTCDATE Function",
    "text_2": "DECLARE @local_time DATETIME;\nDECLARE @gmt_time DATETIME;\nSET @local_time = GETDATE();\nSET @gmt_time = GETUTCDATE();\nSELECT 'Server local time: '\n   + CONVERT(VARCHAR(40),@local_time);\nSELECT 'Server GMT time: '\n   + CONVERT(VARCHAR(40),@gmt_time);\nSELECT 'Server time zone: '\n   + CONVERT(VARCHAR(40),\n      DATEDIFF(hour,@gmt_time,@local_time));\nGO\n",
    "label": 1
  },
  {
    "text_1": "I cannot think of a valid SQL Query for solving this",
    "text_2": "SELECT c.Name\nFROM \n  (SELECT id, Name\n   FROM companies\n   WHERE city = \"your_city\" AND country = \"your_country\" ) AS c\n  INNER JOIN tagsForCompany AS tc ON c.id = tc.Company\n  INNER JOIN tags AS t ON t.id = tc.TID\nWHERE t.Name REGEXP 'your_tag'\n",
    "label": 1
  },
  {
    "text_1": "How to set identity seed value using variable in SQL Server",
    "text_2": "SELECT Row_Number()\n         OVER (\n           ORDER BY ID DESC) AS ID,\n       Items\nINTO   #temptable\nFROM   yourtable \n",
    "label": 1
  },
  {
    "text_1": "Retrieve data from a For XML subquery",
    "text_2": "<myroot>\n    <Test>\n         <A>1</A><B>11</B>\n    </Test>\n    <Test>\n         <A>4</A><B>44</B>\n    </Test>\n    <Test>\n         <A>5</A><B>55</B>\n    </Test>\n</myroot>\n",
    "label": 1
  },
  {
    "text_1": "How to count the number of occurrences of an ID from a different table",
    "text_2": "select fighter1 as Fighter, nz(wincount,0) as Wins\nfrom\n(\n    select distinct fighter1 from\n    (\n        select fighter1 from fightSchedule \n        union select fighter2 from fightSchedule \n    )\n) as fighters\nleft join\n(\n    select winner, count(winner) as wincount\n    from fightSchedule\n    group by winner\n) as winners\non fighters.fighter1 = winners.winner\n",
    "label": 1
  },
  {
    "text_1": "SQL query - aggregating by date",
    "text_2": "SQL FIDDLE:\n|         DATE(COMPLETIONDATE) | COMPLETIONRATE |\n-------------------------------------------------\n| April, 28 2013 00:00:00+0000 |        33.3333 |\n|   May, 05 2013 00:00:00+0000 |        66.6667 |\n|   May, 06 2013 00:00:00+0000 |        66.6667 |\n|   May, 07 2013 00:00:00+0000 |            100 |\n|   May, 08 2013 00:00:00+0000 |             50 |\n",
    "label": 1
  },
  {
    "text_1": "SQL Server Select Insert",
    "text_2": " insert [table]\n select\n           [a]\n         , [b]\n         , 'newCValue'\n         , [d]\n     from\n         [table]\n",
    "label": 1
  },
  {
    "text_1": "TSQL Null data to '' replace",
    "text_2": "SELECT\n    CASE \n        WHEN e_firedate IS NULL THEN ''\n        ELSE CONVERT(VARCHAR(23), e_firedate, 121)\nEND\nFROM et_pics\n",
    "label": 1
  },
  {
    "text_1": "Set PRAGMA encoding =\"UTF-16\" for main database in sqlite",
    "text_2": ".quit\n",
    "label": 1
  },
  {
    "text_1": "How to return an array of values in output parameter in Stored Proc",
    "text_2": "CREATE TABLE MyTable(\n    ID  INT IDENTITY(1, 1),\n    IDType  INT,\n    B   VARCHAR(6)\n)\nINSERT INTO MyTable(IDType, B) VALUES\n(2, 'Rev'), (2, 'Rev'),\n(2, 'Rev'), (1, 'Rev'),\n(1, 'Rev'), (1, 'Rev'),\n(1, 'NotRev'), (1, 'NotRev');\n",
    "label": 1
  },
  {
    "text_1": "SQL SUM operation of multiple subqueries",
    "text_2": "SELECT t.*,\n       (SELECT SUM(fare) \n          FROM passenger\n         WHERE ticket_id = t.id) +\n       (SELECT SUM(cost) \n          FROM service s JOIN passenger p\n            ON s.passenger_id = p.id\n         WHERE p.ticket_id = t.id) grand_total\n  FROM ticket t\n",
    "label": 1
  },
  {
    "text_1": "Including default values on dynamic pivot",
    "text_2": "SELECT *\nFROM (SELECT [Key], \n             RIGHT(CONVERT(NCHAR(10), [Date], 126), 2) AS month_day, \n             [Value] \n      FROM [Metrics]) AS O \nPIVOT (SUM([Value]) FOR month_day IN ([01],[02],[03],[04],[05],[06],[07],[08],[09],\n                                      [10],[11],[12],[13],[14],[15],[16],[17],[18],\n                                      [19],[20],[21],[22],[23],[24],[25],[26],[27],\n                                      [28],[29],[30],[31])) AS P;\n",
    "label": 1
  },
  {
    "text_1": "Diff / Delta script: ideas on streamlining it?",
    "text_2": "SET @sql = 'SELECT INTO * [MIRROR].[dbo].[' + @tableName + '_Staging] from [SERVER-DELTA].[DELTAS].[dbo].[' + @tableName + ']'\nEXEC(@sql)\n",
    "label": 1
  },
  {
    "text_1": "Getting latest record from multiple MySQL Tables based on 2 criteria",
    "text_2": "package_names\n\nid\nname\n",
    "label": 1
  },
  {
    "text_1": "Order SQL request when each row contains id of the next one",
    "text_2": ";WITH route AS\n(\n  SELECT BusLineId, BusStopId, NextBusStopId\n  FROM BusLine_BusStop\n  WHERE IsFirstStop = 1\n  UNION ALL\n  SELECT b.BusLineId, b.BusStopId, b.NextBusStopId\n  FROM BusLine_BusStop b\n  INNER JOIN route r\n          ON r.BusLineId = b.BusLineId\n         AND r.NextBusStopId = b.BusStopId\n  WHERE IsFirstStop = 0 or IsFirstStop is null\n)\nSELECT BusLineId, BusStopId\nFROM route\nORDER BY BusLineId\n",
    "label": 1
  },
  {
    "text_1": "Truncate Vs Drop Temp table",
    "text_2": "╔════╗\n║ id ║\n╠════╣\n║  1 ║\n╚════╝\n",
    "label": 1
  },
  {
    "text_1": "SQL \"select where not in subquery\" returns no results",
    "text_2": "SELECT  *\nFROM    common\nLEFT JOIN\n        table1 t1\nON      t1.common_id = common.common_id\nWHERE   t1.common_id IS NULL\n",
    "label": 1
  },
  {
    "text_1": "How to guarantee only one process picks up a processing task",
    "text_2": "UPDATE tblEmailQueue \nSET statusflag=1 \nOUTPUT DELETED.*\nWHERE statusflag=0;\n",
    "label": 1
  },
  {
    "text_1": "SQL: Date comparison only comparing years",
    "text_2": "where this_date <=  '2016-1-17'\n",
    "label": 1
  },
  {
    "text_1": "MS SQL Store Procedure to Merge Multiple Rows into Single Row based on Variable Table and Column Names",
    "text_2": "  SET @query = '\n  SELECT TOP 0 ' + @cols + ' \n  INTO   ' + @table + '\n  FROM   (SELECT column_name, answer_value \n          FROM   answers \n          WHERE  table_name = ''' + @table + ''') b\n         PIVOT (MAX(answer_value) FOR column_name IN (' + @cols + ' )) p '\n",
    "label": 1
  },
  {
    "text_1": "How can I insert values from SELECT SUM into other table?",
    "text_2": "Using PIVOT (available in SQL Server and Oracle, only):\nSELECT *\nFROM (\n  SELECT accountKonto, amount\n  FROM Buchung\n) t\nPIVOT (\n  SUM(amount) FOR accountKonto IN ([1], [2], [3])\n) AS p\n",
    "label": 1
  },
  {
    "text_1": "Querying XML data from a SQL Server table",
    "text_2": "SELECT\n    Name = xc.value('(NAME)[1]', 'varchar(50)'),\n    CompEnabled = xc.value('(PROPERTIES[@NAME=\"COMP_ENABLED\"]/@VALUE)[1]', 'varchar(10)')\nFROM \n    dbo.YourTable\nCROSS APPLY\n    SC.nodes('/SC_ROOT/COMPONENTS/COMPONENT') AS XT(XC)\nWHERE\n    xc.value('(NAME)[1]', 'varchar(50)') LIKE '%Detection'\n",
    "label": 1
  },
  {
    "text_1": "How can I make this query faster?",
    "text_2": "SELECT 1 \n  FROM DB.TABLE\n WHERE ColumnA = 'VALUE'\n   AND ROWNUM = 1\n",
    "label": 1
  },
  {
    "text_1": "mysql ordering solution: will it work consistantly?",
    "text_2": "SELECT STRAIGHT_JOIN\n      PreQuery.Keyword, \n      s.name as Skill, \n      PreQuery.Score\n   from\n      ( SELECT STRAIGHT_JOIN\n              k.id,\n              k.name Keyword, \n              max( s.Score ) maxScore\n           from\n              jobs_keywords jk\n                 join keywords k \n                    on jk.keyword_id = k.id\n                    join keyword_skills ks\n                       on k.id = ks.keyword_id\n                       join skills s\n                          on ks.skill_id = s.id\n           where \n              jk.job_id = 87293\n           group by \n              k.id,\n              k.name ) PreQuery\n      join keyword_skills ks\n         on PreQuery.id = ks.keyword_id\n         join skills s\n             on ks.skill_id = s.id\n             AND PreQuery.maxScore = s.Score\n   order by \n      PreQuery.Keyword\n",
    "label": 1
  },
  {
    "text_1": "MySQL SELECT MAX of SUM() values",
    "text_2": "SELECT  SUM(scpe.scpe_estemated_days) AS total_days,\n        scp.cpl_startdate\nFROM    studentcourseplanelements scpe INNER JOIN studentcourseplan scp\n            ON scp.cpl_id = scpe.scpe_cpl_id\n        INNER JOIN\n        (SELECT  sd1.student_id, sd1.student_startdate\n         FROM    studentdates sd1\n         WHERE   sd1.student_id = '360'\n         LIMIT 1) sd ON sd.student_id = scp.student_id\nGROUP BY scp.cpl_id\nHAVING SUM(scpe.scpe_estemated_days) = \n    (\n        SELECT MAX(total_days)\n        FROM\n        (\n            SELECT  SUM(scpe.scpe_estemated_days) AS total_days,\n            FROM    studentcourseplanelements scpe INNER JOIN studentcourseplan scp \n                         ON scp.cpl_id = scpe.scpe_cpl_id\n                    INNER JOIN\n                    (SELECT  sd1.student_id, sd1.student_startdate\n                     FROM    studentdates sd1\n                     WHERE   sd1.student_id = '360'\n                     LIMIT 1) sd ON sd.student_id = scp.student_id\n            GROUP BY scp.cpl_id\n        ) s\n    )\n",
    "label": 1
  },
  {
    "text_1": "Why can you only select two columns when using MAX() in an INNER JOIN?",
    "text_2": "select yt.id, max(yt.rev), yt.contents\nfrom YourTable yt    \ngroup by id, contents\n",
    "label": 1
  },
  {
    "text_1": "How do we control dynamic ordering by a Field in a table?",
    "text_2": "+----+------------+----------+\n| id | question   | position |\n+----+------------+----------+\n|  1 | Question 1 |        1 |\n|  2 | Question 2 |        2 |\n|  3 | Question 3 |        3 |\n+----+------------+----------+\n",
    "label": 1
  },
  {
    "text_1": "Dynamic JOIN condition on a Table",
    "text_2": "  Where ColumnName = IsNull(@InParameter, ColumnName) \n",
    "label": 1
  },
  {
    "text_1": "join comma delimited data column",
    "text_2": "select t2.col1, t1.col2\nfrom t2\ninner join t1\n  on t2.col2 = t1.col1\n",
    "label": 1
  },
  {
    "text_1": "Extract date and time from ID",
    "text_2": "select cast(to_timestamp('201503061500389804',\n  'YYYYMMDDHH24MISSFF4') as date) as event_date\nfrom dual;\n\nEVENT_DATE         \n-------------------\n2015-03-06 15:00:38 \n",
    "label": 1
  },
  {
    "text_1": "Mysql Date SELECT",
    "text_2": "mysql> select now();\n+---------------------+\n| now()               |\n+---------------------+\n| 2009-10-06 19:35:36 |\n+---------------------+\n1 row in set (0.03 sec)\n\nmysql> select curdate();\n+------------+\n| curdate()  |\n+------------+\n| 2009-10-06 |\n+------------+\n1 row in set (0.01 sec)\n",
    "label": 1
  },
  {
    "text_1": "How to remove ALL duplicates in a database table and NOT KEEP any of them?",
    "text_2": "create temporary table tempt as \n   select t.*\n   from example t join\n        (select email, name\n         from example\n         group by email, name\n         having count(*) = 1\n        ) tokeep\n        on t.email = tokeep.email and t.name = tokeep.name;\n\ntruncate table example;\n\ninsert into example\n    select * from tempt;\n",
    "label": 1
  },
  {
    "text_1": "SQL - column has DATE, how to fetch data based \"date\" as one of the values in rows?",
    "text_2": "SELECT *\nFROM the_table\nWHERE substr(refid, -19) = '2011-01-17 12:36:38'\n",
    "label": 1
  },
  {
    "text_1": "Combine multiple rows into one based on column value (LIKE)",
    "text_2": "CASE WHEN descr LIKE '%something%' THEN 'prod1'\n     WHEN descr LIKE '%somethingelse%' THEN 'prod2'\n     ....\n     ELSE 'noprod'\nEND\n",
    "label": 1
  },
  {
    "text_1": "Relational Database (1 table per user for owned game)",
    "text_2": "\nCREATE TABLE `users` (\n    `user_id` INT(11) NOT NULL,\n    `user_name` VARCHAR(30) NOT NULL,\n    PRIMARY KEY (`user_id`)\n)\n",
    "label": 1
  },
  {
    "text_1": "Loop through a table in Oracle PL/SQL",
    "text_2": "select person_id, name, sum(score)\n  from your_table\n  where game_id in (1, 2)\n  group by person_id, name\n",
    "label": 1
  },
  {
    "text_1": "how to retrieve records which occurred more than twice in oracle? ",
    "text_2": "select stu_id,s_Name,s_subject \nfrom student \ngroup by stu_id,s_Name,s_subject \nhaving count(stu_id) >2 ;\n",
    "label": 1
  },
  {
    "text_1": "Searching datas with LIKE on result of CASE",
    "text_2": "SELECT *\nFROM\n(\n   SELECT ....,\n          CASE\n            WHEN ACC.ACCOUNT_TYPE = 1 THEN BNK.DESCRIPTION1\n            WHEN ACC.ACCOUNT_TYPE = 2 THEN BNK.DESCRIPTION2\n            WHEN ACC.ACCOUNT_TYPE = 3 THEN BNK.DESCRIPTION3\n            END item\n   FROM tableName\n) x\nWHERE x.Item LIKE '%%'\n",
    "label": 1
  },
  {
    "text_1": "How to join three tables with distinct",
    "text_2": "DECLARE @b TABLE ( BID INT )\nDECLARE @a TABLE ( AID INT )\nDECLARE @ba TABLE\n    (\n      BID INT ,\n      AID INT ,\n      Priority INT\n    )\n\nINSERT  INTO @b\nVALUES  ( 1 ),\n        ( 2 )\n\nINSERT  INTO @a\nVALUES  ( 1 ),\n        ( 2 ),\n        ( 3 ),\n        ( 4 )\n\nINSERT  INTO @ba\nVALUES  ( 1, 1, 1 ),\n        ( 1, 2, 2 ),\n        ( 2, 1, 1 ),\n        ( 2, 2, 2 )\n\n\nSELECT  *\nFROM    @b b\n        OUTER APPLY ( SELECT TOP 1\n                                a.*\n                      FROM      @ba ba\n                                JOIN @a a ON a.AID = ba.AID\n                      WHERE     ba.BID = b.BID\n                      ORDER BY  Priority\n                    ) o\n",
    "label": 1
  },
  {
    "text_1": "How does the FROM side of an UPDATE relate to the table targetted for UPDATE?",
    "text_2": "UPDATE fromemailaddress f\nSET    call = true \nFROM  (\n   SELECT fromemailaddress\n   FROM   email \n   WHERE  subject ILIKE '%tester%'\n   ) e\nWHERE  e.fromemailaddress = f.fromemailaddress;\n",
    "label": 1
  },
  {
    "text_1": "LOAD DATA from CSV file where doublequote was used as the escape character",
    "text_2": "LOAD DATA\n  LOCAL INFILE 'temp-1.csv'\n  INTO TABLE person\n  FIELDS\n    TERMINATED BY ','\n    ENCLOSED BY '\"'\n    ESCAPED BY ''\n  LINES\n    TERMINATED BY '\\n'\n  IGNORE 1 LINES\n;\n",
    "label": 1
  },
  {
    "text_1": "Querying SQL Server / Oracle Database Table Data - Identity Column",
    "text_2": "select t.name as tableName, c.name as columnName, c.is_identity \n    from sys.columns c\n        inner join sys.tables t\n            on c.object_id = t.object_id\n    where t.name = 'YourTable'\n        and c.name = 'YourColumn'\n",
    "label": 1
  },
  {
    "text_1": "Creating \"complex forms\" in FileMaker - is it even possible?",
    "text_2": "FORM\n--------\nContactSearch\ncContactMatch = Calculation, If(isEmpty(ContactSearch) ; \"ALL\" ; ContactSearch)\nEventSearch\ncEventMatch = Calculation, If(isEmpty(EventSearch) ; \"ALL\" ; EventSearch)\n",
    "label": 1
  },
  {
    "text_1": "SQL filter out duplicated from a query",
    "text_2": "select sched_ship, loc_desc, bag_no, lotnumber\nfrom (SELECT sched_ship, loc_desc, bag_no, lotnumber,\n             row_number() over (partition by bag_no order by sched_ship asc) as seqnum\n      FROM [My-Table]\n      WHERE loc_no LIKE '171' AND cust_name NOT LIKE 'PCI' AND pci_pn NOT LIKE '%TEST%'\n     ) t\nwhere seqnum = 1\nORDER BY sched_ship;\n",
    "label": 1
  },
  {
    "text_1": "User sessions based on user activity",
    "text_2": "1. Mark dynamic subject group boundaries with a marker.\n2. Apply a dynamic group id to changes using max(change=1) + max(actionid)\n3. Mark dynamic hour group boundaries to the result of 2 with a marker.\n4. Apply a dynamic group id to the changes using max(change=1) + max(result of #2).\n5. Apply a dense rank to your outer group from #4 in a sequential order.\n",
    "label": 1
  },
  {
    "text_1": "Export a CREATE script for a database from pgAdmin",
    "text_2": "bvm$ sqlite3 so_ans.db .schema\nCREATE TABLE courses (\n    id integer NOT NULL,\n    name text,\n    created_by integer,\n    jc text\n);\n",
    "label": 1
  },
  {
    "text_1": "Mutiplication aggregate operator in SQL",
    "text_2": "create table MUL(data int)\ninsert MUL select 1 yourColumn union all\n           select 2 union all\n           select 4 union all\n           select 8 union all\n           select -2 union all\n           select 0\n\nselect CASE WHEN MIN(abs(data)) = 0 then 0 ELSE\n       EXP(SUM(Log(abs(nullif(data,0))))) -- the base mathematics\n     * round(0.5-count(nullif(sign(sign(data)+0.5),1))%2,0) -- pairs up negatives\n       END\nfrom MUL\n",
    "label": 1
  },
  {
    "text_1": "How to filter results of left join based on third table",
    "text_2": "SELECT *\nFROM customer c\nWHERE NOT EXISTS \n( SELECT * \n  FROM testdrive t \n  INNER JOIN vehicle v \n     on v.id = t.vehicle_id\n  WHERE v.modelname = 'Camry' AND t.customer_id = c.id)\n",
    "label": 1
  },
  {
    "text_1": "T-SQL - Get a list of all As which have the same set of Bs",
    "text_2": "with pow as(select *, b * power(10, row_number() \n              over(partition by a order by b)) as rn from t)\nselect a, dense_rank() over( order by sum(rn)) as rn \nfrom pow\ngroup by a\norder by rn, a\n",
    "label": 1
  },
  {
    "text_1": "How to find distinct sum of a column in sql server?",
    "text_2": " lineID  lineItemPrice\n    1            20\n    2            25\n    3            27\n    4            90\n",
    "label": 1
  },
  {
    "text_1": "SQL Oracle | How would I select a substring where it begins with a certain letter and ends with a certain symbol?",
    "text_2": "ltrim(rtrim(regexp_substr('Hazel/Green==F123==Brown','(==F.+?==)'), '='), '=')\n",
    "label": 1
  },
  {
    "text_1": "Select values that meet different conditions on different rows?",
    "text_2": "SELECT userid\nFROM UserRole\nWHERE roleid IN (1, 2, 3)\nGROUP BY userid\nHAVING COUNT(DISTINCT roleid) = 3;\n",
    "label": 1
  },
  {
    "text_1": "Convert SQL to NHibernate HQL",
    "text_2": "var result =\n    session.CreateQuery(@\"from Person \n                          where 1 = (FLOOR(DATEDIFF(dd,Birthday,GETDATE()+10) / 365.25))\n                                        -\n                                    (FLOOR(DATEDIFF(dd,Birthday,GETDATE()-5) / 365.25))\")\n           .List<Person>();\n",
    "label": 1
  },
  {
    "text_1": "how to use join for three tables",
    "text_2": "-- using a where clause\nselect emp.emp_name, emp.dept, sal.salary \nfrom table1 as emp \nleft join table2 as sal on emp.emp_name = sal.emp_name \nwhere emp.emp_name in (select emp_name from table3);\n\n-- or an inner join\nselect emp.emp_name, emp.dept, sal.salary \nfrom table1 as emp \njoin table3 as t3 on emp.emp_name = t3.emp_name\nleft join table2 as sal on emp.emp_name = sal.emp_name;\n",
    "label": 1
  },
  {
    "text_1": "PostgreSQL reusing value from long calculation in CASE statement",
    "text_2": "-- any query\n,LATERAL (SELECT t.a+t.b+t.c) AS sub(long_calc)\n-- function\n,LATERAL random() AS sub(long_calc)\n-- function with parameter passing\n,LATERAL sin(t.a) AS sub(long_calc)\n",
    "label": 1
  },
  {
    "text_1": "Symfony2 : a parameters.ini file for each bundle",
    "text_2": "entity_managers:\n            default:\n                connection:       default\n                mappings:\n                    AcmeDemoBundle: ~\n",
    "label": 1
  },
  {
    "text_1": "Conditional Where clause in sql",
    "text_2": "SELECT distinct colA, colB\nFROM car\nJOIN make on car.id = make.id\nJOIN model on car.id = model.id\n\nUNION\n\nSELECT distinct colA, colB\nFROM car\nJOIN (SELECT COUNT(*) c FROM make) make\nJOIN model ON car.id = model.id\nWHERE make.c = 0\n",
    "label": 1
  },
  {
    "text_1": "Product Aggregate in PostgreSQL",
    "text_2": "CAST(nmul(CAST(\"cote\" AS numeric)) AS INT)\n",
    "label": 1
  },
  {
    "text_1": "Find first rows of change in historical table",
    "text_2": "A   B   C\n123 0   20130101\n123 1   20130103\n123 0   20130105\n123 2   20130106\n123 0   20130109\n123 3   20130110\n",
    "label": 1
  },
  {
    "text_1": "Creating foreign key by matching strings between tables",
    "text_2": "ALTER TABLE `SEGMENT` ADD COLUMN match_id INT(11) COMMENT 'FK ref MATCH.id' ;\n\nALTER TABLE `SEGMENT` ADD CONSTRAINT fk_SEGMENT_MATCH \n  FOREIGN KEY (match_id) REFERENCES `MATCH`(id) ; \n\nUPDATE `SEGMENT` s\n   SET s.match_id = (SELECT m.id\n                       FROM MATCH m \n                      WHERE m.name = s.name) ;\n",
    "label": 1
  },
  {
    "text_1": "Ensure that the correct number of rows are returned from a MySQL query",
    "text_2": "SELECT t.*\nFROM (SELECT t.*\n      FROM test1 t cross join\n           (SELECT rank FROM test1 t2 WHERE id = @ID) as theone\n      ORDER BY ABS(theone.rank - t.rank)\n      LIMIT N\n     ) t\nORDER BY t.rank;\n",
    "label": 1
  },
  {
    "text_1": "How do I store URL fragments in a database?",
    "text_2": "| id | p_id | name  |\n|  1 | null | root  |\n|  2 |    1 | nd1.1 |\n|  3 |    2 | nd1.2 |\n|  4 |    1 | nd2.1 |\n",
    "label": 1
  },
  {
    "text_1": "Multiple Begin Transactions",
    "text_2": "create procedure Foo\n    didIStartATransaction = false\n    if @@trancount = 0 then\n      begin transaction\n      didIStartATransaction = true\n    end if\n\n    perform DML 1\n    perform DML 2\n    perform DML 3\n    -- other stuff\n\n    if didIStartATransaction then\n      commit transaction\n    end if\nend procedure\n\ncreate procedure Blah\n    didIStartATransaction = false\n    if @@trancount = 0 then\n      begin transaction\n      didIStartATransaction = true\n    end if\n\n    perform DML 1\n    perform DML 2\n    perform DML 3\n    -- other stuff\n\n    if didIStartATransaction then\n      commit transaction\n    end if\nend procedure\n",
    "label": 1
  },
  {
    "text_1": "How can i add new column with new values in it for all rows in SQL?",
    "text_2": "ALTER TABLE table_name\nADD newssalary datatype\n",
    "label": 1
  },
  {
    "text_1": "SQL subquery in INSERT?",
    "text_2": "INSERT INTO MyTable (age, p_id)\nSELECT '22', ( select id from people where name = 'bob')\n",
    "label": 1
  },
  {
    "text_1": "how does the groupby and count work in sql",
    "text_2": "Type | Gender | Name\n",
    "label": 1
  },
  {
    "text_1": "String to date conversion with excess hours",
    "text_2": "SELECT overlay(string\n               placing to_char(substring(string, 12, 2)::int % 24, '00')\n               from 12 for 2);\n",
    "label": 1
  },
  {
    "text_1": "Simple Parent/Child query",
    "text_2": "    ON FC2.CATEGORY_ID = FC1.CATEGORY_ID\n",
    "label": 1
  },
  {
    "text_1": "In MySQL, how do I get the value of each entry for each day?",
    "text_2": "SET @sql = NULL;\nSELECT\n  GROUP_CONCAT(DISTINCT\n    CONCAT(\n      'MAX(case when Participant = ''',\n      Participant,\n      ''' then Score end) AS ',\n      Participant\n    )\n  ) INTO @sql\nFROM TableName;\n\nSET @sql = CONCAT('SELECT  DAY, ', @sql, ' \n                  FROM    tableName\n                  GROUP   BY DAY');\n\nPREPARE stmt FROM @sql;\nEXECUTE stmt;\nDEALLOCATE PREPARE stmt;\n",
    "label": 1
  },
  {
    "text_1": "How can I generate a hierarchy path in SQL that leads to a given node?",
    "text_2": "DECLARE @child VARCHAR(10) = 'C'\n\n    ;WITH children AS\n    (\n\n       SELECT \n         ParentCategoryId,\n        CAST(ISNULL(ParentCategoryId + '->' ,'')  + ChildCategoryId AS VARCHAR(4000)) AS Path\n       FROM Hierarchy\n       WHERE ChildCategoryId =  @child\n     UNION ALL\n       SELECT \n         t.ParentCategoryId,\n         list= CAST(ISNULL(t.ParentCategoryId  + '->' ,'')  + d.Path AS VARCHAR(4000))\n       FROM Hierarchy t\n       INNER JOIN children  AS d\n            ON t.ChildCategoryId = d.ParentCategoryId\n     )\n\n    SELECT Path \n    from children c\n    WHERE ParentCategoryId IS NULL\n",
    "label": 1
  },
  {
    "text_1": "TSQL how do you iterate through rows while parsing them?",
    "text_2": "WITH testTable AS\n(\nSELECT 1 AS id_number, N'Hello, test 532. Yay oh and test 111' AS txt UNION ALL\nSELECT 2, N'test 932.' UNION ALL\nSELECT 3, N'This is a test 315 of stuff test 555.' UNION ALL\nSELECT 4, N'haflksdhfal test 311 sadjhfalsd' UNION ALL\nSELECT 5, N'Yay.'\n)\n\nSELECT id_number,display_term\nFROM testTable\nCROSS APPLY sys.dm_fts_parser('\"' + REPLACE(txt,'\"','\"\"') + '\"', 1033, 0,0)\nWHERE TXT IS NOT NULL and \n  display_term NOT LIKE '%[^0-9]%' /*Or use LIKE '[0-9][0-9][0-9]' to only get 3 \n                                     digit numbers*/\n",
    "label": 1
  },
  {
    "text_1": "ForeignKey Referencing Same Table",
    "text_2": "SELECT DISTINCT mothers.*\nFROM person\n    inner join person mothers on person.mother_id = mothers.id\n",
    "label": 1
  },
  {
    "text_1": "Column listing in SQL",
    "text_2": "Name1      Name2      Name3      Name4\n---------- ---------- ---------- ----------\nN1         N2         N3         N4\n1          2          4          7\n3          1          8          7\n4          8          5          7\n7          5          3          8\n\n(5 row(s) affected)\n\nNameList   Tokens\n---------- ----------\nN1         1\nN1         3\nN1         4\nN1         7\nN2         1\nN2         2\nN2         5\nN2         8\nN3         3\nN3         4\nN3         5\nN3         8\nN4         7\nN4         7\nN4         7\nN4         8\n\n(16 row(s) affected)\n",
    "label": 1
  },
  {
    "text_1": "How should you separate dimension tables from fact tables if you are not building a data warehouse?",
    "text_2": "    ON  TableA.InclusiveFrom <  TableB.ExclusiveFrom\n    AND TableA.InclusiveFrom >= TableB.InclusiveFrom - 30\n    AND TableA.ExclusiveFrom >  TableB.InclusiveFrom\n",
    "label": 1
  },
  {
    "text_1": "Complex SQL query in Android SQLite",
    "text_2": "select \n  order_number\n, cust_number\n, order_date\nfrom orders o1\nwhere order_number =\n(\n    select order_number\n    from  orders o2\n    where o2.cust_number = o1.cust_number\n      and order_date =\n        (  \n            select max(order_date)\n            from orders o3\n            where o3.cust_number = o2.cust_number\n         )\n) \n",
    "label": 1
  },
  {
    "text_1": "Matching first char in string to digit or non-standard character",
    "text_2": "SELECT title FROM table\nWHERE LEFT(title,1) = ?Char\nORDER BY title ASC\nLIMIT 0, 100;\n",
    "label": 1
  },
  {
    "text_1": "Cleaner case statements inside of queries?",
    "text_2": "SELECT\n  interimValue / CASE interimValue2 = 0 THEN 1 ELSE interimValue2 END\nFROM\n(\n  SELECT\n    SUM(value1)                            AS interimValue1\n    SUM(CASE value2 > 0 THEN 1 ELSE 0 END) AS interimValue2,\n    <other fields>\n  FROM\n    <a query>\n)\n  AS step1\n",
    "label": 1
  },
  {
    "text_1": "SQL CASE Statement Versus Conditional Statements In Programming Language",
    "text_2": "StringBuilder result = new StringBuilder();\nusing (SqlConnection conn = new SqlConnection(Settings.Default.Conn))\n{                \n    conn.Open();\n    string cmd = \"select [state], case [state] when 'ca' then 'california' else [state] end from member\";\n    SqlCommand command = new SqlCommand(cmd, conn);\n    using (SqlDataReader reader = command.ExecuteReader(CommandBehavior.CloseConnection))\n    {\n        while (reader.Read())\n        {                        \n            result.AppendLine(reader.GetString(1));\n        }\n    }\n}\n",
    "label": 1
  },
  {
    "text_1": "SQL Server : Crosstab/Pivot Price List",
    "text_2": "DECLARE @cols VARCHAR(max)='',\n        @sql  NVARCHAR(max)\n\nSET @cols = (SELECT DISTINCT '[' + CONVERT(VARCHAR(50), QtyFrom) + ' | '\n                             + CONVERT(VARCHAR(50), QtyTo) + '],'\n             FROM   Yourtable\n             WHERE  Category = 'Category#1'\n             FOR xml path(''))\n\nSELECT @cols = LEFT(@cols, Len(@cols) - 1)\n\nSET @sql = 'SELECT *\n    FROM  (SELECT CONVERT(VARCHAR(50), QtyFrom) + '' | ''\n                  + CONVERT(VARCHAR(50), QtyTo) AS Rang,\n                  Product,\n                  price\n           FROM   Yourtable\n           WHERE  Category = ''Category#1'') a\n          PIVOT (Max(price)\n                FOR Rang IN (' + @cols + '))piv '\n\nEXEC Sp_executesql  @sql \n",
    "label": 1
  },
  {
    "text_1": "SQL : find rows and sort according to number of matching columns?",
    "text_2": "CarId   Colour  Weight  Type    Relevance\n1       black   light   van     3\n3       white   light   van     2\n4       blue    light   van     2\n5       black   medium  van     2\n6       white   medium  van     1\n7       blue    medium  van     1\n8       black   heavy   limo    1\n",
    "label": 1
  },
  {
    "text_1": "How to get the first n characters of a string but ending with a whole word",
    "text_2": "WITH x AS (\n    SELECT '123 4056 78789 abcdefg 2222222222 3333 444 55555' AS [text], 22 AS [length]\n)\nSELECT LEFT([text], LEN([text]) - CHARINDEX(' ', REVERSE([text]) + ' ', LEN([text]) - [length]) + 1)\n  FROM x;\n",
    "label": 1
  },
  {
    "text_1": "Best Way To Design Database to Accommodate Indeterminate Number of Fields Per User?",
    "text_2": "SELECT p.projectTitle \nFROM project p INNER JOIN user_projects up ON p.projectID = up.projectID\nWHERE up.userID = 3\n",
    "label": 1
  },
  {
    "text_1": "Select Columns Only if String length is greater than 2",
    "text_2": "SELECT  'SELECT ID, ''' + COLUMN_NAME + ''' AS LessonName, \n        [' + COLUMN_NAME + '] AS Lesson ' +\n+       'FROM Lesson WHERE ID = @ID AND LEN([' + COLUMN_NAME + ']) > 2 UNION' \n\nFROM    INFORMATION_SCHEMA.COLUMNS\nWHERE   TABLE_NAME = 'Lesson'\nAND DATA_TYPE = 'varchar'\n",
    "label": 1
  },
  {
    "text_1": "Query a SQlite generated model database and returning matched query results?",
    "text_2": "AaDataBases.where('mnraCodon like _u_').each do |mrna|\n ..\nend\n",
    "label": 1
  },
  {
    "text_1": "join performance",
    "text_2": "upd8r_user_accts (rfid, owner_id, last_name)\nupd8r_twitter_accts (user_id, id)\nupd8r_facebook_accts (user_id, id)\n",
    "label": 1
  },
  {
    "text_1": "Stored procedure for getting sum of entries in table for each ID",
    "text_2": "SELECT\n   skillname,\n   [1] AS NotAplicable,\n   [2] AS Beginner,\n   [3] AS Proficient,\n   [4] AS Expert\nFROM (\n   SELECT \n      tblSkill.Name AS skillname,\n      tblSkillMetrics.Scale,\n      EmployeeID\n   FROM\n      tblSkill\n   INNER JOIN \n      tblSkillMetrics ON tblSkillMetrics.SkillID = tblSkill.ID\n) s\nPIVOT (\n   COUNT(EmployeeID) FOR Scale IN ([1], [2], [3], [4])\n) p\n;\n",
    "label": 1
  },
  {
    "text_1": "Creating a table from an exixting table in different pattern?",
    "text_2": "INSERT INTO MyTable\n(id, times)\nSELECT id, time1\nFROM MyOtherTable\nUNION \nSELECT id, time2\nFROM MyOtherTable\nUNION\nSELECT id, time3\nFROM MyOtherTable\nUNION\nSELECT id, time4\nFROM MyOtherTable\n",
    "label": 1
  },
  {
    "text_1": "Pivot table to turn rows into columns",
    "text_2": "| PRICEID |    COL |  VALUE |\n-----------------------------\n|       2 | 1_comp |      1 |\n|       2 |  1_min |      S |\n|       2 |  1_max | (null) |\n|       3 | 1_comp |      1 |\n|       3 |  1_min |      M |\n|       3 |  1_max | (null) |\n",
    "label": 1
  },
  {
    "text_1": "Best way to exclude outdated data from a search in PostgreSQL",
    "text_2": "CREATE TRIGGER upaft\nAFTER UPDATE ON idx_control\nFOR EACH ROW\nWHEN (OLD.start_ts IS DISTINCT FROM NEW.start_ts)\nEXECUTE PROCEDURE trg_idx_control_upaft();\n",
    "label": 1
  },
  {
    "text_1": "Windowed Functions in SQL Server",
    "text_2": "; with Step1 (EmpId, ValueThisEmpId) as\n    (select empId, sum(OrderValue)\n    from #t\n    group by empId)\nselect EmpId, \n    dense_rank() over(order by ValueThisEmpId desc) as \"rank\", \n    sum(ValueTHisEmpId) over() as TotalValue, \n    ValueThisEmpId\nfrom Step1    \n",
    "label": 1
  },
  {
    "text_1": "Concat results from a query",
    "text_2": "CREATE TABLE Test_Table(Value NVARCHAR(1000))\n\nINSERT INTO Test_Table VALUES \n('4200.000000 CAD'),\n('3735.000000 CNY'),\n('19.200000 EUR'),\n('19.922175 USD')\n",
    "label": 1
  },
  {
    "text_1": "SQL Group by Query help needed",
    "text_2": "SELECT a.Q_ID, b.Question, a.response_id, a.response, count(a.response)\nFROM survey_responses a\nINNER JOIN survey_questions b ON b.Q_ID = a,Q_ID\ngroup by  a.Q_ID, b.Question, a.response_id, a.response\norder by a.Q_ID\n",
    "label": 1
  },
  {
    "text_1": "SQL Server 2008 Pivot and Concat",
    "text_2": ";with cte as\n(\n  select t1.position,\n    STUFF(\n         (SELECT ', ' + t2.PlayerName\n          FROM yourtable t2\n          where t1.position = t2.position\n          FOR XML PATH (''))\n          , 1, 1, '')  AS PlayerNames\n  from yourtable t1\n)\nselect \n  max(case when position = 'Forward' then PlayerNames end) Forward,\n  max(case when position = 'Center' then PlayerNames end) Center,\n  max(case when position = 'Defense' then PlayerNames end) Defense,\n  max(case when position = 'Goalie' then PlayerNames end) Goalie\nfrom cte\n",
    "label": 1
  },
  {
    "text_1": "JpaRepository: Spring Sort for runtime query variabels",
    "text_2": "public class MyEntitySpecifications {\n\n    public static Specification<MyEntity> GetByPageSpecification() {\n        return new Specification<MyEntity>() {\n\n            @Override\n            public Predicate toPredicate(Root<MyEntity> root, CriteriaQuery<?> cq, CriteriaBuilder cb) {\n\n                Expression fixingExpr = cb.greaterThan(root.get(MyEntity_.fixingDueDate), new DateTime(DateTimeZone.UTC));\n                cq.orderBy(new OrderImpl(cb.selectCase().when(fixingExpr, 1).otherwise(0), false));\n\n                return cb...;\n            }\n\n        };\n    }\n}\n",
    "label": 1
  },
  {
    "text_1": "sql performance detail decision with * or specify field",
    "text_2": "if not exists (select id from sys_maxkey)\n",
    "label": 1
  },
  {
    "text_1": "How to run the select Query here?",
    "text_2": " SELECT * \n FROM tbl_djr \n WHERE 1=1 \n  AND djr_date_of_Work between '12/31/2012'   and '01/06/2013' \nORDER BY djr_id  \n",
    "label": 1
  },
  {
    "text_1": "Joining several tables and views",
    "text_2": "dbo.Monitor_Request mr \nLEFT OUTER JOIN dbo.Customer c ON c.Customer_ID = mr.ByCustomerID\nLEFT OUTER JOIN dbo.CompanyShim cs ON cs.Company_ID = mr.ByCompanyID\nLEFT OUTER JOIN dbo.PostalAddressShim pas ON pas.Address_ID = c.Address_ID\n                                             AND pas.Address_ID = cs.Company_Address_ID\n",
    "label": 1
  },
  {
    "text_1": "CASE WHEN LEN after decimal point is 1 add 0",
    "text_2": "v       AsDecimal   AsVarchar   SQLServer2012\n4.2     4.20        4.20        4.20\n4.80    4.80        4.80        4.80\n2.43    2.43        2.43        2.43\n2.45    2.45        2.45        2.45\n54      54.00       54.00       54.00\n4.001   4.00        4.00        4.00\n35.051  35.05       35.05       35.05\nfail    NULL        fail        NULL\n",
    "label": 1
  },
  {
    "text_1": "GROUP BY HAVING NOT generates wrong result",
    "text_2": "SELECT * FROM SAMPLE\nWHERE YEAR NOT IN\n(\n    SELECT YEAR FROM SAMPLE WHERE VAR=1\n)\n",
    "label": 1
  },
  {
    "text_1": "Conjoining Where Statement",
    "text_2": "UPDATE\n  FormDetail\nSET\n  FieldOrder=FieldOrder+1\nFROM\n  dbo.FormDetail\nINNER JOIN\n(\n  SELECT\n    DocCode,\n    FieldOrder\n  FROM\n    dbo.FormDetail\n  WHERE\n    DocCode IN (1,2,3)\n    AND FieldData LIKE '%OldField%'\n)\n  AS lookup\n    ON  lookup.DocCode     = FormDetail.DocCode\n    AND lookup.FieldOrder >= FormDetail.FieldOrder\n",
    "label": 1
  },
  {
    "text_1": "SQL join across 3 tables, with multiple WHERE clause matches",
    "text_2": "where (g.name='TAGX' and g.name='TAGY')\n",
    "label": 1
  },
  {
    "text_1": "counting lost packets with timestamp diff",
    "text_2": "create table ClockTick\n(\n  packetTime datetime\n)\n\ninsert into ClockTick select '01-Jan-2014 12:00'\ninsert into ClockTick select '01-Jan-2014 12:30'\ninsert into ClockTick select '01-Jan-2014 13:00'\ninsert into ClockTick select '01-Jan-2014 14:00'\ninsert into ClockTick select '01-Jan-2014 14:30'\ninsert into ClockTick select '01-Jan-2014 15:30'\ninsert into ClockTick select '01-Jan-2014 16:00'\ninsert into ClockTick select '01-Jan-2014 17:00'\n",
    "label": 1
  },
  {
    "text_1": "change the order of a string in pl/sql",
    "text_2": "WITH names ( text ) AS (\n  SELECT ' name / surname ' FROM DUAL\n)\nSELECT TRIM( SUBSTR( text, INSTR( text, '/' ) + 1 ) ) || '/' || TRIM( SUBSTR( text, 1, INSTR( text, '/' ) - 1 ) )\nFROM   names;\n",
    "label": 1
  },
  {
    "text_1": "Linked server not getting rows from Oracle DB",
    "text_2": " AND b.end_dt = TO_DATE('06/30/2012','MM/DD/YYYY')\n",
    "label": 1
  },
  {
    "text_1": "Division between the sum of two columns",
    "text_2": "select \n       ( select sum(total_salary) \n        from [vw_salary] \n        where year = '2012'\n        and dist_name = 'Sch Dist') --totalsal\n       /\n       (select count(distinct distenroll) \n        from dbo.vw_Salary\n        where year = '2012'\n        and dist_name = 'Sch Dist') -- DistEnroll \n",
    "label": 1
  },
  {
    "text_1": "Access SQL count number of people group by week number",
    "text_2": "SELECT C.Cal_year, C.Cal_Week, P.pname, P.psurname, P.date_of_entry, nz(P.date_of_exit, Now) AS exit_date\nFROM [Calendar] C\nINNER JOIN ( SELECT [Name] AS pname, [surname] as psurname, date_of_entry, date_of_exit\n            FROM people\n           ) P  \nON (DateAdd(\"ww\",C.Cal_week,DateSerial(C.Cal_year,1,1)) BETWEEN P.date_of_entry  AND nz(P.date_of_exit, Now))\nORDER BY  C.Cal_year, C.Cal_Week             \n\nCal_year    Cal_Week pname      psurname    date_of_entry       exit_date\n2006            1   foo         bar         1/01/2006               8/01/2006\n2010            1   foo1        bar1        5/01/2010               22/04/2016 13:04:39\n2010            2   foo1        bar1        5/01/2010               22/04/2016 13:04:39\n2010            3   foo1        bar1        5/01/2010               22/04/2016 13:04:39\n2010            4   foo1        bar1        5/01/2010               22/04/2016 13:04:39\n",
    "label": 1
  },
  {
    "text_1": "SQL Query to find the ID with highest difference of contents",
    "text_2": "SELECT  a.HotelId , a.NumOfAutomaticOrders - a.NumOfBackendOrders\nFROM    \n(\n    SELECT  Id as HotelId , \n    sum(case when [type] = 'Automatic Orders' then 1 else 0 end ) NumOfAutomaticOrders,\n    sum(case when [type] = 'Backend Orders' then 1 else 0 end ) NumOfBackendOrders\n    FROM Orders\n    where 1=1\n    group by Id \n) a\norder by 2 desc\n",
    "label": 1
  },
  {
    "text_1": "How can I select the MySQL rows on the based on ID? Is there any affect on performance?",
    "text_2": "select * from your_table where id = 123\nselect * from your_table where id = 345\nselect * from your_table where id = 679\n",
    "label": 1
  },
  {
    "text_1": "MS access SQL help",
    "text_2": "SELECT s.*\nFROM scores AS s\nJOIN (\n    SELECT beneficiary,service\n    FROM scores\n    WHERE marks IS NOT NULL\n    GROUP BY beneficiary,service HAVING COUNT(*) = 2\n) AS x ON (x.beneficiary = s.beneficiary AND x.service = s.service);\n",
    "label": 1
  },
  {
    "text_1": "How to Write a Script to add extra columns for my primary key",
    "text_2": "ALTER TABLE <Table_Name>\nDROP CONSTRAINT <constraint_name>\n\nALTER TABLE <Table_Name>\nADD CONSTRAINT <constraint_name> PRIMARY KEY ([ID], [CustomerName], [CustomerVLANSID])\n",
    "label": 1
  },
  {
    "text_1": "select only specific dates oracle sql",
    "text_2": "WHERE trunc(cu.audit_date) = trunc(cu.audit_date, 'MM')\n",
    "label": 1
  },
  {
    "text_1": "Assign same id to rows with same combination of data",
    "text_2": "SELECT\n    year\n    ,folder\n    ,seq_no\n    ,DENSE_RANK() OVER(ORDER BY year, folder, seq_no) AS ID\n    ,COUNT(*) OVER(PARTITION BY year, folder, seq_no) AS cnt\nFROM YourTable\n",
    "label": 1
  },
  {
    "text_1": "GROUP BY all columns syntax",
    "text_2": "create table test_group(cod varchar2(16), descr varchar2(16), num number);\ninsert into test_group values ('a', 'letter A', 10);\ninsert into test_group values ('b', 'letter b', 20);\ninsert into test_group values ('b', 'letter B', 35);\ninsert into test_group values ('c', 'letter c', 70);\ninsert into test_group values ('c', 'letter c', 99);\n",
    "label": 1
  },
  {
    "text_1": "Using Oracle temp table for multiple async HTTP calls",
    "text_2": "SQL> select * from v_23\n  2  /\n\n        ID       COL1 COL2                           COL3            COL4\n---------- ---------- ------------------------------ --------- ----------\n    277834       1880 GV_$MAP_EXT_ELEMENT            15-OCT-07       4081\n    304540      36227 /375c3e3_TCPChannelReaper      15-OCT-07         36\n   1111897      17944 /8334094a_CGCast               15-OCT-07         17\n   1364675      42323 java/security/PublicKey        15-OCT-07         42\n   1555115       3379 ALL_TYPE_VERSIONS              15-OCT-07          3\n   2073178       3355 ALL_TYPE_METHODS               15-OCT-07          3\n   2286361      68816 NV                             15-OCT-07         68\n   2513770      59414 /5c3965c8_DicomUidDoc          15-OCT-07         59\n   2560277      66973 MGMT_MNTR_CA                   15-OCT-07         66\n   2700309      45890 /6cc68a64_TrustManagerSSLSocke 15-OCT-07         45\n   2749978       1852 V_$SQLSTATS                    15-OCT-07       6395\n   2829080      24832 /6bcb6225_TypesTypePair        15-OCT-07         24\n   3205157      55063 SYS_NTsxSe84BlRX2HiXujasKy/w== 15-OCT-07         55\n   3236186      23830 /de0b4d45_BaseExecutableMember 15-OCT-07         23\n   3276764      31296 /a729f2c6_SunJCE_n             15-OCT-07         31\n   3447961      60129 HHGROUP                        15-OCT-07         60\n   3517106      38204 java/awt/im/spi/InputMethod    15-OCT-07         38\n   3723931      30332 /32a30e8e_EventRequestManagerI 15-OCT-07         30\n   3877332      53700 EXF$XPVARCLST                  15-OCT-07         53\n   4630976      21193 oracle/net/nl/NetStrings       15-OCT-07         21\n\n20 rows selected.\n\nSQL> exec ctx_pkg.set_user_id('FOX_IN_SOCKS')\n\nPL/SQL procedure successfully completed.\n\nSQL> select * from v_23\n  2  /\n\nno rows selected\n\nSQL>\n",
    "label": 1
  },
  {
    "text_1": "Finding user names with particular characters in their last name",
    "text_2": "SQL> ed\nWrote file afiedt.buf\n\n  1   select first_name, last_name\n  2     from employees\n  3*   where regexp_like( last_name, 'Z|X|D|[A-F]', 'i' )\nSQL> /\n\nFIRST_NAME           LAST_NAME\n-------------------- -------------------------\nEllen                Abel\nSundar               Ande\nMozhe                Atkinson\nDavid                Austin\nHermann              Baer\nShelli               Baida\nAmit                 Banda\nElizabeth            Bates\nSarah                Bell\nDavid                Bernstein\nLaura                Bissot\nHarrison             Bloom\nAlexis               Bull\nAnthony              Cabrio\nGerald               Cambrault\nNanette              Cambrault\nJohn                 Chen\nKelly                Chung\nKaren                Colmenares\nCurtis               Davies\nLex                  De Haan\n<<snip>>\nMatthew              Weiss\nJennifer             Whalen\nEleni                Zlotkey\n\n93 rows selected.\n",
    "label": 1
  },
  {
    "text_1": "TSQL SELECT DISTINCT",
    "text_2": "1   21  Product1\n2   21  Product2\n",
    "label": 1
  },
  {
    "text_1": "SQL Aggregation in Reporting Services",
    "text_2": "╔══════╦══════════════════╦═══════╦═══════╦════════════╦═════════════╗\n║ CODE ║ CODE DESCRIPTION ║ CARER ║ CHILD ║ AGE 0 < 10 ║ AGE 10 > 15 ║\n╠══════╬══════════════════╬═══════╬═══════╬════════════╬═════════════╣\n║  738 ║ Workflow         ║     1 ║     2 ║          1 ║           1 ║\n║  739 ║ Estimate         ║     1 ║     1 ║          1 ║           0 ║\n╚══════╩══════════════════╩═══════╩═══════╩════════════╩═════════════╝\n",
    "label": 1
  },
  {
    "text_1": "Using LIKE in Count(IIF()) in MS Access, get NA count",
    "text_2": "SELECT Sum(IIf([Short Int % Eqy Flt] LIKE '[#]N/A*', 1, 0)) AS MyTotal\nFROM tblFirst250;\n",
    "label": 1
  },
  {
    "text_1": "sql search on fields containing diacritics",
    "text_2": "select * from books where title COLLATE Latin1_General_CI_AI like '%casa%'\n",
    "label": 1
  },
  {
    "text_1": "Add empty date row to query result",
    "text_2": "CREATE FUNCTION explodeDates(@firstDate DATE, @secondDate DATE)\nRETURNS \n@mytable TABLE \n(\n    mydate DATE\n)\nAS\nBEGIN\n    WHILE @firstDate < @secondDate \n    BEGIN\n        INSERT INTO @mytable(mydate) VALUES (@firstDate);\n\n        SET @firstDate = DATEADD(day, 1, @firstdate);\n    END\n\n    RETURN \nEND\nGO\n",
    "label": 1
  },
  {
    "text_1": "Oracle to_char format number with fill mode (FM0000)",
    "text_2": "SQL> SELECT CAST(TO_CHAR(12345, 'FM0000') AS VARCHAR2(4)) FROM DUAL;\n\nCAST\n----\n####\n",
    "label": 1
  },
  {
    "text_1": "Server timezone offset value",
    "text_2": "CREATE OR REPLACE FUNCTION oracle_style_tz() RETURNS text AS $$\nSELECT to_char(extract(timezone_hour FROM current_timestamp),'FM00')||':'||\n       to_char(extract(timezone_minute FROM current_timestamp),'FM00');\n$$ LANGUAGE 'SQL' STABLE;\n",
    "label": 1
  },
  {
    "text_1": "TSQL Count(Id) performance with where clause",
    "text_2": "Select Count(*) from TableName where ColumnName = X  ;\n",
    "label": 1
  },
  {
    "text_1": "Select from two tables by priority",
    "text_2": "select \n   COALESCE(b.col1,a.col1) col1\n  ,COALESCE(b.col2,a.col2) col2\n  ,COALESCE(b.col3,a.col3) col3\n  ,col4 col4\nfrom\n    edits a\nfull outer join\n    items b\n      on a.name = b.name\nwhere a.name = @name\nAND   ISNULL(@ip,b.ip) = b.ip\n",
    "label": 1
  },
  {
    "text_1": "Find number of rows needed to reach certain sum",
    "text_2": "sum(val1) over (order by val1) as cumesum\n",
    "label": 1
  },
  {
    "text_1": "Sparse data: efficient storage and retrieval in an RDBMS",
    "text_2": "SELECT\n    REV.revision_number\nFROM\n    Revision_Files RF\nINNER JOIN Revisions REV ON\n    REV.revision_number BETWEEN RF.start_revision_number AND RF.end_revision_number\nWHERE\n    RF.file_number = @file_number AND\n    RF.value = @value\nGO\n",
    "label": 1
  },
  {
    "text_1": "Mysql query is not fetching data as i want",
    "text_2": "select m.msg_status, u.id, u.username\nfrom messages m\njoin users u on m.msg_from = u.id\norder by u.id, m.msg_status\n",
    "label": 1
  },
  {
    "text_1": "How to subtract Sys with Timestamp from field and get hours and minutes",
    "text_2": "select sysdate - systimestamp from dual;\n",
    "label": 1
  },
  {
    "text_1": "How to get Oracle execution plan xml through jdbc",
    "text_2": "  executeQuery(\"select to_clob(dbms_xplan.build_plan_xml(....\n",
    "label": 1
  },
  {
    "text_1": "How to add 2 dates in Oracle sp?",
    "text_2": "SELECT SYSDATE + INTERVAL '1-10' YEAR TO MONTH FROM DUAL;\n",
    "label": 1
  },
  {
    "text_1": "Combine results in SQL",
    "text_2": "WHERE (p.PropertyValue = 'b510dab0-8bf6-e011-84a9-00505691002c' AND\n       p.PropertyDefinitionID = '47') OR /*<------------------- Changed*/\n      (p.PropertyValue = 'True' AND\n       p.PropertyDefinitionID = '48')\n",
    "label": 1
  },
  {
    "text_1": "Cannot format input parameters correctly for SQL stored procedure",
    "text_2": "cmd.Parameters.Append cmd.CreateParameter(\"@Analyte\", adVarChar, adParamInput, 60, \"lead\")\ncmd.Parameters.Append cmd.CreateParameter(\"@ThisWOID\", adVarChar, adParamInput, 60, \"1406-00591\")\ncmd.Parameters.Append cmd.CreateParameter(\"@SampleID\", adDouble, adParamInput, 60, 1)\ncmd.Parameters.Append cmd.CreateParameter(\"@testid\", adDouble, adParamOutput, , adParamReturnValue)\n",
    "label": 1
  },
  {
    "text_1": "Aggregating query - could someone check it for me please?",
    "text_2": "DRP_TS      MAX(DPR_QOT_ID) MIN(DPR_CLOSE)  MAX(DPR_LOW)\n30.07.2013 09:00        2                 12    17\n30.07.2013 09:10        2                 15    15\n31.07.2013 09:00        1                 13    13\n",
    "label": 1
  },
  {
    "text_1": "SQL Selecting from two Tables with inner join and limit",
    "text_2": "SELECT \n  ser.id, \n  ser.name, \n  s.status, \n  s.timestamp \nFROM Service ser \nINNER JOIN status as s ON s.service_id = ser.id\nINNER JOIN\n(\n   SELECT\n     service_id, \n     MAX(timestamp) AS MaxDate\n   FROM status \n   GROUP BY service_id\n) AS a  ON a.service_id = s.service_id \n       AND a.MaxDate = s.timestamp;\n",
    "label": 1
  },
  {
    "text_1": "How to select just parent and not inherit values",
    "text_2": "SELECT * FROM (\n (SELECT p1.*, g.ID \n  FROM PARTIPANT p1\n  LEFT JOIN GAME g1 ON p1.ID=g1.HOME_PARTICIPANT_ID\n  LEFT JOIN PLAY_OFF_GAME pog1 ON g1.ID=pog1.GAME_ID\n  WHERE pog1.GAME_ID IS NULL)\n UNION\n (SELECT p2.*, NULL\n  FROM PARTICIPANT p2\n  JOIN GAME g2 ON p2.ID=g2.HOME_PARTICIPANT_ID\n  JOIN PLAY_OFF_GAME pog2 ON g2.ID=pog2.GAME_ID)) AS tmp;\n",
    "label": 1
  },
  {
    "text_1": "CASE Using CASE Statements to check for Null or Empty value",
    "text_2": "expr:= p1||p2||p3||p4;\n",
    "label": 1
  },
  {
    "text_1": "Compare values in SQL using CASE, if match return and exit from CASE statement",
    "text_2": "| PersonID | PhoneType | PhoneNumber |\n|----------|-----------|-------------|\n|        1 |         7 |  7735821547 |\n|        2 |         1 |  7731547841 |\n",
    "label": 1
  },
  {
    "text_1": "Oracle - datatype to store number of a specific length",
    "text_2": "code_field char(8) check (regexp_like(code_field, '[:digit:]{8}'))\n",
    "label": 1
  },
  {
    "text_1": "SQL : Filtering with multiple columns in a subquery",
    "text_2": "SELECT t.* from Table1 t\nWHERE NOT EXISTS\n(\n    SELECT 1 FROM Table2 t2\n    WHERE t.C1 = t2.D1\n    AND   t.C2 = t2.D2\n)\n",
    "label": 1
  },
  {
    "text_1": "SQL Server 2005 and SELECT and UPDATE locked",
    "text_2": "BEGIN TRAN\nUPDATE ...\nSELECT...\nCOMMIT \n",
    "label": 1
  },
  {
    "text_1": "Get total time interval from multiple rows if sequence not broken",
    "text_2": "select * from get_data() order by id, start_date;\n",
    "label": 1
  },
  {
    "text_1": "Get result of INNER JOIN as array column, without duplicates",
    "text_2": "SELECT p.id, p.name, array_to_string(array_agg(pcr.country_id), ',') \nFROM product p INNER JOIN product_countries_rel pcr ON p.id = pcr.product_id\nGROUP BY p.id, p.name\n",
    "label": 1
  },
  {
    "text_1": "When / how are default value expression functions bound with regard to search_path?",
    "text_2": "adbin   pg_node_tree  The internal representation of the column default value\nadsrc   text          A human-readable representation of the default value\n",
    "label": 1
  },
  {
    "text_1": "Compare two fields from two tables where the values are not exact matches",
    "text_2": "select t.*,\n       (case when exists (select 1\n                          from table1 t1\n                          where t1.group = t2.group and\n                                t2.id like t1.id || '_'\n                         )\n        then 'Yes' else 'No'\n        end) as Matches\nfrom table2 t2;\n",
    "label": 1
  },
  {
    "text_1": "How to find sum of multiple columns in a table in SQL Server 2005?",
    "text_2": "SELECT \n   Val1,\n   Val2,\n   Val3,\n   (Val1 + Val2 + Val3) as 'Total'\nFROM Emp\n",
    "label": 1
  },
  {
    "text_1": "MySQL = For Update Locking = What is exactly locked?",
    "text_2": "CREATE DATABASE so1;\nUSE so1;\nCREATE TABLE notification (`id` BIGINT(20), `date` DATE, `text` TEXT) ENGINE=InnoDB;\nINSERT INTO notification(id, `date`, `text`) values (1, '2011-05-01', 'Notification 1');\nINSERT INTO notification(id, `date`, `text`) values (2, '2011-05-02', 'Notification 2');\nINSERT INTO notification(id, `date`, `text`) values (3, '2011-05-03', 'Notification 3');\nINSERT INTO notification(id, `date`, `text`) values (4, '2011-05-04', 'Notification 4');\nINSERT INTO notification(id, `date`, `text`) values (5, '2011-05-05', 'Notification 5');\n",
    "label": 1
  },
  {
    "text_1": "mysql query . need assistance",
    "text_2": "SELECT id FROM trap WHERE NOT(id BETWEEN 10 AND 12) \n",
    "label": 1
  },
  {
    "text_1": "How can I get the IDs of the rows that make up a GROUP BY ... HAVING query?",
    "text_2": "SELECT  id\nFROM    (\n        SELECT  id,\n                SUM(r) OVER (PARTITION BY c, ABS(r)) total,\n                COUNT(*) OVER (PARTITION BY c, ABS(r)) num\n        FROM    table\n        ) q\nWHERE   num > 1 AND total = 0\n",
    "label": 1
  },
  {
    "text_1": "Why in JPA Hibernate update query ; all attributes get update in SQL",
    "text_2": "@org.hibernate.annotations.Entity(selectBeforeUpdate=true)\n",
    "label": 1
  },
  {
    "text_1": "RSS to Database - How to Insert String with Any Character?",
    "text_2": "$query = \"INSERT INTO FEED_CONTENT (title, link, `desc`)\n          VALUES (\n                  '\".mysql_real_escape_string($title).\"',\n                  '\".$href.\"',\n                  '\".mysql_real_escape_string($desc).\"'\n                 )\";\n",
    "label": 1
  },
  {
    "text_1": "Count occurrences of combinations of columns",
    "text_2": "CREATE OR REPLACE FUNCTION addbusinessdays(date, integer)\n  RETURNS date AS\n$func$ \nSELECT day\nFROM  (\n    SELECT i, $1 + i * sign($2)::int AS day\n    FROM   generate_series(0, ((abs($2) * 7) / 5) + 3) i\n    ) sub\nWHERE  EXTRACT(ISODOW FROM day) < 6  -- truncate weekend\nORDER  BY i\nOFFSET abs($2)\nLIMIT  1\n$func$  LANGUAGE sql IMMUTABLE;\n",
    "label": 1
  },
  {
    "text_1": "Oracle SQL : timestamps in where clause",
    "text_2": "to_timestamp('12-01-2012 21:24:00', 'dd-mm-yyyy hh24:mi:ss')\n",
    "label": 1
  },
  {
    "text_1": "Smart SQL group by",
    "text_2": "select truncate(latitude, 0)as lat0, truncate(longitude, 0) as long0, sum(vaolume)\nfrom t\ngroup by truncate(latitude, 0), truncate(longitude, 0)\n",
    "label": 1
  },
  {
    "text_1": "SQL split eggs in two baskets - date alternation",
    "text_2": "position : (position / 2) * 7 + (position % 2) * 2\n--------------------------------------------------\n       0 : 0\n       1 : 2\n       2 : 7\n       3 : 9\n       4 : 14\n       5 : 16\n       6 : 21\n",
    "label": 1
  },
  {
    "text_1": "postgresql return 0 if returned value is null",
    "text_2": "\nThe COALESCE function returns the first of its arguments that is not null.  \nNull is returned only if all arguments are null. It is often\nused to substitute a default value for null values when data is\nretrieved for display.\n",
    "label": 1
  },
  {
    "text_1": "SQL: How to have a row even if the SELECT CASE doesn't get triggered?",
    "text_2": "SELECT\n       foo.SignAndSort,\n       SUM(colb), SUM(colc), SUM(cold)\n  FROM\n        (SELECT '-1' AS SignAndSort\n         UNION ALL SELECT '0'\n         UNION ALL SELECT '-1'\n        ) foo\n        LEFT JOIN\n        Table1 ON foo.SignAndSort = SIGN(cola)\n WHERE this = that\nGROUP BY foo.SignAndSort\nORDER BY foo.SignAndSort\n",
    "label": 1
  },
  {
    "text_1": "How to select the TOP 1 record per group (Partition)",
    "text_2": "SELECT A.fCity, A.fState, A.tCity, A.tState, Q.Tier, Q.Rate, Q.CarrID, Q.CarrName, TheRank\nFROM tblRoutes As A LEFT JOIN \n    (\n      SELECT B.CarrID, B.CarrName, B.fCity, B.fState, B.tCity, B.tState, B.Rate, B.Tier, \n      (\n        SELECT COUNT(*) + 1\n        FROM  tblCarrierRates rnk \n        WHERE B.fCity = rnk.fCity AND B.fState = rnk.fState \n              AND B.tCity = rnk.tCity AND B.tState = rnk.tState \n              AND (rnk.Tier < B.Tier OR \n                 (rnk.Tier = B.Tier AND rnk.Rate < B.Rate))) AS TheRank\n      FROM tblCarrierRates As B) As Q\nON (A.tState = Q.tState) AND (A.tCity = Q.tCity) \n    AND (A.fState = Q.fState) AND (A.fCity = Q.fCity)\nWHERE TheRank = 1\n",
    "label": 1
  },
  {
    "text_1": "How to get strings in SQL Table, which are top1 or top3",
    "text_2": "select t.*\nfrom (select a.c_name as abonentname, count(*) as cnt\n      from st_abonents a inner join\n           qry_type qt\n           on a.id = qt.c_ab_ref inner join\n           qry_queue qq\n           on qt.id = qq.c_qry_type\n      group by a.c_name\n      order by cnt\n     ) t\nwhere rownum <= 3;\n",
    "label": 1
  },
  {
    "text_1": "how to retrieve x random records from a table with record no in sql query",
    "text_2": "SELECT ROW_NUMBER() OVER (ORDER BY rn), *\nFROM\n    (SELECT TOP 24 *, ROW_NUMBER() OVER (ORDER BY newid()) rn\n    FROM Table\n    ) t\n",
    "label": 1
  },
  {
    "text_1": "Setting field size (per column) while generating table in Access",
    "text_2": "CREATE TABLE DB_Total\n(\n Column1Name NVARCHAR(255) --Use whatever datatype and length you need\n,Column2Name NUMERIC(18,0) --Use whatever datatype and length you need\n,...\n) ;\n\nINSERT INTO DB_Total\n....\n",
    "label": 1
  },
  {
    "text_1": "Select data with the different filters in sql server",
    "text_2": "SELECT \n    refnum, \n    SUM(CASE \n            WHEN transtype='cash-out' then -amount \n            ELSE amount \n        END)  as total\nFROM expenses \nGROUP BY refnum\n",
    "label": 1
  },
  {
    "text_1": "Cumulative Sum of Count",
    "text_2": "SELECT \"Month\"\n      ,\"NumberofStorms\"\n      ,SUM(\"NumberofStorms\") OVER(ORDER BY \"Month\" ROWS BETWEEN unbounded preceding and current row) AS CumulativeSum\nFROM Table1\n",
    "label": 1
  },
  {
    "text_1": "Mysql Count multiple columns based on the same values",
    "text_2": "select criteria, sum(A) as A, sum(B) as B\nfrom ((select A as criteria, 1 as A, 0 as B\n       from liketable\n      ) union all\n      (select B, 0, 1\n       from liketable\n      )\n     ) t\ngroup by criteria;\n",
    "label": 1
  },
  {
    "text_1": "Difference in the checksum SQL statements",
    "text_2": " declare @aa nvarchar;\n",
    "label": 1
  },
  {
    "text_1": "In SQL what does concat(col1,col2)x does?",
    "text_2": "CREATE TABLE tab(col1 VARCHAR(100), col2 VARCHAR(100));\nINSERT INTO tab(col1, col2) VALUES ('a','b');\n",
    "label": 1
  },
  {
    "text_1": "Handling multiple fact tables in Qlikview",
    "text_2": "[test_scores]:\nLOAD school_code & '_' test_code & '_' grade_id & '_' gender_id & '_' ethnicity_id & '_' subject_id as test_key,\n     test_score\nRESIDENT [temp_test_scores];\n",
    "label": 1
  },
  {
    "text_1": "How to perform a OUTER JOIN on two complex SQL queries?",
    "text_2": "COUNT(ra.question_option_id) AS TotalAnswers\n",
    "label": 1
  },
  {
    "text_1": "Dbms_Stats.Gather_Table_Stats after partition exchange in Oracle procedure?",
    "text_2": "0:admspm@spmdtz> printStats -p location\n\nTable_Name|object_Type   |subobject  |last_Analyzed|num_Rows|sample_Size|\n-------------------------------------------------------------------------\nLOCATION  |Table         |           |06.04. 15:23 |     817|        817|\nLOCATION  |TablePartition|PARTITION_1|06.04. 15:23 |     272|        272|\nLOCATION  |TablePartition|PARTITION_2|06.04. 15:23 |     272|        272|\nLOCATION  |TablePartition|PARTITION_3|             |        |           |\n",
    "label": 1
  },
  {
    "text_1": "Wording date format to number date format",
    "text_2": "DateString1 = \"Wednesday, February 12, 2013 12:47 AM\"\n? Mid(DateString1, InStr(DateString1, \" \"))\n February 12, 2013 12:47 AM\nDate1 = CDate(Mid(DateString1, InStr(DateString1, \" \")))\n? Date1\n2/12/2013 12:47:00 AM\n",
    "label": 1
  },
  {
    "text_1": "Error importing oracle dump",
    "text_2": "imp atlantis/atlantis@orcl file=E:\\ABCD1_EXCLUDE_CLOB_TABS_BAK.dmp indexfile=index.sql full=y log=imp.log\n",
    "label": 1
  },
  {
    "text_1": "sql distinct, getting 2 columns",
    "text_2": "select distinct GROUP_CONCAT( distinct T.from_to from )\n( select `from` as from_to\n  from messages\n  union\n  select `to` as from_to\n  from messages\n) T\n",
    "label": 1
  },
  {
    "text_1": "How to get the data from the database created by another activity/ Fails to update data into database (Android studio,SQLite)",
    "text_2": "UPDATE Code_table SET CODE = 'Hello'\n",
    "label": 1
  },
  {
    "text_1": "Select query in MySQL works in Workbench, but not in code",
    "text_2": "String query=\"Select mail from users where \n    registered > CAST('\"+datestring+\"' as DATE);\"\n",
    "label": 1
  },
  {
    "text_1": "Select * from n tables",
    "text_2": "EXEC sp_msforeachtable 'SELECT * FROM  ?'\n",
    "label": 1
  },
  {
    "text_1": "RSS to Database - How to Insert String with Any Character?",
    "text_2": "echo stripslashes($data['description']);\n",
    "label": 1
  },
  {
    "text_1": "Database update row how to - Android",
    "text_2": "if(cd.moveToFirst()){\n",
    "label": 1
  },
  {
    "text_1": "What is the SQL for 'next' and 'previous' in a table?",
    "text_2": "(key:date) 1:1,2:3,3:8,4:8,5:19,10:19,11:67,15:45,16:8,17:3,18:1\n",
    "label": 1
  },
  {
    "text_1": "Find the difference between two dates in hours and minutes",
    "text_2": "CASE\n  WHEN abs(RM_LIVE.TRANSACTIONLOG.TIMESTAMP\n    - RM_LIVE.CRWGNDACTTIME.GNDACTSTART) <= 11/24 THEN 'LESS\"\nELSE 'MORE'\nEND AS \"mORE/LESS\",\n",
    "label": 1
  },
  {
    "text_1": "how to check if the record exists before insert to prevent duplicates?",
    "text_2": "INSERT INTO tblOrder (CustomerID, OrderTypeID, LoanNumber)\n  SELECT o.CustomerID, 3, o.LoanNumber\n  FROM   tblOrder as o\n  WHERE  o.OrderTypeID = 1\n  AND    NOT EXISTS (SELECT *\n                     FROM tblOrder tmp\n                     WHERE tmp.CustomerID = o.CustomerID\n                     AND   tmp.OrderTypeID = 3\n                     AND   tmp.LoanNumber = o.LoanNumber);\n",
    "label": 1
  },
  {
    "text_1": "How write sql statement to have in one line the same ID",
    "text_2": "ID Names Colors\n-- ----- ---------\n 1 A,C   blue,grey\n 3 D,F   pink,blue\n 4 E     red\n",
    "label": 1
  },
  {
    "text_1": "`Group By` returns empty rows",
    "text_2": " INNER JOIN Transactions ON Transactions.`idPortfolio` = Ongoing_Portfolio.idPortfolio\n",
    "label": 1
  },
  {
    "text_1": "Merging 2 sql statements with where clause",
    "text_2": "SELECT *, COUNT(i.id) as chance\nFROM users u LEFT JOIN\n     invitations i\n     ON u.fbuid = i.inviter\nWHERE u.datecreated BETWEEN '$startdate' AND '$enddate' and i.isaccepted=1\nGROUP BY fbuid;\n",
    "label": 1
  },
  {
    "text_1": "Data Storage / organisation of a large scale website. How to organise?",
    "text_2": "id     title         user_id\n-------------------------\n1      Nice picture  1\n2      This too!     2\n",
    "label": 1
  },
  {
    "text_1": "DC2Type:array comment being added to field when doing a Doctrine migration diff",
    "text_2": "<?php\n\nnamespace My\\DBAL\\Types;\n\n/**\n * Overwrite array type to prevent comment hint\n */\nclass ArrayType extends \\Doctrine\\DBAL\\Types\\ArrayType \n{\n    /**\n     * {@inheritdoc}\n     */\n    public function requiresSQLCommentHint(AbstractPlatform $platform)\n    {\n        return false;\n    }\n}\n",
    "label": 1
  },
  {
    "text_1": "Creating a superset in SQL Server",
    "text_2": "SELECT p.ID, p.Name ,p.Value, x.Col AS Manager\nFROM dbo.Persons p\nCROSS APPLY (SELECT Col FROM (SELECT 'Steve' UNION ALL SELECT 'Bill')AS T(Col))X\n",
    "label": 1
  },
  {
    "text_1": "Select User data from the combination of four tables",
    "text_2": "Select *\nfrom User\nInner Join AreaConnection on AreaConnection.userid = User.id\nInner Join SmallArea on SmallArea on SmallArea.id = AreaConnection.smallarea\nInner Join BigArea on BigArea.id = SmallArea.bigarea\n",
    "label": 1
  },
  {
    "text_1": "SQL query for today's date minus two months",
    "text_2": "SELECT * FROM MyTable\nWHERE MyDate < DATEADD(month, -2, GETDATE())\n",
    "label": 1
  },
  {
    "text_1": "SQL Server query get rows table 1 - rows table 2 without null value",
    "text_2": "select\nt1.id, t1.amount - isnull(t2.amountTable2,0) as 'amount'\nfrom table1 T1\nleft join (select id, sum(ammunt) as 'amountTable2' from table2 group by Id) T2\n       on t1.id = t2.id\norder by t1.id\n",
    "label": 1
  },
  {
    "text_1": "How to make a dynamic WHERE using COALESCE that has an OR clause",
    "text_2": "SELECT  *\nFROM    dbo.Vehicle\nWHERE   @MaxAge IS NULL -- return everything if null\nOR      DATEADD(YEAR, -@MaxAge, GETDATE()) <= RegistrationDate\nOR      DATEADD(YEAR, -@MaxAge, GETDATE()) <= ProductionDate\n",
    "label": 1
  },
  {
    "text_1": "Get dates of a day of week in a date range",
    "text_2": "SELECT day FROM f_mondays('[2014-04-14,2014-05-02)'::daterange);\n",
    "label": 1
  },
  {
    "text_1": "SQL number generation in concurrent environment (Transation isolation level)",
    "text_2": "merge into tbl\nusing (values (@year, @month, @office, @type)) as v(y,m,o,t)\non tbl.year = v.year and tbl.month = v.month and tbl.office = v.office and tbl.type = v.type\nwhen not matched by target then\n  insert (year, month, office, type, number) values(@year, @month, @office, @type, 1)\nwhen matched then\n  update set @number = tbl.number, tbl.number += 1\n;\n",
    "label": 1
  },
  {
    "text_1": "Replace date part of datetime value",
    "text_2": " e.g. datediff(d, '20121001', '20121008') => +7 days\n      dateadd(d, <+7>, '20121001 xx:xx') => add the 7 days, keeping time\n",
    "label": 1
  },
  {
    "text_1": "Rebuild Informatica persistent cache only when data is updated in the table",
    "text_2": "update run_history \nset last_read_time = sysdate\nwhere process_name='EMP_DIM';\n",
    "label": 1
  },
  {
    "text_1": "Select Statement With An Update",
    "text_2": "SELECT \n    article_id, \n    title, \n    text, \n    views\nFROM TABLE\nWHERE article_id = article_id;\n\nUPDATE TABLE\nSET views = views + 1\nWHERE article_id = article_id;\n",
    "label": 1
  },
  {
    "text_1": "powershell logging results to DB",
    "text_2": "$objectVariable.ObjectProperty\n",
    "label": 1
  },
  {
    "text_1": "creating a data base for staff time table?",
    "text_2": "SETUP:\nCREATE TABLE periods (\n   id int, \n   period varchar(55)\n);\n",
    "label": 1
  },
  {
    "text_1": "how to check a field is char or number?",
    "text_2": "...\nWHERE column1 IS NOT NULL\n",
    "label": 1
  },
  {
    "text_1": "Get a unique hash value based on value of 3 columns of a table",
    "text_2": "DECLARE\n  unique_id_l VARCHAR2(4000); --consider using table_1.column_unique_id%TYPE\nBEGIN\nFOR rec in \n   ( --use your 3 columns here you want to make the unique value\n    SELECT col_1, col_2, col_3\n    FROM source_table\n    GROUP BY col_1, col_2, col_3 --this GROUP BY will insure uniqueness\n   )\n    LOOP\n        unique_id_l := get_unique_id(rec.col_1, rec.col_2, rec.col_3); --use your function to build the unique ID we want to submit into the new tables\n\n        INSERT INTO table_1 (column_unique_id)\n        VALUES (unique_id_l);\n    END LOOP;\n\nEND;\n",
    "label": 1
  },
  {
    "text_1": "Looping with SQL statements",
    "text_2": "select a.*,\n       (select b.value\n        from b\n        where b.qnt <= a.qnt\n        order by b.qnt desc\n        limit 1\n       ) as value\nfrom a;\n",
    "label": 1
  },
  {
    "text_1": "Session Variable Attached to String",
    "text_2": "<%\nIf Session(\"PublicGID\") <> \"\" Then\n  Response.Write(strDB_DirectoryBannerImage)\nEnd If\n%>\n",
    "label": 1
  },
  {
    "text_1": "Doctrine2 select birthday range",
    "text_2": "Doctrine_Query::create()\n    ->select('e.firtsname')\n    ->from('tbl_office_employee e')\n    ->where('e.date BETWEEN ? AND ?', array($today_date, $date_plus_5_days))\n    ->getSqlQuery();\n",
    "label": 1
  },
  {
    "text_1": "Median calculation over pre-aggregated / already-grouped by metrics",
    "text_2": "╔═══════╦═════════════╦═══════════════╗\n║ COLOR ║ MEASUREMENT ║ MEASURE_COUNT ║\n╠═══════╬═════════════╬═══════════════╣\n║ RED   ║           4 ║             5 ║\n║ RED   ║           5 ║             3 ║\n║ RED   ║           6 ║             1 ║\n║ BLUE  ║           5 ║             4 ║\n║ BLUE  ║           6 ║             5 ║\n╚═══════╩═════════════╩═══════════════╝\n",
    "label": 1
  },
  {
    "text_1": "awk - print only first line of duplicates and the line below it",
    "text_2": "awk '/foo/          { do this for lines that contain \"foo\" anywhere }\n     ($1 == \"bar\")  { do this for lines whose first field is exactly \"bar' }\n     ($NF ~ /baz/)  { do this for lines whose last field contains \"baz\" }\n     (NF == 1)      { do this for lines with exactly one field }\n     (NR == 10)     { do this only on the 10th line }'\n",
    "label": 1
  },
  {
    "text_1": "SQL Sever Dates in strange format in SELECT",
    "text_2": "SELECT TOP 1 Rct_Id, CreationDate\nFROM Receipts\nWHERE CreationDate IS NOT NULL\nORDER BY 1 \n",
    "label": 1
  },
  {
    "text_1": "Greatest n per group reference with intervals in R or SQL",
    "text_2": "# Convert sample data provided in question\nclusters <- as.data.table(clusters)\ntags <- as.data.table(tags)\n\n# Rename chr and strand for easier joining\nsetnames(clusters, c(\"chr_clst\", \"strand_clst\"), c(\"chr\", \"strand\"))\n\n# Set key on each table for next step\nsetkey(clusters, chr, strand)\nsetkey(tags, chr, strand)\n\n# Merge on the keys\ntmp <- merge(clusters, tags, by = c(\"chr\", \"strand\"))\n\n# Find index (in merged table, tmp) of largest tag_count in each\n# group subject to start_clst <= end <= end_clst\nidx <- tmp[between(end, start_clst, end_clst),\n           list(IDX=.I[which.max(tag_count)]),\n           by=list(chr, start_clst,end_clst,strand)]$IDX\n\n# Get those rows from merged table\ntmp[idx]\n",
    "label": 1
  },
  {
    "text_1": "How to return hash_plan_value from PLAN_TABLE?",
    "text_2": "select extractValue(xmltype(other_xml), '/other_xml/info[@type=\"plan_hash\"]') plan_hash\nfrom plan_table\nwhere other_xml is not null\n    and statement_id = 'TEST3';\n\nPLAN_HASH\n---------\n2874664061\n",
    "label": 1
  },
  {
    "text_1": "Retrieve order numbers without certain items",
    "text_2": "Using LEFT JOIN/IS NULL:\n   SELECT x.order_number\n     FROM ORDERS x\nLEFT JOIN ORDERS y ON y.order_number = x.order_number\n                  AND y.item_name IN ('sprinkles', 'sugar cone')\n    WHERE y.id IS NULL\n",
    "label": 1
  },
  {
    "text_1": "How do we control dynamic ordering by a Field in a table?",
    "text_2": "INSERT INTO questions (question, position) \nSELECT 'New Question', COALESCE(MAX(position), 0) + 1\n  FROM questions;\n",
    "label": 1
  },
  {
    "text_1": "bat file command for Write exact plsql query output into csv file",
    "text_2": "set head off\nset feed off\nset pagesize 0\nspool c:\\myfolder\\myresult.csv\nprompt sysdate\nselect to_char(sysdate, 'dd-mon-yyyy') from dual;\nspool off\nset head on\nset feed 6\nquit\n",
    "label": 1
  },
  {
    "text_1": "Creating Temp Variables within Queries",
    "text_2": "SELECT var.QID,\n(var.QID + 1) AS THN\nFROM (SELECT 1+1 as QID) AS var\n",
    "label": 1
  },
  {
    "text_1": "How can I get and show data from CouchDB Cloudant with pure NodeJS?",
    "text_2": "var http = require('http');\n\nvar server_ipAddr = '127.0.0.1';\nvar server_port = 8080;\n\nvar server_http = http.createServer(function(req, res) {\n\n...\n\n      response.on('end', function() {\n        res.end(out); // <-- add or replace \"console.log(out);\"\n      })\n\n...\n\n\n}).listen(server_port, server_ipAddr);\n",
    "label": 1
  },
  {
    "text_1": "are there differences between condition in where and condition in on",
    "text_2": "select *\nfrom dbo.Orders orders\n    INNER JOIN dbo.OrderItems orderItems ON orderItems.OrderID = orders.OrderID\nwhere\n    orders.OrderDate > '01/01/2012'\n",
    "label": 1
  },
  {
    "text_1": "SQL: Total SUM on qty",
    "text_2": "select\n    PRODID, ITEMDES, QTY,\n    SUM(QTY) over (partition by PRODID) as total-qty-for-each-product\nfrom\n    products\n;\n",
    "label": 1
  },
  {
    "text_1": "K - word search SQL",
    "text_2": "  SELECT dwi.descriptionid\n    FROM DESCRIPTION_WORD_INDEX dwi\n    JOIN WORD a ON a.wordid = dwi.wordid\n               AND a.word = 'a'\n    JOIN WORD b ON b.wordid = dwi.wordid\n               AND b.word = 'b'\n    JOIN WORD c ON c.wordid = dwi.wordid\n               AND c.word = 'c'\n",
    "label": 1
  },
  {
    "text_1": "SQL Server : How do I determine if table1.col1 has a foreign key constraint on table2.col2",
    "text_2": "IF EXISTS(\n   SELECT 1 \n   FROM \n      vwForeignKeys \n   WHERE \n      TableName='table1' \n      AND ColName='column1' \n      AND ReferencedTableName='table2' \n      AND ReferencedColName='column2'\n) THEN \nBEGIN\n   --FOREIGN KEY EXISTS, DO SOMETHING\nEND\n",
    "label": 1
  },
  {
    "text_1": "How can I include primary key when using SELECT MAX() and GROUP BY?",
    "text_2": "ORDER BY LastPacketTime DESC, TrackID DESC\n",
    "label": 1
  },
  {
    "text_1": "Extract number from string with Oracle function",
    "text_2": "create function extract_number(in_number varchar2) return varchar2 is\nbegin\n  return regexp_replace(in_number, '[^[:digit:]]', '');\nend; \n",
    "label": 1
  },
  {
    "text_1": "trying to flatten rows into columns",
    "text_2": "| ROWID | FIRST |  LAST |\n-------------------------\n|     1 |  neil | young |\n|     2 |   bob | dylan |\n|     3 |   tom | petty |\n",
    "label": 1
  },
  {
    "text_1": "SQL NOT LIKE with multiple values",
    "text_2": "select od.*, o.*\nfrom OrderDetails od\njoin Orders o ON o.oKey = od.oKey\nleft join rejects on od.UnitDescription = rejects.RejectCode\nwhere CustomerID = '104'\n  and rejects.RejectCode is null\n",
    "label": 1
  },
  {
    "text_1": "Getting the sum of a count with conditions",
    "text_2": "sum(case when attend.attendc IN ('E','G','H','I','J','L','M','P','Q','V','X') then 1 else 0 end) over () as [Days Absent]\n",
    "label": 1
  },
  {
    "text_1": "How to combine multiple columns into one column and its data into another column?",
    "text_2": "PhoneType   PhoneNumber\n1   123-4342\n2   223-4342\n3   323-4342\n4   423-4342\n5   523-4342\n6   623-4342\n7   723-4342\n",
    "label": 1
  },
  {
    "text_1": "Can I use a GROUP BY in the first SELECT when CROSS APPLY is used further on?",
    "text_2": "With \nCTE1 \nas \n( \n    select fe.snap_name,fe.snap_accountid, fe.snap_entitlementcategory, fe.snap_entitlementcode, fi.invoicenumber, fi.totalamount \n    from \n        FilteredInvoice fi \n        join FilteredSNAP_entitlement fe on fi.accountid = fe.snap_accountid \n    group by fe.snap_name,fe.snap_accountid, fe.snap_entitlementcategory, fe.snap_entitlementcode, fi.invoicenumber, fi.totalamount \n)\nSELECT *\nFROM\n    CTE1\n    CROSS APPLY\n    (\n        select number, date\n        from invoice inv \n        where inv.custaccount = CTE1.custaccount\n        group by number, date\n    ) AS A\n;\n",
    "label": 1
  },
  {
    "text_1": "How to convert Integers to Strings that can be used as column names in postgresql?",
    "text_2": "query = 'INSERT INTO new_table(regionname, year, month, value)\n          SELECT regionname, y AS year, m AS month, ' || y::varchar || '-' || m::varchar || ' AS value\n          FROM old_table\n          WHERE ' || y::varchar || '-' || m::varchar || ' IS NOT NULL';\nexecute query;\n",
    "label": 1
  },
  {
    "text_1": "Why doesn't this SELECT query return the results I expect?",
    "text_2": "SELECT  p.prd_name, d.description\nFROM    (\n        SELECT  prd_cod\n        FROM    product pi\n        WHERE   MATCH(prd_name) AGAINST ('lcd tv' IN BOOLEAN MODE)\n        UNION\n        SELECT  prd_cod\n        FROM    description di\n        WHERE   MATCH(description) AGAINST ('lcd tv' IN BOOLEAN MODE)\n        ) q\nJOIN    product p\nON      p.prd_cod = q.prd_cod\nJOIN    description d\nON      d.prd_cod= p.prd_cod\nWHERE   MATCH(p.prd_name, d.description) AGAINST ('+lcd +tv' IN BOOLEAN MODE)\n",
    "label": 1
  },
  {
    "text_1": "SELECT SQL Statement not working as expected in VB.net Console application",
    "text_2": "Dim sqlQ As String = \"Select [JobID],[JobNumber],[ApplicationID],[GeneratedDate],\" +\n                    \"[ReceivedDate],[CompletedDate],[Status],[ExpectedRecordNumber],\" + \n                    \"[ReceivedRecordNumber],[BadRecordNumber] \" + \n                    \"FROM [cemail].[dbo].[JobTb] \" + \n                    \"WHERE ApplicationID = 7 AND Status = 10\"\n\nsqlCommand = New SqlCommand(sqlQ, connection)\nDim reader As SqlDataReader = sqlCommand.ExecuteReader()\nWhile reader.Read()\n     Dim jobID = reader(0)\n     Dim jobNumber = reader(1)\n     Dim appID = reader(2)\n     ..... 'and so on'\nEnd While \n",
    "label": 1
  },
  {
    "text_1": "Change Date values using PL/SQL to mm/dd/yyyy",
    "text_2": "TO_CHAR(<date_column>, 'MM/DD/YYYY')\n",
    "label": 1
  },
  {
    "text_1": "Regex to find if a number is within a range, example 1,3,10-15,17",
    "text_2": "Idiomatic Solution\nimport javax.annotation.Nonnull;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport com.google.common.collect.Range;\nimport com.google.common.collect.RangeSet;\nimport com.google.common.collect.TreeRangeSet;\n\npublic class Q25004732\n{\n    private static final Pattern RANGE = Pattern.compile(\"(?i)^(?=[a-z]+-[a-z]+$|\\\\d+-\\\\d+$)([a-z\\\\d]+)-([a-z\\\\d]+)$\");\n\n    public static void main(final String[] args)\n    {\n        final String[] sa = \"1,3,10-15,17,A,b,XX-ZZ,z\".split(\",\");\n        final RangeSet<String> rs = TreeRangeSet.create();\n        for (final String s : sa)\n        {\n            final Matcher m = RANGE.matcher(s);\n            if (m.find())\n            {\n                rs.add(Range.closed(m.group(1), m.group(2)));\n            }\n            else\n            {\n                rs.add(Range.closed(s, s));\n            }\n        }\n        report(\"13\", rs);\n        report(\"A\", rs);\n        report(\"XY\", rs);\n        report(\"c\", rs);\n        report(\"42\", rs);\n    }\n\n    private static void report(@Nonnull final String input, @Nonnull final RangeSet<String> rs)\n    {\n        if (rs.contains(input))\n        {\n            System.out.format(\"Found %s in the set %s\", input, rs);\n        }\n        else\n        {\n            System.out.format(\"Didn't find %s in set %s\", input, rs);\n        }\n        System.out.println();\n    }\n}\n",
    "label": 1
  },
  {
    "text_1": "count of distincts substring in query",
    "text_2": "SELECT SUBSTRING_INDEX(SUBSTRING_INDEX(t.col,'elem2=',-1),'|',1) AS a\n     , COUNT(*) AS b\n  FROM t\n WHERE t.col LIKE '%elem2=%'\n GROUP BY SUBSTRING_INDEX(SUBSTRING_INDEX(t.col,'elem2=',-1),'|',1)\n ORDER BY SUBSTRING_INDEX(SUBSTRING_INDEX(t.col,'elem2=',-1),'|',1)\n",
    "label": 1
  },
  {
    "text_1": "Oracle sql tables not displaying correctly but information within tables is correct?? using oracle 11g",
    "text_2": "SQL> column name format a20\nSQL> column city format a20\nSQL> column country format a10\n",
    "label": 1
  },
  {
    "text_1": "repeat record in sql with respect to a column value",
    "text_2": "SELECT NVL(ID, NVL(LAG(ID IGNORE NULLS) OVER(ORDER BY ROWID), ID)) AS ID,\n       NVL(COUNTRY, NVL(LAG(COUNTRY IGNORE NULLS) OVER(ORDER BY ROWID), COUNTRY)) AS COUNTRY,\n       AREADISCOUNT\nFROM   TAB1 T\nORDER  BY ROWID;\n",
    "label": 1
  },
  {
    "text_1": "Difference between Unique Key and Primary Keys",
    "text_2": "CREATE TABLE states (\n  state varchar(15) primary key,\n  abbr varchar(10) not null unique,\n  postal_code char(2) not null unique\n);\n",
    "label": 1
  },
  {
    "text_1": "is it possible to copy records from one db table on one server to another db table on another server using some query? (both tables are exactly same)",
    "text_2": "mysqladmin create db_name\nmysqldump -h 'other_hostname' --compress db_name | mysql db_name\n",
    "label": 1
  },
  {
    "text_1": "PostgreSQL plpgsql with subquery and dynamic SQL",
    "text_2": "UPDATE table_name t1\nSET \n",
    "label": 1
  },
  {
    "text_1": "SQL query to show top x records with evenly distributed values",
    "text_2": "insert into `tmp_company_sequence`( `surname`, `job_title`, `company_name`,`contact_code`,`date_added`)\nSELECT DISTINCT `surname`, `job_title`, `company_name`,`contact_code`,`date_added`\nFROM (`company_database`)\nWHERE `employee_code` IN ('6', '7', '8', '9', '10', '11', '12', '13')\nAND `turnover_code` IN ('5', '6', '7', '8')\nAND `contact_code` IN ('16', '17', '26', '27', '9', '10', '30', '31', '23', '24', '12', '13')     AND `industry_code` NOT IN ('22', '17', '35', '36')\norder by contact_code, added_date desc;\n",
    "label": 1
  },
  {
    "text_1": "How to return top 100 rows by a column value and then randomize theese top 100 rows?",
    "text_2": "WITH CTE_TOP as (SELECT TOP 100 * FROM Inlagg  ORDER BY Likes DESC)\nSELECT * FROM CTE_TOP ORDER BY NEWID();\n",
    "label": 1
  },
  {
    "text_1": "Comparing memory buffers",
    "text_2": "{$define BYFOUR}\n// if defined, the crc32 hashing is performed using 8 tables, for better\n// CPU pipelining and faster execution\n\nvar\n  // tables content is created from code in initialization section below\n  // (save 8 KB of code size from standard crc32.obj, with no speed penalty)\n  crc32tab: array[0..{$ifdef BYFOUR}7{$else}0{$endif},byte] of cardinal;\n\nfunction crc32(crc: cardinal; buf: PAnsiChar; len: cardinal): cardinal;\n// adapted from fast Aleksandr Sharahov version\nasm\n{$ifdef BYFOUR}\n  test edx, edx\n  jz   @ret\n  neg  ecx\n  jz   @ret\n  not eax\n  push ebx\n@head:\n  test dl, 3\n  jz   @bodyinit\n  movzx ebx, byte [edx]\n  inc  edx\n  xor  bl, al\n  shr  eax, 8\n  xor  eax,dword ptr [ebx*4 + crc32tab]\n  inc  ecx\n  jnz  @head\n  pop  ebx\n  not eax\n@ret:\n  ret\n@bodyinit:\n  sub  edx, ecx\n  add  ecx, 8\n  jg   @bodydone\n  push esi\n  push edi\n  mov  edi, edx\n  mov  edx, eax\n@bodyloop:\n  mov ebx, [edi + ecx - 4]\n  xor edx, [edi + ecx - 8]\n  movzx esi, bl\n  mov eax,dword ptr [esi*4 + crc32tab + 1024*3]\n  movzx esi, bh\n  xor eax,dword ptr [esi*4 + crc32tab + 1024*2]\n  shr ebx, 16\n  movzx esi, bl\n  xor eax,dword ptr [esi*4 + crc32tab + 1024*1]\n  movzx esi, bh\n  xor eax,dword ptr [esi*4 + crc32tab + 1024*0]\n  movzx esi, dl\n  xor eax,dword ptr [esi*4 + crc32tab + 1024*7]\n  movzx esi, dh\n  xor eax,dword ptr [esi*4 + crc32tab + 1024*6]\n  shr edx, 16\n  movzx esi, dl\n  xor eax,dword ptr [esi*4 + crc32tab + 1024*5]\n  movzx esi, dh\n  xor eax,dword ptr [esi*4 + crc32tab + 1024*4]\n  add ecx, 8\n  jg  @done\n  mov ebx, [edi + ecx - 4]\n  xor eax, [edi + ecx - 8]\n  movzx esi, bl\n  mov edx,dword ptr [esi*4 + crc32tab + 1024*3]\n  movzx esi, bh\n  xor edx,dword ptr [esi*4 + crc32tab + 1024*2]\n  shr ebx, 16\n  movzx esi, bl\n  xor edx,dword ptr [esi*4 + crc32tab + 1024*1]\n  movzx esi, bh\n  xor edx,dword ptr [esi*4 + crc32tab + 1024*0]\n  movzx esi, al\n  xor edx,dword ptr [esi*4 + crc32tab + 1024*7]\n  movzx esi, ah\n  xor edx,dword ptr [esi*4 + crc32tab + 1024*6]\n  shr eax, 16\n  movzx esi, al\n  xor edx,dword ptr [esi*4 + crc32tab + 1024*5]\n  movzx esi, ah\n  xor edx,dword ptr [esi*4 + crc32tab + 1024*4]\n  add ecx, 8\n  jle @bodyloop\n  mov eax, edx\n@done:\n  mov edx, edi\n  pop edi\n  pop esi\n@bodydone:\n  sub ecx, 8\n  jl @tail\n  pop ebx\n  not eax\n  ret\n@tail:\n  movzx ebx, byte [edx + ecx]\n  xor bl,al\n  shr eax,8\n  xor eax,dword ptr [ebx*4 + crc32tab]\n  inc ecx\n  jnz @tail\n  pop ebx\n  not eax\n{$else}\n  test edx, edx\n  jz @ret\n  neg ecx\n  jz @ret\n  not eax\n  sub edx,ecx\n  push ebx\n@next:\n  movzx ebx, byte [edx + ecx]\n  xor bl, al\n  shr eax, 8\n  xor eax, [ebx*4 + crc32tab]\n  add ecx, 1\n  jnz @next\n  pop ebx\n  not eax\n@ret:\n{$endif BYFOUR}\nend;\n\nand the associated code to create the tables\n\n\nprocedure InitCrc32Tab;\nvar i,n: integer;\n    crc: cardinal;\nbegin // this code size is only 105 bytes, generating 8 KB table content  \n  for i := 0 to 255 do begin\n    crc := i;\n    for n := 1 to 8 do\n      if (crc and 1)<>0 then\n        // $edb88320 from polynomial p=(0,1,2,4,5,7,8,10,11,12,16,22,23,26)\n        crc := (crc shr 1) xor $edb88320 else\n        crc := crc shr 1;\n    crc32tab[0,i] := crc;\n  end;\n{$ifdef BYFOUR}\n  for i := 0 to 255 do begin\n    crc := crc32tab[0,i];\n    for n := 1 to 7 do begin\n      crc := (crc shr 8) xor crc32tab[0,byte(crc)];\n      crc32tab[n,i] := crc;\n    end;\n  end;\n{$endif}\nend;\n",
    "label": 1
  },
  {
    "text_1": "List the name of division that has the most employees working on projects",
    "text_2": "select d.id, d.name, p.maxcounts\nfrom dept d, \n(select we.dep, max(we.counts) as maxcounts \n from (select w.eid, count(w.pid) as counts, \n e.dep as dep from employee e, workon w\nwhere e.id = w.eid\ngroup by e.dep) as we) as p\nwhere d.id = p.dep\n;\n",
    "label": 1
  },
  {
    "text_1": "Is \"!=\" not the opposite of \"=\"?",
    "text_2": "+-----+-----+--------+-----------+------+------+---------+------------+\n| 1=1 | 1=2 | 1=NULL | NULL=NULL | 1<>1 | 1<>2 | 1<>NULL | NULL<>NULL |\n+-----+-----+--------+-----------+------+------+---------+------------+\n|   1 |   0 |   NULL |      NULL |    0 |    1 |    NULL |       NULL |\n+-----+-----+--------+-----------+------+------+---------+------------+\n",
    "label": 1
  },
  {
    "text_1": "Check if a time period is included in another time period",
    "text_2": "select *\nfrom t\nwhere XXX between start_date and date_add(start_date, interval length day);\n",
    "label": 1
  },
  {
    "text_1": "Joining Parent & Child ID's on 2 tables and returning result from another row",
    "text_2": "    85    Server Support - Site Visits Chargeable\n    ...\n",
    "label": 1
  },
  {
    "text_1": "Multiple Line Variable into SQLPlus from Shell Script",
    "text_2": "sqlplus -s /nolog <<EOF1\nconnect / as sysdba\nset verify off\n$sql\nEOF1\n",
    "label": 1
  },
  {
    "text_1": "Oracle SQL: Update a table with data from another table",
    "text_2": "UPDATE (SELECT t1.id, \n               t1.name name1,\n               t1.desc desc1,\n               t2.name name2,\n               t2.desc desc2\n          FROM table1 t1,\n               table2 t2\n         WHERE t1.id = t2.id)\n   SET name1 = name2,\n       desc1 = desc2\n",
    "label": 1
  },
  {
    "text_1": "query between dates returns rows from previous months too",
    "text_2": "WHERE STR_TO_DATE(l.created_on,  '%d-%m-%Y')  BETWEEN '2013-02-06' AND '2013-02-07' \n",
    "label": 1
  },
  {
    "text_1": "sql - join 2 tables 10 times",
    "text_2": "select * from projects proj\nleft join people p1 on proj.assistant1 = p1.peopleid\nleft join people p2 on proj.assistant2 = p2.peopleid\nleft join people p3 on proj.assistant3 = p3.peopleid\nleft join people p4 on proj.assistant4 = p4.peopleid\nleft join people p5 on proj.assistant5 = p5.peopleid\nleft join people p6 on proj.assistant6 = p6.peopleid\nleft join people p7 on proj.assistant7 = p7.peopleid\nleft join people p8 on proj.assistant8 = p8.peopleid\nleft join people p9 on proj.assistant9 = p9.peopleid\nleft join people p10 on proj.assistant10 = p10.peopleid\n",
    "label": 1
  },
  {
    "text_1": "In a specific mySQL row find the column with the matching value",
    "text_2": "SELECT\n  CONCAT(\n    CASE WHEN col2 = 'B' THEN 'Col2 ' ELSE '' END,\n    CASE WHEN col4 = 'B' THEN 'Col4 ' ELSE '' END,\n    CASE WHEN col6 = 'B' THEN 'Col6' ELSE '' END\n  ) AS which_columns\nFROM yourtable\nWHERE id = 2\n",
    "label": 1
  },
  {
    "text_1": "MySQL JOIN query help: return only one row from the right-most table for every row in the left-most table",
    "text_2": "   SELECT u.id,\n          u.name,\n          COALESCE(MIN(t.spent), 0) AS spent\n     FROM USERS u\nLEFT JOIN TRANSACTIONS t ON t.uid = u.id\n GROUP BY u.id, u.name\n",
    "label": 1
  },
  {
    "text_1": "How to update a row from one table to another?",
    "text_2": "UPDATE dialecte_org_5.tb_data_iae t1\nINNER JOIN dialecte_org_88.tb_data_iae t2 ON t1.id = t2.id\nSET t1.field1 = t2.field1, t1.field2 = t2.field2, t1.field3 = t2.field3\nWHERE t2.id_dialecte=2413\n",
    "label": 1
  },
  {
    "text_1": "SQL Case Statement Syntax?",
    "text_2": "CASE case-expression\n    WHEN when-expression-1 THEN value-1\n  [ WHEN when-expression-n THEN value-n ... ]\n  [ ELSE else-value ]\nEND\n",
    "label": 1
  },
  {
    "text_1": "How is an index used in an query with aggregation?",
    "text_2": "foreach(page in index.pages)\n{\n  foreach(row in page.rows)\n  {\n    Compare and accumulate franchise and worth from row\n  }\n}\n-- Total IO = index.pages\n-- Assuming that index is thinner than table, a win!\n",
    "label": 1
  },
  {
    "text_1": "Linq to EF - Select Many to filter out any occurrences from one side of many-to-many",
    "text_2": "var userQry = context.Users.Where(\n                u => !u.Roles.Any(r => r.RoleName == \"Super Admin\"));\n",
    "label": 1
  },
  {
    "text_1": "find all rows whose one column belongs to the same value and also another column satisfy a condition on SQL server 2008",
    "text_2": "SELECT col1\nFROM table1\nGROUP BY col1\nHAVING COUNT(NULLIF(col2, 0)) = 0\n;",
    "label": 1
  },
  {
    "text_1": "how to pass variable from shell script to sqlplus",
    "text_2": "SELECT COUNT(*) as &1\nFROM TABLE(SEM_MATCH(\n'{\n        ?s rdf:type :ProcessSpec .\n        ?s ?p ?o\n}',SEM_Models('&2'),NULL,\nSEM_ALIASES(SEM_ALIAS('','http://VISION/DataSource/SEMANTIC_CACHE#')),NULL));\n",
    "label": 1
  },
  {
    "text_1": "How does multiple \"ON\" in a JOIN statement works",
    "text_2": "A join B join C ON <condition1> ON <condition2>\n",
    "label": 1
  },
  {
    "text_1": "How to \"HAVING COUNT(DISTINCT(col1, col2))\"",
    "text_2": "SELECT col1\nFROM\n    (\n    SELECT\n        col1, \n        ROW_NUMBER() OVER (PARTITION BY col1 ORDER BY col2, col3) as rn\n    FROM table\n    ) T\nGROUP BY col1\nHAVING MAX(rn) = 1\n",
    "label": 1
  },
  {
    "text_1": "Populating Monthly cost to daily records",
    "text_2": "SELECT \"Cost\" / EXTRACT(DAY FROM LAST_DAY(\"Date\")) \"cost_per_day\",\n       LAST_DAY(\"Date\") \"month\"\nFROM T\nWHERE \"Flag\" = 'MONTHLY'\n",
    "label": 1
  },
  {
    "text_1": "how to use colon separated values in oracle sql where clause",
    "text_2": "ALTER SESSION SET NLS_COMP=LINGUISTIC;\nALTER SESSION SET NLS_SORT=FRENCH_CI;\n\nSelect *\nfrom Table\nWhere (':' || ColB  || ':' like '%:testc:%') and ColA = 1;\n",
    "label": 1
  },
  {
    "text_1": "Forcing a '0' return value when no matching records exist",
    "text_2": "MonthNumber\n-----------\n          1\n          2\n          3\n          4\n          5\n          6\n          7\n          8\n          9\n         10\n         11\n         12\n",
    "label": 1
  },
  {
    "text_1": "How to alter relationship in MS SQL 2008?",
    "text_2": "ALTER TABLE User\nDROP CONSTRAINT FK_User_Device;\n",
    "label": 1
  },
  {
    "text_1": "Oracle: DECODE and WHERE Clause",
    "text_2": "alter table theTable\n  add theRowDecoded int as generated always (decode(theRow, .....)) virtual;\n",
    "label": 1
  },
  {
    "text_1": "how to count the particular string in row wise in mysql table",
    "text_2": "select name,\n    if (sub1='poor', 1, 0) +\n    if (sub2='poor', 1, 0) +\n    if (sub3='poor', 1, 0)\nas total from Data\n",
    "label": 1
  },
  {
    "text_1": "JOIN multiple rows to multiple columns in single row Netezza/Postgres",
    "text_2": "(Date + Row_Num*INTERVAL'1 DAY')::DATE \n",
    "label": 1
  },
  {
    "text_1": "SQL compare multiple rows or partitions to find matches",
    "text_2": "select d.teacher_id, sa.row_num, sa.seat_num, sa.child_name\nfrom seatingarrangement sa join\n     data d\n     on sa.seat_argmt_id = d.seat_argmt_id\ngroup by d.teacher_id, sa.row_num, sa.seat_num, sa.child_name\nhaving count(*) > 1;\n",
    "label": 1
  },
  {
    "text_1": "TSQL - using IN with PIVOT",
    "text_2": "\n...\n\nIN ( [first pivoted column], \n\n     [second pivoted column],\n\n...\n...\n\n     [last pivoted column])\n",
    "label": 1
  },
  {
    "text_1": "Writing query to normalize a table",
    "text_2": "CREATE TABLE dbo.Territory\n(id int identity, STATE nvarchar(255), CITY nvarchar(255),ZIP nvarchar(255));\n\ncreate table dbo.customer (CUS_ID int identity, territoryid int,        CUS_PHONE varchar (12),  CUS_NAME varchar(25))\n\nalter table dbo.customer  \nADD CONSTRAINT t_id,\nFOREIGN KEY (territoryid) \nREFERENCES   dbo.Territory(id)\n",
    "label": 1
  },
  {
    "text_1": "Delete a SMS Conversation",
    "text_2": " String numberFilter = \"address='\"+ phoneNumber + \"'\";\n String messageid = null;\n Cursor cursor = mContext.getContentResolver().query(Uri.parse(\"content://sms/\"), \n              null, numberFilter, null, null);\n\n if (cursor.moveToFirst()) {\n      messageid = cursor.getString(0);\n }\n",
    "label": 1
  },
  {
    "text_1": "nested select query in elasticsearch",
    "text_2": "select * from index where tags not in ('whitelist')\n",
    "label": 1
  },
  {
    "text_1": "Use of LENGTH in CTE",
    "text_2": "WITH ShowMessage\nAS\n(\nSELECT STATEMENT = CAST('I Like ' AS VARCHAR(300)) as 'STATEMENT', LEN('I Like ') as 'Length'\nUNION ALL\nSELECT\n      CAST(STATEMENT + 'Stackoverflow! ' AS VARCHAR(300))\n      , LEN(STATEMENT) FROM ShowMessage\nWHERE LENGTH < 300\n)\nSELECT STATEMENT, LENGTH FROM ShowMessage\n",
    "label": 1
  },
  {
    "text_1": "How to represent data with meaning dependent on other columns?",
    "text_2": "CREATE VIEW Location AS\n   SELECT id, 'Farm' as type, name, salary FROM Farm\n   UNION ALL\n   SELECT id, 'Factory' as type, name, salary FROM Factory\n",
    "label": 1
  },
  {
    "text_1": "How does multilevel grouping work?",
    "text_2": "from Employee left join [Achivements] on Employee.EmpID = [Achivements].EmpID\n",
    "label": 1
  },
  {
    "text_1": "Oracle : calculate duration between two dates in specific format",
    "text_2": "WITH times ( start_time, end_time ) AS (\n  SELECT TIMESTAMP '2015-01-01 00:00:00', TIMESTAMP '2015-01-03 10:25:30.350' FROM DUAL\n  UNION ALL\n  SELECT TIMESTAMP '2015-01-01 00:00:00', TIMESTAMP '2015-01-01 09:00:00.000607' FROM DUAL\n  UNION ALL\n  SELECT TIMESTAMP '2015-03-01 00:00:00', TIMESTAMP '2016-03-01 00:00:00' FROM DUAL\n  UNION ALL\n  SELECT TIMESTAMP '2015-01-01 00:00:00', TIMESTAMP '2016-01-11 00:00:00' FROM DUAL\n)\nSELECT TO_CHAR( start_time, 'YYYY-MM-DD HH24:MI:SS.FF6' ) AS start_time,\n       TO_CHAR( end_time, 'YYYY-MM-DD HH24:MI:SS.FF6' ) AS end_time,\n       REGEXP_REPLACE( end_time - start_time, '^[+-]0*(\\d+) 0?(\\d+:\\d{2}:\\d{2}\\.\\d{3}\\d*?)0*$', '\\1d \\2' ) AS time_difference\nFROM   times\n",
    "label": 1
  },
  {
    "text_1": "Pivot dynamic column",
    "text_2": "select *\nfrom\n(\n  select date, value, col\n  from yourtable\n  unpivot\n  (\n    value\n    for col in (tcount, count)\n  ) unpiv\n) src\npivot\n(\n  max(value)\n  for date in ([2013-02-06], [2013-02-12], \n               [2013-02-21], [2013-02-27])\n) piv;\n",
    "label": 1
  },
  {
    "text_1": "Oracle column default value in .NET",
    "text_2": "CREATE OR REPLACE \n  FUNCTION GetColumnDefaultValue(\n    TableName IN varchar2,\n    ColumnName IN varchar2\n  )\n  RETURN varchar2\n    AS ddLong long; \n    BEGIN\n      SELECT data_default\n      INTO ddLong\n      FROM user_tab_columns\n      WHERE table_name = TableName\n        AND column_name = ColumnName;\n    RETURN\n      substr(ddLong,0,255);\n    END;\n",
    "label": 1
  },
  {
    "text_1": "How to add attributes to an existing xml string stored as a field from the rest of the columns in the same row using SQL",
    "text_2": "<row ManufacturerID=\"6\" \n     ManufacturerName=\"AMES999\" \n     IsDeleted=\"0\" \n     Concurrency=\"AAAAAAABTAk=\" \n     EntryID=\"1\" \n     TableName=\"Manufacturers\" \n     AuditDate=\"2013-01-30T15:48:24.690\" \n     ChangeType=\"U\" />\n",
    "label": 1
  },
  {
    "text_1": "RSQLite query with user specified variable in the WHERE field",
    "text_2": "  years <- seq(2000,2010)\n  data <- lapply(years, function(y) {\n     dbGetQuery(db, paste(\"SELECT * FROM annual WHERE fiscal=\", y, sep=\"\")\n  }\n",
    "label": 1
  },
  {
    "text_1": "Updating large record sets into a normalized Access database",
    "text_2": "MERGE INTO Boxes\n   USING (\n          SELECT B1.ID AS boxKey, C1.ID AS catKey\n            FROM YourStagingTable AS S1\n                 INNER JOIN Boxes AS B1\n                    ON B1.boxID = S1.boxID\n                 INNER JOIN Categories AS C1\n                    ON C1.category = S1.NewCategory\n         ) AS source (\n                      boxKey, catKey\n                     )\n      ON Boxes.ID = source.boxKey\nWHEN MATCHED THEN\n   UPDATE\n      SET catKey = source.catKey;\n",
    "label": 1
  },
  {
    "text_1": "What SQL code is best for the following column to row transformation?",
    "text_2": "SELECT \n    cd1.Year,\n    cd1.LocationCode,\n    cd1.School,\n    'School_' & COUNT(*) AS XtabColumn\nFROM\n    CurrentData AS cd1\n    INNER JOIN\n    CurrentData AS cd2\n        ON cd2.Year = cd1.Year\n            AND cd2.LocationCode = cd1.LocationCode\n            AND cd2.School <= cd1.School\nGROUP BY\n    cd1.Year,\n    cd1.LocationCode,\n    cd1.School\n",
    "label": 1
  },
  {
    "text_1": "SQL Server: IF EXISTS ; ELSE",
    "text_2": "if exists(select 1 from table where id = 4)\n",
    "label": 1
  },
  {
    "text_1": "How to obtain min or max of a 3-dimensional array?",
    "text_2": "SELECT min(elem) AS min_elem\nFROM   unnest(my_arr) AS elem\n",
    "label": 1
  },
  {
    "text_1": "update multiple records in multiple nested tables in oracle",
    "text_2": "SQL> select f.force_name, t.id, t.name\n  2  from transformer_forces f, table(f.force_members) t\n  3  /\n\nFORCE_NAME         ID NAME\n---------- ---------- --------------------\nAutobot             0 Metroplex\nAutobot             0 Optimus Prime\nAutobot             0 Rodimus\nDecepticon          0 Galvatron\nDecepticon          0 Megatron\nDecepticon          0 Starscream\nDinobot             0 Grimlock\nDinobot             0 Swoop\nDinobot             0 Snarl\n\n9 rows selected.\n\nSQL>\n",
    "label": 1
  },
  {
    "text_1": "How to optimize this query?",
    "text_2": "select *  \nfrom A a, B b\nWhere \na.id_a = b.id \nand a.valid_from = (select max(valid_from) \n                    from A \n                    where id_a = b.id \n                    and valid_from <= b.date)\norder by valid_from desc\n",
    "label": 1
  },
  {
    "text_1": "Will be executed everything which is into parenthesis first?",
    "text_2": "mysql> SET @`out` := 1;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT (FALSE AND (SELECT @`out` := 0));\n+----------------------------------+\n| (FALSE AND (SELECT @`out` := 0)) |\n+----------------------------------+\n|                                0 |\n+----------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT @`out`;\n+--------+\n| @`out` |\n+--------+\n|      1 | -- <-- Not change\n+--------+\n1 row in set (0.00 sec)\n\nmysql> SELECT (TRUE AND (SELECT @`out` := 0));\n+---------------------------------+\n| (TRUE AND (SELECT @`out` := 0)) |\n+---------------------------------+\n|                               0 |\n+---------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT @`out`;\n+--------+\n| @`out` |\n+--------+\n|      0 | -- <-- Change\n+--------+\n1 row in set (0.00 sec)\n",
    "label": 1
  },
  {
    "text_1": "How to separate date and time from a datetime?",
    "text_2": "SELECT blah FROM tbl WHERE DATE(some_datetime_field) = '2012-04-02';\n",
    "label": 1
  },
  {
    "text_1": "MYSQL - Join most recent matching record from one table to another",
    "text_2": "   SELECT c.*,\n          x.*\n     FROM CASES c\nLEFT JOIN NOTES x ON x.case_id = c.case_id\n     JOIN (SELECT n.case_id,\n                  MAX(n.note_date) AS max_note_date\n             FROM NOTES n\n         GROUP BY n.case_id) y ON y.case_id = x.case_id\n                              AND y.max_note_date = x.note_date\n",
    "label": 1
  },
  {
    "text_1": "Sql subquery with inner join",
    "text_2": "SELECT  T.Tourist_ID\n        ,T.Tourist_Name\n        ,EC.Extra_Charge_ID\n        ,EC.Extra_Charge_Description\nFROM    Tourist AS T\nINNER JOIN Tourist_Extra_Charges AS TEC ON T.Tourist_ID= TEC.Tourist_ID\nINNER JOIN EXTRA_CHARGES AS EC ON TEC.Extra_Charge_ID = EC.Extra_Charge_ID;\n",
    "label": 1
  },
  {
    "text_1": "SQL select distinct where exist row for each id in other table",
    "text_2": "select id\nfrom tableA a\nwhere find_in_set(a.b, IDLISTHERE) > 0\ngroup by id\nhaving count(distinct b) = (select count(distinct b) from tableB where find_in_set(a.b, IDLISTHERE) > 0);\n",
    "label": 1
  },
  {
    "text_1": "SQL operator IN returns only DISTINCT",
    "text_2": "SELECT m.*, (LENGTH('this paper present this and this this') - LENGTH(REPLACE('this paper present this and this this', term, ''))) / LENGTH(term) AS count\nFROM myTable;\n",
    "label": 1
  },
  {
    "text_1": "Oracle 11.2 to_number multiple commas",
    "text_2": "SELECT TO_NUMBER(example_num, RPAD('9', LENGTH(example_num) - 1, '9')) fudge\nFROM table_of_numbers\n",
    "label": 1
  },
  {
    "text_1": "mysql database - statement to use?",
    "text_2": "ALTER TABLE TableA DROP COLUMN account;\n",
    "label": 1
  },
  {
    "text_1": "SQL: split string using a separator value",
    "text_2": "SELECT ROW_SPLIT.CONTRACT_ID,\n    WM_CONCAT(ROW_SPLIT.COUNTRY_NAME) AS COUNTRY_LIST\n  FROM\n    (SELECT PQ.ID AS CONTRACT_ID,\n      PQ.COUNTRY_CODE,\n      COUT.TEXT AS COUNTRY_NAME\n    FROM\n      (SELECT ID,\n        extract(value(d), '//row/text()').getStringVal() AS COUNTRY_CODE\n      FROM\n        (SELECT ID,\n          XMLTYPE('<rows><row>'\n          || REPLACE(EXCLUDED_NATIONALITIES, ',', '</row><row>')\n          || '</row></rows>') AS xmlval\n        FROM PROPERTY_CONTRACT\n        ) x,\n        TABLE(xmlsequence(extract(x.xmlval, '/rows/row'))) d\n      ) PQ\n    JOIN COUNTRY C\n    ON C.CODE = PQ.COUNTRY_CODE\n    LEFT OUTER JOIN TEXT COUT\n    ON C.CODE         = COUT.CODE\n    AND COUT.CATEGORY = 'COUNTRY'\n    AND COUT.LANGUAGE = 'en'\n    ORDER BY PQ.ID,\n      COUT.TEXT\n    ) ROW_SPLIT\n  GROUP BY ROW_SPLIT.CONTRACT_ID;\n",
    "label": 1
  },
  {
    "text_1": "SQ find total count of each Type in a column",
    "text_2": "SELECT SUM(CASE WHEN Type = 'Blue' THEN 1 ELSE 0 END) AS Blue, SUM(CASE WHEN Type = 'Red' THEN 1 ELSE 0 END) AS Red FROM TABLE\n",
    "label": 1
  },
  {
    "text_1": "I can't decide how to structure my table",
    "text_2": "CREATE  TABLE IF NOT EXISTS `form_submissions` (\n  `submission_id` INT NOT NULL ,\n  `name` TEXT NOT NULL ,\n  `phone` TEXT NOT NULL ,\n  PRIMARY KEY (`submission_id`) )\n;\n",
    "label": 1
  },
  {
    "text_1": "SQL Return Null if One Column is Null (Opposite of COALESCE())",
    "text_2": "CASE \n WHEN (c1 >= c2 AND c1 >= c3) THEN c1\n WHEN (c2 >= c1 AND c2 >= c3) THEN c2\n WHEN (c3 >= c1 AND c3 >= c2) THEN c3\nEND\n",
    "label": 1
  },
  {
    "text_1": "SQL Server Getting where an data object was based in a Period of Time given Track Info",
    "text_2": "select      ISNULL(A.StoreID,-1)\n,           ISNULL(B.StoreID,-1)\n,           A.ProductID\n,           A.value\n,           B.value\n,           A.DateID\n,           B.DateID\n,           ROW_NUMBER() OVER (Partition by B.ProductID Order by A.DateID)\nfrom            #Trackings A\nJoin            #Trackings B\nOn              A.ProductID = B.ProductID\nAnd             A.Aux_Row_Number + 1 = B.Aux_Row_Number\nAND             ISNULL(A.StoreID,0) <> ISNULL(B.StoreID ,0)\n",
    "label": 1
  },
  {
    "text_1": "Good pratice for SQL message table",
    "text_2": "id    date                  message\n1     2012-02-10 14:23:54   foo\n2     2012-02-10 16:01:04   bar\n3     2012-02-10 16:01:04   baz\n",
    "label": 1
  },
  {
    "text_1": "Delete record based on text found in a field (",
    "text_2": "DELETE FROM YourTable\nWHERE\n       YourField = \"\"\n    OR YourField ALike \"511-%\"\n    OR YourField ALike \"CARL-%\";\n",
    "label": 1
  },
  {
    "text_1": "Mysql query with a join back to the same table and a count",
    "text_2": "SELECT a.*, COUNT(b.id) > 0 AS has_children\nFROM   InvoiceItem a LEFT JOIN InvoiceItem b ON b.parentid = a.id\nWHERE  a.id = ?\n",
    "label": 1
  },
  {
    "text_1": "Weird order of sequence in Oracle DB + Hibernate",
    "text_2": " alter sequence seq1 order;\n",
    "label": 1
  },
  {
    "text_1": "How to get count and value using one t-sql statement?",
    "text_2": "SELECT \n  Column1, \n  Count(Column1) OVER (), \n  Count(Column2) OVER ()\nFROM Table1\n",
    "label": 1
  },
  {
    "text_1": "Arrange duplicates and number the records in a sequence - MySQL",
    "text_2": "SELECT  ID, Name, Account, DuplicateSR_No\nFROM\n        (\n            select  ID,\n                    Name,\n                    Account,\n                    @sum := if(@nme = Name AND @acct = Account, @sum ,0) + 1 DuplicateSR_No,\n                    @nme := Name,\n                    @acct := Account\n            from    TableName,\n                    (select @nme := '', @sum := 0, @acct := '') vars\n            order   by  Name, Account\n        ) s\nORDER   BY ID\n",
    "label": 1
  },
  {
    "text_1": "MySQL select from specific ID until match condition",
    "text_2": "select t.*\nfrom table t\nwhere id >= 3 and id < (select min(t2.id) from table t2 where t2.condition = 'b');\n",
    "label": 1
  },
  {
    "text_1": "List search results in a combobox",
    "text_2": "SELECT TOP 99 FROM (<your original SQL>)\n",
    "label": 1
  },
  {
    "text_1": "GROUP BY one column; pick arbitrary value for another",
    "text_2": "SELECT\n    p.Name, \n    ca.TransactionType,\n    ca.ReferenceOrderID\nFROM Production.Product AS p\nCROSS APPLY\n(\n    SELECT TOP (1) \n        th.TransactionType,\n        th.ReferenceOrderID\n    FROM Production.TransactionHistory AS th WITH (FORCESEEK) \n    WHERE \n        th.ProductID = p.ProductID\n) AS ca;\n",
    "label": 1
  },
  {
    "text_1": "MYSQL sort words in field",
    "text_2": "UPDATE postcode p JOIN\n(\n  SELECT id, GROUP_CONCAT(suburbs ORDER BY suburbs SEPARATOR ';') suburbs\n    FROM\n  (\n    SELECT t.id, SUBSTRING_INDEX(SUBSTRING_INDEX(t.suburbs, ';', n.n), ';', -1) suburbs\n      FROM postcode t CROSS JOIN tally n\n     WHERE n.n <= 1 + (LENGTH(t.suburbs) - LENGTH(REPLACE(t.suburbs, ';', '')))\n  ) q\n   GROUP BY id\n) s \n    ON p.id = s.id\n   SET p.suburbs = s.suburbs;\n",
    "label": 1
  },
  {
    "text_1": "How to see the actual Oracle SQL statement that is being executed",
    "text_2": "and TABLETYPE=’MT’\n",
    "label": 1
  },
  {
    "text_1": "reserve word field name table alias query",
    "text_2": "select foo.[value] from x as foo\n",
    "label": 1
  },
  {
    "text_1": "sql pulling a row for next or previous row of a current row",
    "text_2": "SELECT id, title, MIN(created) AS created_date\nFROM photo\nWHERE created >\n  (SELECT created FROM photo WHERE id = '32kJ')\nGROUP BY created\nORDER BY created ASC\nLIMIT 1;\n",
    "label": 1
  },
  {
    "text_1": "MS SQL - User Defined Function - Slope Intercept RSquare ; How to Group by Portfolio",
    "text_2": "--\n-- Create in line table value function (fast)\n--\n\n-- Remove if it exists\nIF OBJECT_ID('CalculateLinearReg') > 0\nDROP FUNCTION CalculateLinearReg\nGO\n\n-- Create the function\nCREATE FUNCTION CalculateLinearReg\n( \n    @ParmInTable AS dbo.InputToLinearReg READONLY \n) \nRETURNS TABLE \nAS\nRETURN\n(\n\n  WITH cteRawData as\n  (\n    SELECT\n        T.portfolio_cd,\n        CAST(T.month_num as decimal(18, 6)) as x,\n        LOG(CAST(T.collections_amt as decimal(18, 6))) as y\n    FROM\n        @ParmInTable as T\n  ),\n\n  cteAvgByPortfolio as\n  (\n    SELECT\n        portfolio_cd,\n        AVG(x) as xavg,\n        AVG(y) as yavg\n    FROM\n        cteRawData \n    GROUP BY \n        portfolio_cd\n  ),\n\n  cteSlopeByPortfolio as\n  (\n    SELECT\n        R.portfolio_cd,\n        SUM((R.x - A.xavg) * (R.y - A.yavg)) / SUM(POWER(R.x - A.xavg, 2)) as slope\n    FROM\n        cteRawData as R \n    INNER JOIN \n        cteAvgByPortfolio A\n    ON \n        R.portfolio_cd = A.portfolio_cd\n    GROUP BY \n        R.portfolio_cd\n  ),\n\n  cteInterceptByPortfolio as\n  (\n    SELECT\n        A.portfolio_cd,\n        (A.yavg - (S.slope * A.xavg)) as intercept\n    FROM\n        cteAvgByPortfolio as A\n    INNER JOIN \n        cteSlopeByPortfolio S\n    ON \n        A.portfolio_cd = S.portfolio_cd\n\n  )\n\n  SELECT \n      A.portfolio_cd,\n      A.xavg,\n      A.yavg,\n      S.slope,\n      I.intercept,\n      1 - (SUM(POWER(R.y - (I.intercept + S.slope * R.x), 2)) /\n      (SUM(POWER(R.y - (I.intercept + S.slope * R.x), 2)) + \n      SUM(POWER(((I.intercept + S.slope * R.x) - A.yavg), 2)))) as rsquared\n  FROM\n      cteRawData as R \n        INNER JOIN \n      cteAvgByPortfolio as A ON R.portfolio_cd = A.portfolio_cd\n        INNER JOIN \n      cteSlopeByPortfolio S ON A.portfolio_cd = S.portfolio_cd\n        INNER JOIN \n      cteInterceptByPortfolio I ON S.portfolio_cd = I.portfolio_cd\n  GROUP BY \n      A.portfolio_cd,\n      A.xavg,\n      A.yavg,\n      S.slope,\n      I.intercept\n);\n",
    "label": 1
  },
  {
    "text_1": "SQL, a 'multi-tenant' issue: how to separate common data from user's data?",
    "text_2": "users (id, username, password, name, age, sex, address, phone, notes)\npersons (id, key, name, age, sex, address, phone, notes)\n",
    "label": 1
  },
  {
    "text_1": "SQL: selection of rows with unique values but all columns",
    "text_2": "DECLARE @Emails TABLE\n(\n    [UID] INT,\n    [Column1] VARCHAR(20),\n    [Column2] VARCHAR(20),\n    [Column3] VARCHAR(20),\n    [Column4] VARCHAR(20),\n    [Column5] VARCHAR(20)\n)\n\nDECLARE @Attachements TABLE\n(\n    [UID] INT,\n    [ReferenceID] INT\n)\n\nINSERT INTO @Emails ([UID], Column1, Column2, Column3, Column4, Column5) SELECT 1, 'Data 1', 'Data 2', 'Data 3', 'Data 4', 'Data 5'\nINSERT INTO @Emails ([UID], Column1, Column2, Column3, Column4, Column5) SELECT 2, 'Data 6', 'Data 7', 'Data 8', 'Data 9', 'Data 10'\nINSERT INTO @Emails ([UID], Column1, Column2, Column3, Column4, Column5) SELECT 3, 'Data 11', 'Data 12', 'Data 13', 'Data 14', 'Data 15'\nINSERT INTO @Emails ([UID], Column1, Column2, Column3, Column4, Column5) SELECT 4, 'Data 16', 'Data 17', 'Data 18', 'Data 19', 'Data 20'\n\nINSERT INTO @Attachements ([UID], [ReferenceID]) SELECT 1, 2\nINSERT INTO @Attachements ([UID], [ReferenceID]) SELECT 2, 2\nINSERT INTO @Attachements ([UID], [ReferenceID]) SELECT 3, 1\nINSERT INTO @Attachements ([UID], [ReferenceID]) SELECT 4, 3\n\n-- And here's the select!\nSELECT e.UID, e.Column1, e.Column2, e.Column3, e.Column4, e.Column5\nFROM @Emails e\nWHERE EXISTS\n    (SELECT 1 FROM @Attachements a WHERE a.ReferenceID = e.UID)\n",
    "label": 1
  },
  {
    "text_1": "Aggregating (x,y) coordinate point clouds in PostgreSQL",
    "text_2": "SELECT timestamptz 'epoch' + 1349118398 * interval '1s';\n",
    "label": 1
  },
  {
    "text_1": "Create temp table from provided variable column names",
    "text_2": " Declare @tableName varchar(max),\n @Col1 varchar(70),\n @Col2 varchar(70)\n\n Exec GenerateTable @col1='ColA',@Col2='ColB'\n",
    "label": 1
  },
  {
    "text_1": "How to Write MySQL Select Statement to Show Latest Entry by Each UserID?",
    "text_2": "select userid, max(TimeInserted) from content group by userid\n",
    "label": 1
  },
  {
    "text_1": "Replace values in column with Oracle",
    "text_2": "CREATE TABLE t_salary AS \nSELECT salary from tablename;\n\nALTER t_salary add newsalary integer after salary;\n",
    "label": 1
  },
  {
    "text_1": "number of rows in big table",
    "text_2": "SELECT SUM (Rows)\nFROM sys.partitions\nWHERE 1=1\nAnd index_id IN (0, 1)\nAnd OBJECT_ID = OBJECT_ID('Database.schema.Table');\n",
    "label": 1
  },
  {
    "text_1": "How can I write an INSTEAD OF INSERT trigger that sets one column for any table?",
    "text_2": "CREATE TABLE dbo.data (Name VARCHAR(10), StoreId INT)\nGO\nCREATE SCHEMA StoreA\nGO\nCREATE SCHEMA StoreB\nGO\nCREATE SCHEMA StoreC\nGO\nCREATE VIEW StoreA.data AS SELECT Name FROM dbo.data WHERE StoreId = 1\nGO\nCREATE VIEW StoreB.data AS SELECT Name FROM dbo.data WHERE StoreId = 2\nGO\nCREATE VIEW StoreC.data AS SELECT Name FROM dbo.data WHERE StoreId = 3\nGO\nCREATE TABLE dbo.StoreSchemas (StoreSchema SYSNAME UNIQUE, StoreId INT PRIMARY KEY)\nGO\nINSERT dbo.StoreSchemas VALUES ('StoreA', 1), ('StoreB', 2), ('StoreC', 3)\nGO\n\nDECLARE @crlf NCHAR(2) = NCHAR(13)+NCHAR(10)\nSELECT\n  N'CREATE TRIGGER tr_Tenent_fluff ON '+schema_name(v.schema_id)+N'.data'+@crlf\n+ N'INSTEAD OF INSERT'+@crlf\n+ N'AS BEGIN'+@crlf\n+ N'  INSERT dbo.data ('\n+ STUFF((\n    SELECT @crlf+N'  , '+name FROM sys.columns tc \n    WHERE tc.object_id = t.object_id\n      AND (tc.name IN (SELECT name FROM sys.columns vc WHERE vc.object_id = v.object_id)\n        OR tc.name = N'StoreId')\n    ORDER BY tc.column_id\n    FOR XML PATH(''), TYPE).value('.','NVARCHAR(MAX)')\n    ,5,1,N' ')+@crlf\n+ N'  )'+@crlf\n+ N'  SELECT'\n+ STUFF((\n    SELECT @crlf+N'  , '+name\n      + CASE WHEN name = N'StoreId' THEN ' = '+(\n          SELECT CONVERT(NVARCHAR,StoreId) FROM dbo.StoreSchemas s \n          WHERE s.StoreSchema = SCHEMA_NAME(v.schema_id)\n          )\n        ELSE '' END\n    FROM sys.columns tc \n    WHERE tc.object_id = t.object_id\n      AND (tc.name IN (SELECT name FROM sys.columns vc WHERE vc.object_id = v.object_id)\n        OR tc.name = N'StoreId')\n    ORDER BY tc.column_id\n    FOR XML PATH(''), TYPE).value('.','NVARCHAR(MAX)')\n    ,5,1,N' ')+@crlf\n+ N'  FROM inserted'+@crlf\n+ N'END'+@crlf\n+ N'GO'+@crlf\nFROM sys.tables t \nJOIN sys.views v \n  ON t.name = v.name \n AND t.schema_id = SCHEMA_ID('dbo') \n AND v.schema_id <> t.schema_id\nWHERE t.name = 'data'\nGO\n",
    "label": 1
  },
  {
    "text_1": "NHibernate many-to-many criteria",
    "text_2": "// here is the exists part\nvar dCriteria = DetachedCriteria.For<Question>(\"q\")\n    .SetProjection(Projections.GroupProperty(Projections.Id()))\n    .Add(Restrictions.Eq(Projections.Count(Projections.Id()), tagIds.Length))\n    // here we filter on the \"parent\" criteria\n    .Add(Restrictions.EqProperty(\"q.id\", \"question.Id\"))\n    .CreateCriteria(\"Tags\")\n    .Add(Restrictions.In(\"id\", tagIds));\n\nvar crit = NHibernateSession\n    .CreateCriteria<Question>(\"question\")\n    .Add(Subqueries.Exists(dCriteria));\n",
    "label": 1
  },
  {
    "text_1": "How to reuse a large query without repeating it?",
    "text_2": "(horrible_query_1_VIEW) minus (ugly_query_2_VIEW)\n\n(ugly_query_2_VIEW) minus (horrible_query_1_VIEW)\n",
    "label": 1
  },
  {
    "text_1": "Oracle: Convert Date Time to Specific format",
    "text_2": "TO_CHAR(VP_ACTUAL_RPT_DETAILS.ETLLOADER_OUT,'YYYYMMDDHH24MISSFF')\n",
    "label": 1
  },
  {
    "text_1": "Get the count of rows count after GROUP BY",
    "text_2": "SELECT count(*) AS ct\nFROM  (\n   SELECT 1\n   FROM   listed_amenities\n   WHERE  amenity_id IN (48, 49, 50)\n   GROUP  BY residence_id \n   HAVING count(*) = 3\n   ) sub;\n",
    "label": 1
  },
  {
    "text_1": "selectionArgs in SQLiteQueryBuilder doesn't work with integer values in columns",
    "text_2": "cursor = builder.query(db,\n                    new String[]{\"col1\", \"col2\", \"col3\"},\n                    \"id = \" + getSID(db), null, null, null, null);\n",
    "label": 1
  },
  {
    "text_1": "Split Table Column on a Specific Character",
    "text_2": "select REVERSE(LEFT(REVERSE(@HCode), CHARINDEX('-', REVERSE(@HCode))-1))\n",
    "label": 1
  },
  {
    "text_1": "Using SQL FOR XML PATH, how can I achieve the following formatted XML output?",
    "text_2": "SELECT TOP 1\n  OwnerID AS \"@ID\",\n  (SELECT\n      TransactionID AS \"Transaction/@ID\",\n      [Date] AS \"Transaction/Date\",\n      TransactionType AS \"Transaction/Type\",\n      ChargeCode AS \"Transaction/ChargeCode\",\n      [Description] AS \"Transaction/Description\",\n      DebitAmount AS \"Transaction/DebitAmount\"\n    FROM OwnerHistory\n    WHERE OwnerID = [Owner].OwnerID\n    FOR XML PATH(''), TYPE) Transactions\nFROM OwnerHistory [Owner]\nWHERE OwnerID = '11111111' \nFOR XML PATH('Owner'), ROOT('OwnerHistory'), TYPE\n",
    "label": 1
  },
  {
    "text_1": "Hive SQL include 0 values in group by result",
    "text_2": "select d.day, t.type, (case when mt.type is null then 0 else 1 end)\nfrom (select distinct day from my_table) d cross join\n     (select distinct type from my_table) t left join\n     my_table my\n     on mt.day = d.day and mt.type = d.type;\n",
    "label": 1
  },
  {
    "text_1": "Are my DB tables normalised to 3NF?",
    "text_2": "Table HomeworkTask:\nId (PK)\nSubjectId (FK)\nHomeworkTitle\nSetDate\nDueDate\n",
    "label": 1
  },
  {
    "text_1": "sql query that select data that have only one value",
    "text_2": "select rtp1.releaseId, rtp1.territoryId\nfrom ReleaseTerritoryPrice rtp1\nwhere rtp1.territoryId = 200\n  and not exists (select releaseId\n                  from ReleaseTerritoryPrice t2\n                  where t2.territoryId <> 200\n                    and rtp1.releaseId = t2.releaseId);\n",
    "label": 1
  },
  {
    "text_1": "PL/SQL: How select data from table and input into package accepting array type?",
    "text_2": "declare\n  v_to_arr mail_pkg.array := mail_pkg.array();\nbegin\n\n  Select email_address\n  bulk collect into v_to_arr\n  from table_of_email_addresses;\n\n  mail_pkg.send(p_to => v_to_arr, ... );\n  --note: this code may require some fine-tuning.\n  ...\nend ;\n",
    "label": 1
  },
  {
    "text_1": "Oracle - Substitute substrings of records by a list of regular expressions",
    "text_2": "--Create oracle objects\ncreate or replace type clean_o as object(text_id number,dirty_text varchar2(500));\ncreate or replace type clean_t as table of clean_o; \n\n--Function\ncreate or replace function clean_text return clean_t pipelined is \n    cursor clean_c is select * from to_clean;\n    text varchar2(250);\nbegin\n    for c in clean_c loop\n       text:= c.dirty_text; \n       for i in (select * from regex_list) loop\n          text:= regexp_replace(text,i.pattern,i.replacement);  \n       end loop;\n       PIPE ROW (clean_o(c.text_id,text));\n    end loop;\nend;\n",
    "label": 1
  },
  {
    "text_1": "Share SQLite database from Android app, without intermediate copy",
    "text_2": "<manifest ...>\n    <application ...>\n        <provider\n            android:name=\"android.support.v4.content.FileProvider\"\n            android:authorities=\"com.url.myapp.fileprovider\"\n            android:exported=\"false\"\n            android:grantUriPermissions=\"true\">\n            <meta-data\n                android:name=\"android.support.FILE_PROVIDER_PATHS\"\n                android:resource=\"@xml/filepaths\" />\n        </provider>\n",
    "label": 1
  },
  {
    "text_1": "Data modelling: parent and child 'dual' relationship",
    "text_2": "parent      \n-------------\nPARENT_ID PRIMARY KEY, // PK for the parent table\nOTHER_COL\n...\n\nchild\n-------------\nCHILD_ID PRIMARY KEY,  // PK for the Child Table\nPARENT_ID              // <-- Should this column be here? = Yes\nCONSTRAINT FK_ChildParent FOREIGN KEY(PARENT_ID) REFERENCES parent(PARENT_ID)\n",
    "label": 1
  },
  {
    "text_1": "Sprade distinct values over a different columns",
    "text_2": "id, v1, v2, v3, ..., vn\n",
    "label": 1
  },
  {
    "text_1": "Outputting Multiple Columns from one Table SQL?",
    "text_2": "SELECT m1.Title AS Movie, m1.YearReleased AS FirstRelease,\n    MIN(m2.YearReleased) AS SecondReleased\nFROM Movies m1\nINNER JOIN Movies m2 ON m2.Title = m1.Title \n    AND m2.YearReleased > m1.YearReleased        \nGROUP BY m1.Title, m1.YearReleased\n",
    "label": 1
  },
  {
    "text_1": "TSQL Convert rows to columns",
    "text_2": "|  DESC1 |  DESC2 |  DESC3 |\n----------------------------\n| Thing1 | Thing4 | Thing6 |\n| Thing2 | Thing5 | Thing7 |\n| Thing3 | (null) | (null) |\n",
    "label": 1
  },
  {
    "text_1": "Subtracting two dates to get hh:mm:ss",
    "text_2": "with diffs as (\n   select numtodsinterval( 0.125, 'day' ) diff_interval from dual\n)\nselect extract( hour from diff_interval ) diff_in_hours,\n       extract( minute from diff_interval ) diff_in_mins,\n       extract( second from diff_interval ) diff_in_secs\n  from diffs;\n",
    "label": 1
  },
  {
    "text_1": "what does a select statement returns if condition doesn't match?",
    "text_2": "declare @test nvarchar(50)\n\n\n select @test=alpha from @temp where id=70\n\n insert into @temp  select @test \n select * from @temp\n\n\n print @test\n",
    "label": 1
  },
  {
    "text_1": "Delete Rows with Duplicate Column Data in Specific Columns",
    "text_2": "insert into newTable\n(\n       FirstName, \n       LastName, \n       CompanyName \n)\nselect distinct \n       FirstName, \n       LastName, \n       CompanyName \n  from MyTable\n where not exists (\n   select 1 from newTable \n    where newTable.FirstName   = MyTable.FirstName\n      and newTable.LastName    = MyTable.LastName\n      and newTable.CompanyName = MyTable.CompanyName\n  ) \n",
    "label": 1
  },
  {
    "text_1": "SQL-Server: Query to return codes only with numbers beginning with letters",
    "text_2": "SELECT Code \nFROM mytable \nWHERE LEFT(Code,1) LIKE '[A-Z]' AND \n      RIGHT(Code, LEN(Code)-1) NOT LIKE '%[^0-9]%'\n",
    "label": 1
  },
  {
    "text_1": "selecting multiple counts when tables not directly co-relate",
    "text_2": "SELECT  Users.User_ID, \n        Users.Source_ID, \n        White_Rules.Rule_ID AS WhiteRuleID, \n        Black_Rules.Rule_ID AS BlackRuleID\nFROM    Users\n        LEFT JOIN White_Rules\n            ON White_Rules.Victim_ID = Users.User_ID\n        LEFT JOIN Black_Rules\n            ON Black_Rules.Victim_ID = Users.User_ID\n",
    "label": 1
  },
  {
    "text_1": "Exclude rows if column values are equal of same table",
    "text_2": "SELECT *\nFROM dbo.test41 t\nWHERE t.Config_Type != 2 AND EXISTS (\n              SELECT 1\n              FROM dbo.test41 t2\n              WHERE t.Networkelemenid = t2.Networkelemenid                \n              GROUP BY t2.Networkelemenid, t2.Config_Type, t2.Status\n              HAVING COUNT(t2.Status) > 1\n              )\n",
    "label": 1
  },
  {
    "text_1": "Netteza SQL ALTER TABLE in stored procedure alternative?",
    "text_2": "GROOM TABLE tablename VERSIONS;\n",
    "label": 1
  },
  {
    "text_1": "How to write SQL for inner join of three tables selection",
    "text_2": "select c.name\n  from items i\n  join itemCategories ic on i.id = ic.itemID\n  join categories c on c.id = ic.categoryID\n where i.name = 'itemname'\n",
    "label": 1
  },
  {
    "text_1": "MYSQL if a status is liked by a user include it in query results",
    "text_2": " | uid | name | msg_id | text | POST_PRIVACY | LIKED\n | 1   | u1   | 1      | t11  | 3            | 1\n | 1   | u1   | 2      | t12  | 3            | NULL\n | 2   | u2   | 3      | t21  | 3            | NULL\n | 2   | u2   | 4      | t22  | 3            | NULL\n",
    "label": 1
  },
  {
    "text_1": "loading .sql file using command line",
    "text_2": "    mysql>\n",
    "label": 1
  },
  {
    "text_1": "Get value even if it doesn't exist in table from SQL SELECT statement",
    "text_2": "select t.num as id, coalesce(yt.counter, 0)\nfrom your_table yt\nright join (\n    select t1.num + t2.num * 10 + t3.num * 100 as num\n    from (\n        select 1 as num union select 2 union select 3 union select 4 union select 5 union\n        select 6 union select 7 union select 8 union select 9 union select 0\n    ) t1\n    cross join (\n        select 1 as num union select 2 union select 3 union select 4 union select 5 union\n        select 6 union select 7 union select 8 union select 9 union select 0\n    ) t2\n    cross join (\n        select 1 as num union select 2 union select 3 union select 4 union select 5 union\n        select 6 union select 7 union select 8 union select 9 union select 0\n    ) t3\n) t on yt.id = t.num\nwhere t.num between (select min(id) from your_table) and (select max(id) from your_table)\n",
    "label": 1
  },
  {
    "text_1": "Reverse deployment",
    "text_2": "DECLARE @t table (accounting int, research int, sales int, operations int);\n\nINSERT INTO @t VALUES(3, 5, 6, 0);\n\n   SELECT dname, cnt\n    FROM\n    (\n       SELECT accounting, research, sales, operations \n       FROM @t\n    ) t \n    UNPIVOT\n    (\n      cnt FOR dname IN (accounting, research, sales, operations )\n    ) u\n",
    "label": 1
  },
  {
    "text_1": "REGEXP_SUBSTR to extract fixed length string starting from a digit",
    "text_2": "SELECT SUBSTR(ID_Descr, INSTR(ID_Descr, '8'), 10) FROM tableA;\n",
    "label": 1
  },
  {
    "text_1": "List the name of division that has the most employees working on projects",
    "text_2": "ID      NAME                MAXCOUNTS\n111     human resoruces     5\n",
    "label": 1
  },
  {
    "text_1": "How to get year in sql function",
    "text_2": "SET @ReturnValue = CONVERT(CHAR(4),Year(Getdate()))\n                   + '-' \n                   + REPLICATE('0', 8 - DATALENGTH(@ReturnValue)) + @ReturnValue;\n",
    "label": 1
  },
  {
    "text_1": "Query with inner join (sql)",
    "text_2": "+----+---------+---------+\n| id | feed_id | user_id |\n+----+---------+---------+\n|  1 |       1 |       1 |\n|  2 |       1 |       2 |\n|  3 |       1 |       4 |\n|  4 |       2 |       1 |\n|  5 |       1 |       2 |\n|  6 |       1 |       3 |\n+----+---------+---------+\n",
    "label": 1
  },
  {
    "text_1": "web2py upload with original filename",
    "text_2": "import os\nimport shutil\n\ndef store_file(file, filename=None, path=None):\n    path = \"applications/app_name/uploads\"\n    if not os.path.exists(path):\n         os.makedirs(path)\n    pathfilename = os.path.join(path, filename)\n    dest_file = open(pathfilename, 'wb')\n    try:\n            shutil.copyfileobj(file, dest_file)\n    finally:\n            dest_file.close()\n    return filename\n\ndef retrieve_file(filename, path=None):\n    path = \"applications/app_name/uploads\"\n    return (filename, open(os.path.join(path, filename), 'rb'))\n",
    "label": 1
  },
  {
    "text_1": "How can I group based on date and type",
    "text_2": "2012-02-26 AMEX        0,00\n",
    "label": 1
  },
  {
    "text_1": "Database schema to store messages sent and messages received to the same person",
    "text_2": "CREATE TABLE contact\n(\n  contact_id bigserial NOT NULL,\n  contact_name character varying,\n  contact_phone_number character varying(40),\n  CONSTRAINT contact_pkey PRIMARY KEY (contact_id)\n)\nWITH (\n  OIDS=FALSE\n);\n",
    "label": 1
  },
  {
    "text_1": "Database design query",
    "text_2": "---------------\n1, 2, 2009-01-01\n1, 3, 2010-05-01\n...\n",
    "label": 1
  },
  {
    "text_1": "Modeling Product Variants",
    "text_2": "PRODUCTS\n========\nproduct_id product_name\n---------- ------------\n1          Widget 1\n2          Widget 2\n3          Widget 3\n\nOPTIONS\n=======\noption_id option_name\n--------- -----------\n1         Size SL\n2         Color\n3         Size SM\n4         Class\n5         Size ML\n\nOPTION_VALUES\n=============\noption_id value_id value_name\n--------- -------- ------------\n1         1        Small        (Size SL)\n1         2        Large        (Size SL)\n2         1        White        (Color)\n2         2        Black        (Color)\n3         1        Small        (Size SM)\n3         2        Medium       (Size SM)\n4         1        Amateur      (Class)\n4         2        Professional (Class)\n5         1        Medium       (Size ML)\n5         2        Large        (Size ML)\n\nPRODUCT_OPTIONS\n===============\nproduct_id option_id\n---------- ---------\n1          1         (Widget 1; Size SL)\n1          2         (Widget 1; Color)\n2          3         (Widget 2; Size SM)\n3          4         (Widget 3; Class)\n3          5         (Widget 4; Size ML)\n\nPRODUCT_VARIANTS\n================\nproduct_id variant_id sku_id\n---------- ---------- ------\n1          1          W1SSCW (Widget 1)\n1          2          W1SSCB (Widget 1)\n1          3          W1SLCW (Widget 1)\n1          4          W1SLCB (Widget 1)\n2          1          W2SS   (Widget 2)\n2          2          W2SM   (Widget 2)\n3          1          W3CASM (Widget 3)\n3          2          W3CASL (Widget 3)\n3          3          W3CPSM (Widget 3)\n3          4          W3CPSL (Widget 3)\n\nVARIANT_VALUES\n==============\nproduct_id variant_id option_id value_id\n---------- ---------- --------- --------\n1          1          1         1        (W1SSCW; Size SL; Small)\n1          1          2         1        (W1SSCW; Color; White)\n1          2          1         1        (W1SSCB; Size SL; Small)\n1          2          2         2        (W1SSCB; Color; Black)\n1          3          1         2        (W1SLCW; Size SL; Large)\n1          3          2         1        (W1SLCW; Color; White)\n1          4          1         2        (W1SLCB; Size SL; Large)\n1          4          2         2        (W1SLCB; Color; Black)\n2          1          3         1        (W2SS; Size SM; Small)\n2          2          3         2        (W2SM; Size SM; Medium)\n3          1          4         1        (W3CASM; Class; Amateur)\n3          1          5         1        (W3CASM; Size ML; Medium)\n3          2          4         1        (W3CASL; Class; Amateur)\n3          2          5         2        (W3CASL; Size ML; Large)\n3          3          4         2        (W3CPSM; Class; Professional)\n3          3          5         1        (W3CPSM; Size ML; Medium)\n3          4          4         2        (W3CPSL; Class; Professional)\n3          4          5         2        (W3CPSL; Size ML; Large)\n",
    "label": 1
  },
  {
    "text_1": "selecting two rows that match a Foreign id?",
    "text_2": "SELECT movies.movie_name\nFROM movies\nINNER JOIN tags\nON movies.movie_id = tags.movie_id\nWHERE tags.genre IN ('Comedy','Action')\nGROUP BY movies.movie_name\nHAVING COUNT(*) = 2\n",
    "label": 1
  },
  {
    "text_1": "Due Date Calculated Given Start Date and Working/Lunch Hours PL/SQL",
    "text_2": "4/10/2015 3:45:21 PM    4/11/2015 3:00:00 PM\n",
    "label": 1
  },
  {
    "text_1": "How to efficiently track number of logged in users from a large userbase",
    "text_2": "update stats set int_value += 1 where name = 'logged_in_users';\n",
    "label": 1
  },
  {
    "text_1": "SQL BETWEEN for text vs numeric values",
    "text_2": "where food_name BETWEEN 'G' AND 'O'\n",
    "label": 1
  },
  {
    "text_1": "Creating materialized view that refreshes every 5 min",
    "text_2": "select to_char(sysdate,'hh:mi') from dual;\n\n       TO_CH\n       -----\n       04:28\n",
    "label": 1
  },
  {
    "text_1": "Dynamic query to Union multiple databases",
    "text_2": "DECLARE @sql NVARCHAR(MAX) = N'';\n\nSELECT @sql += N'\nUNION ALL\n  SELECT C1,C2,C3\n  FROM ' + QUOTENAME(name) + '.dbo.A'\nFROM sys.databases\nWHERE state = 0\nAND name LIKE N'db[0-9]%';\n\nSET @sql = STUFF(@sql, 1, 11, '') + ';';\n\nPRINT @sql;\n--EXEC sp_executesql @sql;\n",
    "label": 1
  },
  {
    "text_1": "SAS proc sql inside %macro",
    "text_2": "proc sql;\n  title 'Single Quotes - where id=&id.';\n  select *\n  from dataset\n  where id='&id.';\n\n  title \"Double Quotes - where id=&id.\";\n  select *\n  from dataset\n  where id=\"&id.\";\n  title;\nquit;\n",
    "label": 1
  },
  {
    "text_1": "Query always return all the data",
    "text_2": "MySQL> SELECT 'abcd' = 0, '1234' = 0;\n+------------+------------+\n| 'abcd' = 0 | '1234' = 0 |\n+------------+------------+\n|          1 |          0 |\n+------------+------------+\n1 row in set, 1 warning (0.00 sec)\n",
    "label": 1
  },
  {
    "text_1": "creating parameterized views in oracle11g",
    "text_2": "SELECT bla FROM mytable\nWHERE mydate\n  BETWEEN TO_DATE(\n            SYS_CONTEXT('dates_ctx', 'd1')\n          ,'DD-MON-YYYY')\n      AND TO_DATE(\n            SYS_CONTEXT('dates_ctx', 'd2')\n          ,'DD-MON-YYYY');\n",
    "label": 1
  },
  {
    "text_1": "Finding Unknown XML Grandchildren Using SQL",
    "text_2": "SELECT distinct \n          Parent.Items.value('local-name(.)', 'varchar(100)') as 'Item',\n          Parent.Items.value('local-name(../.)', 'varchar(100)') as 'ParentItem',\n          Parent.Items.value('for $i in . return count(../*[. << $i])','int') \n              as ChildIndex\n    FROM    dbo.FormResults \n    CROSS APPLY xmlformfields.nodes('/form//*') as Parent(Items)\n    ORDER BY ParentItem,ChildIndex\n",
    "label": 1
  },
  {
    "text_1": "MS Access - multiple TRANSFORM query?",
    "text_2": "TRANSFORM First(q_test_basis.output_value) AS FirstOfoutput_value\nSELECT q_test_basis.Test_ID\nFROM q_test_basis\nGROUP BY q_test_basis.Test_ID\nPIVOT q_test_basis.Test_Type;\n",
    "label": 1
  },
  {
    "text_1": "PostgreSQL two dimensional array intersection",
    "text_2": "SELECT id, arr\nFROM  (\n    SELECT id, arr, generate_subscripts(arr, 1) AS i\n    FROM   tbl\n    ) x\nWHERE  arr[i:i] = '{{4,5}}'::int[];\n",
    "label": 1
  },
  {
    "text_1": "Create different result set using one result set",
    "text_2": "DELIMITER $$\n\nCREATE PROCEDURE group_results_by_date \nBEGIN\n\n DECLARE v_finished INTEGER DEFAULT 0;\n DECLARE cdate DATE DEFAULT \"2015-01-01\";\n\n -- declare cursor for getting list of dates\n DEClARE date_cursor CURSOR FOR \n    SELECT DISTINCT (date) FROM yourtable;\n\n -- declare NOT FOUND handler\n DECLARE CONTINUE HANDLER \n        FOR NOT FOUND SET v_finished = 1;\n\n OPEN date_cursor;\n\n get_content: LOOP\n\n FETCH date_cursor INTO cdate;\n\n IF v_finished = 1 THEN \n LEAVE get_content;\n END IF;\n\n -- Select query for different dates\n Select count, date, content from yourtable where date = cdate;\n\n END LOOP get_content;\n\n CLOSE date_cursor;\n\nEND$$\n\nDELIMITER ;\n",
    "label": 1
  },
  {
    "text_1": "Return hourly and half hourly data",
    "text_2": "SELECT     \n Table2.SourceID, \n Table2.Value, \n Table1.Name, \n Table2.TimestampUTC\n FROM         Table2 INNER JOIN\n                  Source ON Table1.SourceID = Table1.ID \n Where Table2.Value is not NULL\n and DATEPART(minute,Table2.TimestampUTC) in (0,30)\n and Table2.TimestampUTC >= DATEADD(day,DATEDIFF(day,0,CURRENT_TIMESTAMP),0)\n and Table2.TimestampUTC < DATEADD(day,DATEDIFF(day,0,CURRENT_TIMESTAMP),1)\n ORDER BY Table2.TimestampUTC DESC\n",
    "label": 1
  },
  {
    "text_1": "Following Records",
    "text_2": "qry1.sql := 'select * from table where prev_link is null;';\n",
    "label": 1
  },
  {
    "text_1": "How to find last 5 records from record sorted in descending order?",
    "text_2": "SELECT * FROM \n(\n     SELECT Student.StudentID,Student.FirstName,Student.LastName,Student.EmailID,\n     COUNT(SUBJECTS.SubjectID) as count from StudentMarks INNER JOIN Student ON \n    StudentMarks.StudentID=Student.StudentID INNER JOIN Subjects ON \n    StudentMarks.StudentID=Subjects.StudentID GROUP BY StudentMarks.StudentID ORDER BY count ASC \n    LIMIT 5\n)main ORDER BY main.count DESC\n",
    "label": 1
  },
  {
    "text_1": "Can SQL insert multiple row get infiltrate while process",
    "text_2": "1 e, 2 f, 3 a, 4 b, 5 c, 6 d\n",
    "label": 1
  },
  {
    "text_1": "PostgreSQL: order by column, with specific NON-NULL value LAST",
    "text_2": "...\nORDER BY (zone = 'Future'), zone, status;\n",
    "label": 1
  },
  {
    "text_1": "Complex MySQL rank query with ties",
    "text_2": "create table tpoints (id int, name varchar(10), points int);\ninsert tpoints values\n(1  ,'joe', 100 ),\n(2  ,'bob', 95  ),\n(3  ,'max', 95  ),\n(4  ,'leo', 90  );\n",
    "label": 1
  },
  {
    "text_1": "Delete many rows from a table using id in Mysql",
    "text_2": "DELETE from tablename WHERE id BETWEEN 1 AND 254;\n",
    "label": 1
  },
  {
    "text_1": "MySQL Update Column +1?",
    "text_2": "   SELECT c.category_name,\n          COUNT(p.post_id) AS num_posts\n     FROM CATEGORY c\nLEFT JOIN POSTS p ON p.category_id = c.category_id\n",
    "label": 1
  },
  {
    "text_1": "How do I select unique from one of two fields? (that doesn't equal a certain value?)",
    "text_2": "SELECT\n  CASE m_to   WHEN '$user_id' THEN m_to ELSE m_from END AS the_user,\n  CASE m_from WHEN '$user_id' THEN m_to ELSE m_from END AS the_other_party,\n  date\nFROM messages\nWHERE m_to   = '$user_id'\n   OR m_from = '$user_id'\n",
    "label": 1
  },
  {
    "text_1": "Is there a difference between NOT (ColumnName LIKE '%a%') and ColumnName NOT LIKE '%a%'",
    "text_2": "(not ColumnName like '%a%')\n",
    "label": 1
  },
  {
    "text_1": "\"where 1=1\" statement",
    "text_2": "commandText = \"select * from car_table where 1=1\";\n\nif (modelYear <> 0)     commandText += \" and year=\"+modelYear\nif (manufacturer <> \"\") commandText += \" and value=\"+QuotedStr(manufacturer)\nif (color <> \"\")        commandText += \" and color=\"+QuotedStr(color)\nif (california)         commandText += \" and hasCatalytic=1\"\n",
    "label": 1
  },
  {
    "text_1": "MySQL Case/If/Then",
    "text_2": "SELECT  Beer.Beer, \n        Beer.Brewery, \n        Beer.Style, \n        Beer.ABV, \n        Beer.Hops, \n        Beer.SRM,\n        Sum(BeerStock.Quantity) totalQuantity,\n        CASE WHEN Sum(BeerStock.Quantity) < 0 THEN ''\n            WHEN Sum(BeerStock.Quantity) BETWEEN 0 AND 999 THEN 'Red'\n            WHEN Sum(BeerStock.Quantity) BETWEEN 1000 AND 4999 THEN 'Yellow'\n            WHEN Sum(BeerStock.Quantity) BETWEEN 5000 AND 9999 THEN 'GREEN'\n            WHEN Sum(BeerStock.Quantity) >= 10000 THEN 'Another Color' \n        END\nFROM    Beer\n        INNER JOIN BeerStock\n            ON Beer.Beer = BeerStock.Beer\n-- Where    ..other conditions..\n",
    "label": 1
  },
  {
    "text_1": "match a whole row of a database table",
    "text_2": "2)Insert into TableName (SELECT  Job_id, Job_role, Exp_year FROM UserTable \n       WHERE (Job_id, Job_role,Exp_year) NOT IN \n          (SELECT Job_id, Job_role, Exp_year FROM YourTable));\n",
    "label": 1
  },
  {
    "text_1": "Using LIKE to find an 'exact' match",
    "text_2": "where num_text ~ '\\D10/15\\D|^10/15\\D|\\D10/15$|^10/15$'\n",
    "label": 1
  },
  {
    "text_1": "SQL condition base on number of associations",
    "text_2": "SELECT count(*) FROM users \nJOIN videos ON users.id=videos.user_id\nWHERE  users.some_attribute = 1   OR   users.last_login >= '03/18/2012'\nHAVING COUNT(videos.<some_column>) > 0)\n",
    "label": 1
  },
  {
    "text_1": "Count multiple columns with same WHERE condition",
    "text_2": "SQL FIDDLE:\n| ID | COUNT(*) |\n-----------------\n|  1 |        2 |\n|  2 |        3 |\n|  3 |        2 |\n",
    "label": 1
  },
  {
    "text_1": "SQL - Add column data from one table into another while preserving original data",
    "text_2": "UPDATE table1\n   SET title = title || ',' || ( SELECT title\n                                   FROM table2\n                                  WHERE table2.fullname = table1.fullname )\n WHERE EXISTS ( SELECT 1 FROM table2\n                  WHERE table2.fullname = table1.fullname )\n",
    "label": 1
  },
  {
    "text_1": "PostgreSQL query is slow when using NOT IN",
    "text_2": "SELECT t.*\nFROM get_customer_trans() AS t\nWHERE NOT EXISTS (\n    SELECT 1\n    FROM do_not_email_tbl\n    WHERE do_not_email_address = t.user_email\n    LIMIT 1\n)\n",
    "label": 1
  },
  {
    "text_1": "How to cast entity to set in PostgreSQL",
    "text_2": "SELECT g\nFROM   generate_series(1,10) g;\n",
    "label": 1
  },
  {
    "text_1": "sql query building with query data",
    "text_2": "SELECT Table1.User_ID, Table1.comment, Table1.gender, Table2.Username\nFROM Table1 \n    INNER JOIN Table2 \n        ON Table1.User_ID = Table2.ID\n    INNER JOIN Gender\n        ON Table1.gender = Gender.id\n",
    "label": 1
  },
  {
    "text_1": "Populate temporary table from a list of table names in another table",
    "text_2": "CREATE OR REPLACE FUNCTION f_create_temp_trans(_begin date\n                                              ,_end   date, OUT _rows int) AS\n$func$\nBEGIN\n\nDROP TABLE IF EXISTS temp_trans;\nCREATE TEMP TABLE IF NOT EXISTS temp_trans (LIKE existing_tbl);\n\nEXECUTE (\n   SELECT E'INSERT INTO temp_trans\\NSELECT * FROM '\n       || string_agg(quote_ident(tbl_name)\n                   , E'\\NUNION ALL SELECT * FROM '\n                     ORDER  BY log_date)\n   FROM   log_table\n   WHERE  log_date BETWEEN _begin AND _end\n   );\n\nGET DIAGNOSTICS _rows = ROW_COUNT;\n\nEND\n$func$ LANGUAGE plpgsql;\n",
    "label": 1
  },
  {
    "text_1": "MySQL: Loop through databases and run a stored procedure on it",
    "text_2": "CALL create_procedures();\n",
    "label": 1
  },
  {
    "text_1": "More advanced logic for ordering results of a query in T-SQL?",
    "text_2": "-- prepare some test data\ndeclare @table table (Child int, [Level] varchar(30), Parent int)\n\ninsert @table values (562 , 'Campus  ',  0  )\ninsert @table values (1   , 'Building',  562)\ninsert @table values (86  , 'Area    ',  1  )\ninsert @table values (87  , 'Area    ',  1  )\ninsert @table values (88  , 'Area    ',  1  )\ninsert @table values (90  , 'Sub-Area',  86 )\ninsert @table values (91  , 'Sub-Area',  86 )\ninsert @table values (92  , 'Sub-Area',  87 )\ninsert @table values (93  , 'Sub-Area',  87 )\ninsert @table values (94  , 'Sub-Area',  88 )\ninsert @table values (95  , 'Sub-Area',  88 )\ninsert @table values (3   , 'Unit    ',  90 )\ninsert @table values (16  , 'Unit    ',  90 )\ninsert @table values (4   , 'Unit    ',  91 )\ninsert @table values (6   , 'Unit    ',  91 )\n\nselect\n  a.Child, a.[Level], a.Parent\n, Campus = \n    case a.[Level]\n      when 'Unit'     then e.Child\n      when 'Sub-Area' then d.Child\n      when 'Area'     then c.Child\n      when 'Building' then b.Child\n      when 'Campus'   then a.Child\n    end\n, Building = \n    case a.[Level]\n      when 'Unit'     then d.Child\n      when 'Sub-Area' then c.Child\n      when 'Area'     then b.Child\n      when 'Building' then a.Child\n    end\n, Area = \n    case a.[Level]\n      when 'Unit'     then c.Child\n      when 'Sub-Area' then b.Child\n      when 'Area'     then a.Child\n    end\n, Sub_Area = \n    case a.[Level]\n      when 'Unit'     then b.Child\n      when 'Sub-Area' then a.Child\n    end\n, Unit = \n    case a.[Level]\n      when 'Unit'     then a.Child\n    end\n\nfrom @table a\n\nleft join @table b on a.Parent = b.Child \n  and ((a.[Level] = 'Unit'     and b.[Level] = 'Sub-Area')\n    or (a.[Level] = 'Sub-Area' and b.[Level] = 'Area'    )\n    or (a.[Level] = 'Area'     and b.[Level] = 'Building')\n    or (a.[Level] = 'Building' and b.[Level] = 'Campus'  ))\n\nleft join @table c on b.Parent = c.Child \n  and ((b.[Level] = 'Sub-Area' and c.[Level] = 'Area'    )\n    or (b.[Level] = 'Area'     and c.[Level] = 'Building')\n    or (b.[Level] = 'Building' and c.[Level] = 'Campus'  ))\n\nleft join @table d on c.Parent = d.Child \n  and ((c.[Level] = 'Area'     and d.[Level] = 'Building')\n    or (c.[Level] = 'Building' and d.[Level] = 'Campus'  ))\n\nleft join @table e on d.Parent = e.Child \n  and ((d.[Level] = 'Building' and e.[Level] = 'Campus'  ))\n\norder by \n  4, 5, 6, 7, 8\n",
    "label": 1
  },
  {
    "text_1": "Why does my text value not appear in matlab gui?",
    "text_2": "arrayfun(@(k) eval(['set(handles.edit' num2str(k) ',''String'',results{' num2str(k) '}); ']),1:5);\n",
    "label": 1
  },
  {
    "text_1": "In oracle, can I associate a default Schema with my USER ID where SCHEMA <> USERID?",
    "text_2": "ALTER SESSION SET CURRENT_SCHEMA=schema_other;\n",
    "label": 1
  },
  {
    "text_1": "Oracle duplicate row detection",
    "text_2": "SELECT t1.RSN, t1.fname, t1.lname, t1.emailaddress\n  FROM whatever_your_table_is_named t1\n  JOIN ( SELECT fname, lname, emailaddress\n           FROM whatever_your_table_is_named\n          GROUP\n             BY fname, lname, emailaddress\n         HAVING COUNT(1) > 1\n       ) t2\n    ON t1.fname = t2.fname\n   AND t1.lname = t2.lname\n   AND t1.emailaddress = t2.emailaddress\n;\n",
    "label": 1
  },
  {
    "text_1": "Crazy mysql behavior getting different results with almost same query",
    "text_2": "WHERE (menu_id=952 OR menu_id=569) AND ...\n",
    "label": 1
  },
  {
    "text_1": "change columns to rows",
    "text_2": "DECLARE @colsUnpivot AS NVARCHAR(MAX),\n    @colsPivot AS NVARCHAR(MAX),\n    @query  AS NVARCHAR(MAX)\n\nselect @colsUnpivot = STUFF((SELECT ','+ quotename(c.name)\n                    from sys.tables t\n                    inner join sys.columns c\n                        on t.object_id = c.object_id\n                    where t.name = 'yourtable'\n                    group by c.name, c.column_id\n                    order by c.column_id\n            FOR XML PATH(''), TYPE\n            ).value('.', 'NVARCHAR(MAX)') \n        ,1,1,'')\n\nselect @colsPivot = STUFF((SELECT ','+ quotename('Col'+cast(seq as varchar(10)))\n                   from\n                   (\n                    select row_number() over(order by conv1) seq\n                    from dbo.yourtable\n                   ) d\n                   group by seq\n                   order by seq\n            FOR XML PATH(''), TYPE\n            ).value('.', 'NVARCHAR(MAX)') \n        ,1,1,'')\n\nset @query \n  = ';with cte as\n    (\n        select Conv1, Conv2, Conv3,\n            row_number() over(order by conv1) seq\n        from dbo.yourtable\n    )\n    select Conv, '+@colsPivot+'\n    from \n    (\n        select Conv, value, \n            col = ''Col''+cast(seq as varchar(50))\n        from cte\n        unpivot\n        (\n            value for Conv in ('+@colsUnpivot+')\n        ) unpiv\n    ) src\n    pivot\n    (\n        max(value)\n        for col in ('+@colsPivot+')\n    ) piv'\n\nexecute sp_executesql @query;\n",
    "label": 1
  },
  {
    "text_1": "PostgreSQL calculate the top places per group and other statistics",
    "text_2": "SELECT\n    ...\n    (array_agg(place ORDER BY money_earned DESC))[1:5] AS top5_places  -- Add this expression\nFROM\n    ...\n",
    "label": 1
  },
  {
    "text_1": "Delete selected row from table in mysql",
    "text_2": "delete from taxon2\nwhere rank = 'No Taxon' \n   and not exists (\n      select 1\n      from (select * from taxon2) as b \n      where b.parentid=taxon2.id)\n",
    "label": 1
  },
  {
    "text_1": "How to programmatically set table name in PL/SQL?",
    "text_2": "create table employees (\n    emp_id number(16)\n  , country varchar2(3) -- ISO codes\n  , name varchar2(4000) -- maximum who knows what name people might have\n  , < other_columns >\n  , constraint pk_employees primary key ( emp_id )\n    );\n",
    "label": 1
  },
  {
    "text_1": "T-SQL Query to Calculate Out Of Stock",
    "text_2": ";WITH CTE\nAS\n(\n    SELECT *\n           ,ROW_NUMBER() OVER (Partition By ItemCode ORDER BY TransaDate) as RN\n    FROM InventoryTransaction\n)\nSELECT c1.TransaDate, c2.TransaDate, \n       DATEDIFF(d, c1.TransaDate, COALESCE(c2.TransaDate, c1.TransaDate)) As NumDays\nFROM CTE C1\nLEFT JOIN CTE C2\n    ON C1.RN = C2.RN - 1 AND C1.ItemCode = C2.ItemCode\nWHERE C1.OnHandAfter = 0 AND C2.OnHAndBefore = 0\n",
    "label": 1
  },
  {
    "text_1": "Convert value into two decimal",
    "text_2": "SELECT round (cast(0.35714285 AS DECIMAL(10,2)),2);\n",
    "label": 1
  },
  {
    "text_1": "INNER JOIN? Two table joining of userid with other userid",
    "text_2": "SELECT\n  users.*\nFROM\n  users\nINNER JOIN\n(\n  SELECT DISTINCT messages_senderid   AS user_id FROM messages WHERE messages_receiverid = 1\n  UNION\n  SELECT DISTINCT messages_receiverid AS user_id FROM messages WHERE messages_senderid   = 1\n)\n  contacts\n    ON users.users_userid = contacts.user_id\n",
    "label": 1
  },
  {
    "text_1": "field value between date range",
    "text_2": "'2012-02-03'::date\n",
    "label": 1
  },
  {
    "text_1": "How can I handle MySQL polygon overlap queries?",
    "text_2": "SELECT id,AsText(poly) FROM  `spatial` \n    WHERE \n        ST_Intersects(`poly`,\n            GEOMFROMTEXT('POLYGON((100 100,200 100,200 200,100 200,100 100))', 0 )\n        )\n;\n",
    "label": 1
  },
  {
    "text_1": "Oracle MERGE: only NOT MATCHED is triggered",
    "text_2": "MERGE INTO TABLE_FOR_TESTS t\n  USING (SELECT trunc(sysdate) d FROM DUAL) s\n    ON (s.d = t.d)\n  WHEN MATCHED THEN\n    UPDATE SET t = t+1\n  WHEN NOT MATCHED THEN         \n    INSERT (d, t) VALUES (trunc(sysdate), 1)\n",
    "label": 1
  },
  {
    "text_1": "How to get one unique record from the same list of records from table? No Unique constraint in the table",
    "text_2": "with a as\n(\nselect ROW_NUMBER() over(order by name) as ordinal, * from test\n)\ndelete from a where a.ordinal = 3\n",
    "label": 1
  },
  {
    "text_1": "How to retrieve the current value of an oracle sequence without increment it?",
    "text_2": "SELECT last_number\n  FROM user_sequences\n WHERE sequence_name = '<sequence_name>';\n",
    "label": 1
  },
  {
    "text_1": "Sql Agent and Database mail is this what I need for email reminders?",
    "text_2": "Sending mail, TO: test@hotmail.com, SUBJECT: Reminder1, BODY: <b>test</b>\nSending mail, TO: test@hotmail.com, SUBJECT: Reminder2, BODY: hello\n",
    "label": 1
  },
  {
    "text_1": "Comment strategy needed",
    "text_2": "CREATE TABLE Commentables (\n  item_id INT AUTO_INCREMENT PRIMARY KEY\n  item_type CHAR(1) NOT NULL,\n  UNIQUE KEY (item_id, item_type)\n);\n",
    "label": 1
  },
  {
    "text_1": "MySQL Update Query issue",
    "text_2": "UPDATE boards,modules\nSET modules.ServerID = boards.ServerID\nWHERE modules.ID = boards.ID\n",
    "label": 1
  },
  {
    "text_1": "How to optimize SQL query with window functions",
    "text_2": "select device_id, sum(consumption) total_consumption\nfrom measurements\n-- where conditions\ngroup by 1\norder by 1\n",
    "label": 1
  },
  {
    "text_1": "IN() operator with AND inside",
    "text_2": " SELECT T.*\n FROM Table T\n JOIN TableIN TI\n   ON T.id = TI.id\n HAVING count(distinct T.id) = (select count(id) from TableIN)\n",
    "label": 1
  },
  {
    "text_1": "Function computing interval between dates of two rows",
    "text_2": "CREATE OR REPLACE FUNCTION f_days_between(\n   old_evt_id int, \n  ,new_evt_id int, \n  ,OUT days_diff int) AS\n$func$\nBEGIN\nSELECT INTO days_diff\n       EXTRACT(day FROM evt_start_date\n                     - (SELECT e.evt_start_date\n                        FROM   events e\n                        WHERE  e.evt_id = old_evt_id)\n              )::int\nFROM   events\nWHERE  evt_id = new_evt_id;\nEND\n$func$ LANGUAGE plpgsql;\n",
    "label": 1
  },
  {
    "text_1": "SQL to convert column data to rows and increment column name",
    "text_2": "select visitnumber, ID1, ID2, ID3, ID4, ID5\nfrom\n(\n  select visitnumber, id,\n    'ID'+cast(row_number() over(partition by visitnumber \n                                order by id) as varchar(10)) seq\n  from yourtable\n) d\npivot\n(\n  max(id)\n  for seq in (ID1, ID2, ID3, ID4, ID5)\n) piv;\n",
    "label": 1
  },
  {
    "text_1": "MySQL table self-join returns too many rows",
    "text_2": "SELECT t1.id, t1.bar, t2.id, t2.bar, t1.foo\nFROM my_table t1, my_table t2\nWHERE t1.foo=t2.foo\n",
    "label": 1
  },
  {
    "text_1": "Efficient SQL Query Design",
    "text_2": "SELECT lots_of_columns\nFROM table1 as dai\nINNER JOIN table2 as rs ON (what you joined on before)\nINNER JOIN table3 as r ON (same here)\nWHERE \n  dai.discipline = 'C' AND rs.Set_Code IN (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\nGROUP BY  rs.Date_Booked_In\n",
    "label": 1
  },
  {
    "text_1": "How to construct MySQL query to get Products with all selected Features?",
    "text_2": "SELECT p.*\nFROM products p INNER JOIN\n     features_products fp\n     ON p.id = fp.product_id\ngroup by p.id\nhaving sum(fp.feature_id = 1) > 0 and\n       sum(fp.feature_id = 5) > 0 and\n       sum(fp.feature_id = 11) = 0;\n",
    "label": 1
  },
  {
    "text_1": "How do I combine result sets from two stored procedure calls?",
    "text_2": "CREATE PROCEDURE [dbo].[MyStored]\nAS\n   SELECT blahblahblah WHERE StoredState IN (0,1) LotsOfJoinsFollow;\nRETURN 0\n",
    "label": 1
  },
  {
    "text_1": "How to transpose rows to columns with large amount of the data in BigQuery/SQL?",
    "text_2": "SELECT 'SELECT CustomerID, ' + \n   GROUP_CONCAT_UNQUOTED(\n      'MAX(IF(Feature = \"' + STRING(Feature) + '\", Value, NULL))'\n   ) \n   + ' FROM yourTable GROUP BY CustomerID'\nFROM (SELECT Feature FROM yourTable GROUP BY Feature) \n",
    "label": 1
  },
  {
    "text_1": "SQL to find combinations within a column",
    "text_2": "|                      PARTS |\n|----------------------------|\n| 1: Part3 Part4 Part6 Part7 |\n| 2: Part3 Part4 Part5 Part7 |\n| 3: Part2 Part4 Part6 Part7 |\n| 4: Part2 Part4 Part5 Part7 |\n| 5: Part1 Part4 Part6 Part7 |\n| 6: Part1 Part4 Part5 Part7 |\n",
    "label": 1
  },
  {
    "text_1": "Compute count and running total for date field in SQL",
    "text_2": "SELECT cast(dbo.book.create_time as date) as create_date\n       count(*) as Book_Count,\n       sum(count(*)) over (order by cast(dbo.book.create_time as date) ) as Running_Count\nFROM ...tables here\nGROUP BY cast(dbo.book.create_time as date)\nORDER BY create_date;\n",
    "label": 1
  },
  {
    "text_1": "How do I make aggregate query return empty set instead of NULL row?",
    "text_2": "  select p.* from \n(\n    SELECT t1.name, MAX(t2.value) a\n    FROM t2\n    JOIN t1 ON t1.id = t2.t1_id\n    WHERE t2.t1_id = 1 AND t2.text_id = 16;\n) p where p.a is not null\n",
    "label": 1
  },
  {
    "text_1": "Calculate running total in SQLite table using triggers",
    "text_2": "Id  Balance\n1   1\n2   2\n3   3\n4   4\n5   5\n6   6\n",
    "label": 1
  },
  {
    "text_1": "automating rollback script oracle",
    "text_2": "create table user1.add_column(id number);\ncreate table user2.add_column(id number);\nalter table user2.add_column add some_column number(5);\n\ncreate sequence user1.increment_sequence nocache;\nselect user1.increment_sequence.nextval from dual;\nselect user1.increment_sequence.nextval from dual;\ncreate sequence user2.increment_sequence nocache;\nselect user2.increment_sequence.nextval from dual;\n\ncreate table user1.drop_table(id number);\n\ncreate table user2.create_table(id number);\n\ncreate view user1.change_view as select 1 a from dual;\ncreate view user2.change_view as select 2 a from dual;\n\ncreate table user1.allocate_extent(id number);\ncreate table user2.allocate_extent(id number);\ninsert into user2.allocate_extent values(1);\nrollback;\n",
    "label": 1
  },
  {
    "text_1": "Best practices for querying tables residing in different database using JOIN statements",
    "text_2": "SELECT ACTNAME, AMTDUE, SHIPCOUNTRY  \nFROM CAN_DB.dbo.Accts a1\nWHERE EXISTS (SELECT * FROM Q_DB.dbo.ACCOUNTS WHERE ACCTID = a1.ACCTID AND SERVER = 'CAN_DB')\nUNION ALL\nSELECT ACTNAME, AMTDUE, SHIPCOUNTRY \nFROM USA_DB.dbo.Accts a2\nWHERE EXISTS (SELECT * FROM Q_DB.dbo.ACCOUNTS WHERE ACCTID = a2.ACCTID AND SERVER = 'USA_DB')\n",
    "label": 1
  },
  {
    "text_1": "Multi-column IN condition from Oracle to SQL Server",
    "text_2": "SELECT employee_id,\n       last_name\nFROM   employees a\n       JOIN employees b\n         ON a.employee_id = b.employee_id\n            AND a.last_name = 'test' \n",
    "label": 1
  },
  {
    "text_1": "Avoiding clashing appointments Access",
    "text_2": "Timeslots:\nEmployeeID ) Primary key\nTimeSlot   ) \nJobID      - Foreign key\nStatus     ) And so forth\nNotes      ) \n",
    "label": 1
  },
  {
    "text_1": "Cascade Not Working",
    "text_2": "SET SQL_MODE=\"NO_AUTO_VALUE_ON_ZERO\";\nSET time_zone = \"+00:00\";\n\n\n-- --------------------------------------------------------\n\n--\n-- Table structure for table `Car`\n--\n\nCREATE TABLE IF NOT EXISTS `Car` (\n  `cID` int(11) NOT NULL AUTO_INCREMENT,\n  `color` varchar(10) DEFAULT NULL,\n  PRIMARY KEY (`cID`)\n) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=5 ;\n\n--\n-- Dumping data for table `Car`\n--\n\nINSERT INTO `Car` (`cID`, `color`) VALUES\n(2, 'B'),\n(4, 'A');\n\n-- --------------------------------------------------------\n\n--\n-- Table structure for table `Tags`\n--\n\nCREATE TABLE IF NOT EXISTS `Tags` (\n  `tID` int(11) NOT NULL AUTO_INCREMENT,\n  `expDate` varchar(10) DEFAULT NULL,\n  `cID` int(11) NOT NULL DEFAULT '0',\n  PRIMARY KEY (`tID`,`cID`),\n  KEY `cID` (`cID`)\n) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=7 ;\n\n--\n-- Dumping data for table `Tags`\n--\n\nINSERT INTO `Tags` (`tID`, `expDate`, `cID`) VALUES\n(3, 'AA', 2),\n(4, 'BB', 2),\n(5, '11', 4),\n(6, '22', 4);\n\n--\n-- Constraints for dumped tables\n--\n\n--\n-- Constraints for table `Tags`\n--\nALTER TABLE `Tags`\n  ADD CONSTRAINT `Tags_ibfk_1` FOREIGN KEY (`cID`) REFERENCES `Car` (`cID`) ON DELETE CASCADE;\n",
    "label": 1
  },
  {
    "text_1": "Group date as month",
    "text_2": "Select Year(<column), Month(<field>) from <table> group by Month(<column>), Year(<column>);\n",
    "label": 1
  },
  {
    "text_1": "Update another table based on latest record",
    "text_2": "select t.*\nfrom table as t\nwhere t.date = (select max(t2.date) from table as t2 where t2.code = t.code);\n",
    "label": 1
  },
  {
    "text_1": "How to set status of a check box in Oracle Apex using PLSQL?",
    "text_2": "http://apex.oracle.com/pls/apex/f?p=17236:555:3681260444833458::NO::P555_CHECK:Y\n",
    "label": 1
  },
  {
    "text_1": "copy oracle sequence to test schema, convert to PL/Sql procedure",
    "text_2": "-- first connect\nconnect test/testpw@db.srv;\n-- then execute procedure\nexec copy_sequence( <name_of_sequence>, <prod_scheme>, <test_scheme>);\n-- or execute procedure more than once\nbegin\n copy_sequence( <name_of_sequence1>, <prod_scheme>, <test_scheme>);\n copy_sequence( <name_of_sequence2>, <prod_scheme>, <test_scheme>);\nend;\n/\n",
    "label": 1
  },
  {
    "text_1": "Oracle PL\\SQL Null Input Parameter WHERE condition",
    "text_2": " WHERE column = nvl(var, column)\n",
    "label": 1
  },
  {
    "text_1": "T-SQL Query to match a set of ResultSet with a set of rows in DB, Group By columnId",
    "text_2": "  WITH InvalidPerms AS (\n    SELECT ph.PermissionId, ph.ShouldHavePermissionId\n    FROM @permissionSet ps\n    INNER JOIN t_PermissionHierarchy ph ON ph.PermissionId = ps.PermissionId\n    WHERE ph.ShouldHavePermissionId NOT IN (SELECT PermissionId FROM @permissionSet)\n    UNION ALL\n    SELECT phh.PermissionId, phh.ShouldHavePermissionId\n    FROM InvalidPerms ip\n    INNER JOIN t_PermissionHierarchy phh ON phh.PermissionId = ip.ShouldHavePermissionId\n    WHERE phh.ShouldHavePermissionId NOT IN (SELECT PermissionId FROM @permissionSet)\n  )\n  SELECT ShouldHavePermissionId FROM InvalidPerms\n",
    "label": 1
  },
  {
    "text_1": "In Mysql how delete and update command works?",
    "text_2": "UPDATE student\nSET email='saliniRoy@gmail.com', name=''\nWHERE name='salini';\n",
    "label": 1
  },
  {
    "text_1": "Should one table reference every other table",
    "text_2": "data TEXT,\n",
    "label": 1
  },
  {
    "text_1": "Simple type alias - Best practice for Oracle",
    "text_2": "CREATE TYPE myclient ...\n",
    "label": 1
  },
  {
    "text_1": "How to count occurencies of two dependent columns in mysql",
    "text_2": "SELECT count(*) \nFROM (\n  SELECT 1 as set, W1 as W, L1 as L FROM <table>\n  UNION ALL\n  SELECT 2,  W2 as W, L2 as L FROM <table>\n  UNION ALL\n  SELECT 3, W3 as W, L3 as L FROM <table>\n  UNION ALL\n  SELECT 4, W4 as W, L4 as L FROM <table>\n  UNION ALL\n  SELECT 5, W5 as W, L5 as L FROM <table>\n) as unionSub\nWHERE (W=6 AND L=7) OR (W=7 AND L=6)\n",
    "label": 1
  },
  {
    "text_1": "Finding discontinuities from a SQL table",
    "text_2": "select *\n      FROM T as T1\n      where (SELECT TOP 1 ct FROM T \n                             WHERE T.dt<T1.DT\n                             ORDER BY dt DESC) >CT\n",
    "label": 1
  },
  {
    "text_1": "SQL - How do I create a table with values as columns and a new format?",
    "text_2": "create table NewTable(CASEID int,  FORMNAME varchar(255))\ngo\n\ninsert into NewTable select distinct caseid,formname from OldTable\ngo\n\nselect  distinct 'alter table NewTable add ' +[name]+ ' varchar(255)'  from oldtable\n",
    "label": 1
  },
  {
    "text_1": "MySQL advise on building a database with connected tables",
    "text_2": "CREATE TABLE users (\n  userId INT UNSIGNED NOT NULL AUTO_INCREMENT,\n  userFirstName VARCHAR(80) NOT NULL,\n  userSecondName VARCHAR(80),\n  imageName VARCHAR(100) NOT NULL,\n  PRIMARY KEY (userId)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8;\n",
    "label": 1
  },
  {
    "text_1": "The difference between modeling hierarchies in normalized and dimensional data modeling",
    "text_2": "create table geopolitical_area (\n  id bigint primary key,\n  type text not null,\n  name text not null,\n  code char(2),\n  parent_id bigint null references geopolitical_area(id)  \n);\n\ninsert into geopolitical_area values\n(1, 'Country', 'Canada', 'CA', null),\n(2, 'Region', 'British Columbia', 'BC', 1);\n",
    "label": 1
  },
  {
    "text_1": "SQL - how can I efficiently select multiple closest time series data points",
    "text_2": "create index idx_data_recorded_at on data(recorded_at);\n",
    "label": 1
  },
  {
    "text_1": "Record returned from function has columns concatenated",
    "text_2": "SELECT * FROM account_servicetier_for_day(20424, '2014-08-12')",
    "label": 1
  },
  {
    "text_1": "Take out duplicates from XML",
    "text_2": "SELECT *\nINTO #tradeIdDuplicatesToIgnore\nFROM\n(\n    SELECT \n         e.value('TradeId[1]','varchar(50)') AS strTradeId\n        ,e.value('LegId[1]','int') AS LegId\n    FROM @xmlData.nodes('data/value') AS elements(e)\n    WHERE   1 = 1\n) AS t\n\nSELECT   t.strTradeId\nFROM    #tradeIdDuplicatesToIgnore AS t\n        INNER JOIN \n        (\n            SELECT COUNT(*) 'count', strTradeId\n            FROM #tradeIdDuplicatesToIgnore\n            GROUP BY strTradeId\n        ) As t2 on t2.strTradeId = t.strTradeId\nWHERE LegId IS NULL AND t2.count > 1\n",
    "label": 1
  },
  {
    "text_1": "MySQL Select query not working",
    "text_2": "SELECT  IF(a.RequestTo = 49, c.userName, b.userName) username,\n        IF(a.RequestTo = 49, c.session_ID, b.session_ID) Session_ID\nFROM    friendRequest a\n        INNER JOIN frei_session b\n            ON a.requestTo = b.session_ID\n        INNER JOIN frei_session c\n            ON a.requestFrom = c.session_ID\nWHERE   a.status = 'C' AND\n        49 IN (a.requestTo, a.requestFrom)\n",
    "label": 1
  },
  {
    "text_1": "MySQL database for hashes",
    "text_2": "CREATE TABLE `hashes` (\n    `id` INT NOT NULL AUTO_INCREMENT, \n    `hash` CHAR(32), \n    PRIMARY KEY (`id`)\n);\n\nmysql> describe hashes;\n+-------+----------+------+-----+---------+----------------+\n| Field | Type     | Null | Key | Default | Extra          |\n+-------+----------+------+-----+---------+----------------+\n| id    | int(11)  | NO   | PRI | NULL    | auto_increment |\n| hash  | char(32) | YES  |     | NULL    |                |\n+-------+----------+------+-----+---------+----------------+\n",
    "label": 1
  },
  {
    "text_1": "How to set default value while insert null value into not null column SQL Server?",
    "text_2": "ALTER TABLE T1 ALTER COLUMN name varchar(255) NULL\n\ninsert into t1\nselect id,name from t2\n\nALTER TABLE T1 ALTER COLUMN name varchar(255) NOT NULL\n",
    "label": 1
  },
  {
    "text_1": "Working with custom types within a stored procedure",
    "text_2": "CREATE TYPE parent_nt AS TABLE OF parent_t;\n/\n",
    "label": 1
  },
  {
    "text_1": "Dynamic use of T-SQL schemas",
    "text_2": "CREATE TABLE [dbo].[SampleTable01] (\n    value varchar(100)\n)\nINSERT INTO [dbo].[SampleTable01] VALUES ('[dbo].[SampleTable01]')\n\nCREATE TABLE [dbo].[SampleTable02] (\n    value varchar(100)\n)\nINSERT INTO [dbo].[SampleTable02] VALUES ('[dbo].[SampleTable02]')\n\nCREATE TABLE [dbo].[SampleTable03] (\n    value varchar(100)\n)\nINSERT INTO [dbo].[SampleTable03] VALUES ('[dbo].[SampleTable03]')\n\nCREATE TABLE [dbo].[SampleTable04] (\n    value varchar(100)\n)\nINSERT INTO [dbo].[SampleTable04] VALUES ('[dbo].[SampleTable04]')\nGO\n",
    "label": 1
  },
  {
    "text_1": "Oracle SQL*Plus: How to include current schema in prompt?",
    "text_2": "undefine schema_display\ncol schema_display new_value schema_display\n\nset termout off\nselect lower(sys_context('userenv', 'current_schema')) schema_display from dual\n/\nset termout on\n\nset sqlprompt \"&&schema_display.':'_USER'@'_CONNECT_IDENTIFIER > \"\n",
    "label": 1
  },
  {
    "text_1": "How to group by records according to date in Tsql?",
    "text_2": "select \n  Empid, \n  datepart(mm, Pdate) per_month, \n  sum(DATEDIFF(mi, P_In, P_Out))/60.0 total_time\nfrom employees\n--where Pdate betweek start_date and end_date\ngroup by Empid, datepart(mm, Pdate)\norder by Empid\n",
    "label": 1
  },
  {
    "text_1": "Internals of SELECT FROM view WHERE",
    "text_2": "select * from that_view where order_number = 1\n",
    "label": 1
  },
  {
    "text_1": "why the proc sort is way quicker than an insert select",
    "text_2": "proc sql;\ncreate table B as select distinct col1 from A;\nquit;\n",
    "label": 1
  },
  {
    "text_1": "Bound combobox items refers to different field items",
    "text_2": "Private Sub cboGroup_SelectedValueChanged(...etc\n    Console.WriteLine(cboGroup.SelectedValue)\nEnd Sub\n",
    "label": 1
  },
  {
    "text_1": "SQL Substring - Remove Last Character(s)",
    "text_2": "declare @a table([3 15] text)\ninsert @a values('aba;;;')\ninsert @a values('123abc;;')\ninsert @a values('abdc;')\ninsert @a values('abkjfshc')\ninsert @a values(';;;;')\n\n;with a as\n(\nSELECT [3 15], cast([3 15] as varchar(max)) v \n-- replace @a with your actual tablename\nFROM @a\n)\nUPDATE a\nSET [3 15] = left(v, len(v)-patindex('%;[^;]%', reverse(v) + '+') + 1)\nWHERE [3 15] LIKE  '%;;' -- notice the change\n\nselect * from @a\n",
    "label": 1
  },
  {
    "text_1": "unable to convert complex sql query into codeigniter",
    "text_2": "$this->db\n     ->select('*')\n     ->from('projectdetails pd')\n     ->where('pd.parent_id > 0  AND pd.recycle_bin > 1',null,FALSE);   \n$joinquery = $this->db->_compile_select();\n\n$this->db->_reset_select(); \n\n$query=$this->db\n      ->select(' if(pd1.recycle_bin >1, pd1.project_id, t.project_id) AS project_id,\n  if(pd1.recycle_bin >1, pd1.project_name, t.project_name) AS project_name,\n  if(pd1.recycle_bin >1, pd1.parent_id, t.parent_id) AS parent_id,\n  if(pd1.recycle_bin >1, pd1.recycle_bin, t.recycle_bin) AS recycle_bin,\n  if(pd1.recycle_bin >1, pd1.creater_id, t.creater_id) AS creater_id' ,FALSE)\n     ->from('projectdetails  pd1')\n     ->join('($joinquery)  t','t.parent_id = pd1.project_id')\n     ->group_by('project_id')\n     ->having('creater_id= 7923')\n     ->get();\n",
    "label": 1
  },
  {
    "text_1": "Sql Where Statement",
    "text_2": "FROM ObjectTexts WHERE programID='\"+ JsonProgramID  +\"' AND objName =' \"+JsonobjName +\"'\"\n",
    "label": 1
  },
  {
    "text_1": "Change in dateformat while inserting from 1 table to another",
    "text_2": "declare @dt varchar(100) = '01/07/2016 17:23:45'\n\nselect LEFT(@dt, 10) + ' ' + replace(right(CONVERT(varchar, cast(@dt as datetime), 109), 13), ':000', ' ')\n",
    "label": 1
  },
  {
    "text_1": "how do i group two column but return all three colum value from single table",
    "text_2": "SELECT Field1, Field2, Group_Concat(Field3)\nFROM tableName\nGROUP BY Field1\n",
    "label": 1
  },
  {
    "text_1": "Specific sql select from the same table",
    "text_2": "SELECT  o.id AS id_out,\n        t.time_out,\n        t.id_in,\n        t.time_in\nFROM    (   SELECT  MAX(o.time) AS time_out,\n                    i.id AS id_in,\n                    i.time AS time_in,\n                    o.joiner\n            FROM    main_table AS o\n                    LEFT JOIN main_table AS i\n                        ON i.joiner = o.joiner\n                        AND i.time > o.time\n                        AND i.type = 'in'\n            WHERE   o.type = 'out'\n            GROUP BY i.id, i.time, o.joiner\n        ) AS t\n        INNER JOIN Main_table AS o\n            ON o.joiner = t.joiner\n            AND o.time = t.time_out\n            AND o.type = 'out';\n",
    "label": 1
  },
  {
    "text_1": "Update database column data via sql query",
    "text_2": "update t\n    set col = ate(col;\n",
    "label": 1
  },
  {
    "text_1": "Split comma separated varchar parameter up into temp table",
    "text_2": "  DECLARE @str varchar(50)\n  SET @str='John, Samantha, Bob, Tom'\n\n  SELECT names = y.i.value('(./text())[1]', 'nvarchar(1000)')             \n  FROM \n  ( \n    SELECT \n        n = CONVERT(XML, '<i>' \n            + REPLACE(@str, ',' , '</i><i>') \n            + '</i>')\n  ) AS a \n  CROSS APPLY n.nodes('i') AS y(i)\n",
    "label": 1
  },
  {
    "text_1": "SQL - 1388 Character SQL Query. ( Must Be A Simpler Solution? )",
    "text_2": "SET @targetWordLen := 5;\nset @regExPattern := concat('[',(select  group_concat(letter SEPARATOR '') from chars),']{', @targetWordLen, '}');\n\nselect count(distinct w.word)\nfrom words w\nwhere LENGTH(word) = @targetWordLen \n  and w.word regexp @regExPattern \n  and w.verified = 1\n  and not exists(\n            select * \n            from chars c \n            where length(w.word) - length(replace(w.word, c.letter, '')) > c.maxCount \n        )\n;\n",
    "label": 1
  },
  {
    "text_1": "if (select count(column) from table) > 0 then",
    "text_2": "update my_table\nset x = y\nwhere (select count(*) from other_table) >= 1;\n",
    "label": 1
  },
  {
    "text_1": "how to get values based on mutiple date combinations",
    "text_2": "create table APPLICABLEINTEREST (iinterest decimal, EFFECTIVEFROMDATE date,EFFECTIVETODATE date)\ninsert into APPLICABLEINTEREST\nvalues \n(10, '2014-09-1', '2014-09-15')\n, (20, '2014-09-16', '2014-09-30')\n, (30, '2014-10-1', '9999-12-31')\n\ncreate table DATES (D_DATE date)\ngo\n\n-- filling sample dates\nwith xDAYS as (\n    SELECT TOP (2000) n = ROW_NUMBER() OVER (ORDER BY [object_id]) FROM sys.all_objects\n)\ninsert into DATES\nselect D_DATE from (select CONVERT(DATE, DATEADD(DAY, n, '2013-12-30')) as D_DATE from xDAYS) d\nORDER BY D_DATE\n\ndeclare @Fromdate date='2014-09-10'\ndeclare @Todate date='2014-10-14'\n\nselect EFFECTIVEFROMDATE, EFFECTIVETODATE, iinterest, count(*) as number_of_days from APPLICABLEINTEREST a\ninner join DATES d on d.D_DATE between EFFECTIVEFROMDATE and EFFECTIVETODATE\nwhere d.D_DATE between @Fromdate and @Todate\ngroup by EFFECTIVEFROMDATE, EFFECTIVETODATE, iinterest\n",
    "label": 1
  },
  {
    "text_1": "Need input on SQL Pivot query",
    "text_2": "create table ##tmp(\nname varchar(50) null\n)\ninsert into ##tmp\nselect distinct name from mytable\n\nDECLARE @result nvarchar(max)\nSET @result = ''\n\nSELECT @result = @result + '[' + cast([name] as varchar(50)) + N'],'\nFROM [##tmp]\n\nSET @result = LEFT(@result, LEN(@result) - 1)\n\n--PRINT @result \n\ndeclare @sql varchar(max) = ''\nSET @sql = \n'select * from' + \n'(\nselect * from MyTable\n) as src\npivot(\nsum([values])\nfor Name in (' + @result + ')' +\n+ ') as pvt'\n\nexec (@sql)\n\ndrop table ##tmp\n",
    "label": 1
  },
  {
    "text_1": "With sql find next available integer within range that is not present in existing integer subset(s)",
    "text_2": "DECLARE @ParamSubnet_sk int = 1;\n\nWITH\nCTE_Islands\nAS\n(\n    SELECT CAST(begin_address AS bigint) AS begin_address, CAST(end_address AS bigint) AS end_address\n    FROM dhcp_range\n    WHERE subnet_sk = @ParamSubnet_sk\n\n    UNION ALL\n\n    SELECT CAST(address AS bigint) AS begin_address, CAST(address AS bigint) AS end_address\n    FROM ip_address\n    WHERE subnet_sk = @ParamSubnet_sk\n\n    UNION ALL\n\n    SELECT CAST(0x00000000 AS bigint) AS begin_address, CAST(ipv4_begin AS bigint) AS end_address\n    FROM subnet\n    WHERE subnet_sk = @ParamSubnet_sk\n\n    UNION ALL\n\n    SELECT CAST(ipv4_end AS bigint) AS begin_address, CAST(0xFFFFFFFF AS bigint) AS end_address\n    FROM subnet\n    WHERE subnet_sk = @ParamSubnet_sk\n)\n,CTE_Diff\nAS\n(\n    SELECT\n        begin_address\n        , end_address\n        --, LEAD(begin_address) OVER(ORDER BY end_address) AS BeginNextIsland\n        , LEAD(begin_address) OVER(ORDER BY end_address) - end_address AS Diff\n    FROM CTE_Islands\n)\nSELECT TOP(1)\n    CAST(end_address + 1 AS varbinary(4)) AS NextAvailableIPAddress\nFROM CTE_Diff\nWHERE Diff > 1\nORDER BY end_address;\n",
    "label": 1
  },
  {
    "text_1": "Sorting column data such that numbers come first then alphanumeric in order explained below",
    "text_2": "ORDERED_LIST\n------------------\n3,4,12A,12B,12H,RR\n",
    "label": 1
  },
  {
    "text_1": "SQL Query - Combine DISTINCT and TOP?",
    "text_2": "select  top 5 PostId\nfrom    (\n        select  PostId\n        ,       Datemade\n        ,       row_number() over (partition by PostId\n                    order by Datemade) as rn\n        from    dbForumEntry\n        ) SubQueryAlias\nwhere   rn = 1 -- Most recent row per PostId\norder by\n        Datemade desc\n",
    "label": 1
  },
  {
    "text_1": "Get other columns that corresponds to MIN and MAX value of one column in SQL Server 2008",
    "text_2": "WITH Data AS\n(   SELECT  IslandCode, \n            LogDate = CAST(LogTime AS DATE),\n            LogTime, \n            Demand = SUM(KiloWatt) ,\n            RowNumAsc = ROW_NUMBER() OVER (PARTITION BY IslandCode, CAST(LogTime AS DATE) ORDER BY SUM(Kilowatt)),\n            RowNumDesc = ROW_NUMBER() OVER (PARTITION BY IslandCode, CAST(LogTime AS DATE) ORDER BY SUM(Kilowatt) DESC) \n    FROM    ph_MachineDailyReadings \n    WHERE   IslandCode = 1 \n    AND     CAST(LogTime AS DATE) = '20130813'\n    GROUP BY IslandCode, LogTime\n)\nSELECT  ma.IslandCode,\n        LogTime = ma.LogDate,\n        MinDemand = mi.Demand,\n        MinDemandAt = CAST(mi.LogTime AS TIME),\n        MaxDemand = ma.Demand,\n        MaxDemandAt = CAST(ma.LogTime AS TIME)\nFROM    Data mi\n        INNER JOIN Data ma\n            ON ma.IslandCode = mi.IslandCode\n            AND ma.LogDate = mi.LogDate\nWHERE   mi.RowNumAsc = 1\nAND     ma.RowNumDesc = 1;\n",
    "label": 1
  },
  {
    "text_1": "Query Rewrite Template in Oracle SQL",
    "text_2": " select score(1), id from docs\n where    contains(text,'informix OR informi OR inform OR infor OR info',1) > 0\n order by 1 desc;\n",
    "label": 1
  },
  {
    "text_1": "Oracle Get last know value if a collumn is NULL",
    "text_2": "create table x as \nselect 0 x, NULL y from dual union all\nselect 1 x, 1 y from dual union all\nselect 2 x, NULL y from dual union all\nselect 3 x, 3 y from dual union all\nselect 4 x, NULL y from dual union all\nselect 5 x, NULL y from dual union all\nselect 6 x, 2 y from dual union all\nselect 7 x, NULL y from dual;\n\nselect x, y,\nlast_value(y ignore nulls) over (order by x) last_y \nfrom x order by x;\n",
    "label": 1
  },
  {
    "text_1": "Distinct - which items are taken? The first or the last occurance?",
    "text_2": "mysql> create table t (id int primary key, comment varchar(100));\n\nmysql> insert into t values\n    -> (1, 'comment2'),\n    -> (2, 'comment1'),\n    -> (3, 'comment2'),\n    -> (4, 'comment1');\n",
    "label": 1
  },
  {
    "text_1": "mysql - show 2 seperate provider name from 1 provider table",
    "text_2": "+-------+-----------------+--------------+\n| svcid | serviceprovider | tmidprovider |\n+-------+-----------------+--------------+\n|     2 | Citybank        | Citybank     |\n|     4 | Citybank        | Citybank     |\n|     5 | NULL            | Citybank     |\n+-------+-----------------+--------------+\n",
    "label": 1
  },
  {
    "text_1": "orientDB : Only show results / return something if a min of datasets is available",
    "text_2": "select from (select from profile) where \"true\" in (select if(eval(\" count > 2\"), \"true\", \"false\") from (select count(*) from user))\n",
    "label": 1
  },
  {
    "text_1": "Find record with relationship between two rows",
    "text_2": "DocEntry    LineSeq    AftLine    lineText            LineNum    ItemCode\n1           0          -1         text-before-item    NULL       NULL\n1           0          1          text-item 1-1       1          item 1\n1           1          1          text-item 1-2       1          item 1\n1           0          2          text-item 2-1       2          item 2\n1           1          2          text-item 2-2       2          item 2\n1           0          3          text-item 2-3       2          item 2\n1           0          4          text-item 2-4       2          item 2\n",
    "label": 1
  },
  {
    "text_1": "Pivoting 2 columns from 3 Tables and creating pivot-column-names to avoid conflict - SQL-Server 2008R2",
    "text_2": "select id, course, teacher, \n  coalesce(A3, '') A3, \n  coalesce(E7, '') E7, \n  coalesce(Koothrappali, '') Koothrappali, \n  coalesce(Cooper, '') Cooper, \n  coalesce(Penny, '') Penny, \n  coalesce(Amy, '') Amy\nfrom\n(\n  select id, course, teacher, col, flag\n  from\n  (\n    Select cd.Id, c.CourseName as Course, t.TeacherName as Teacher\n      ,cast(r.Id as varchar(10))as RoomId\n      , r.RoomName as RoomName\n      ,cast(100 + s.Id as varchar(10)) as StudentId\n      , s.StudentName as Student\n      , '1' flag\n    FROM CourseDetails cd \n    Left JOIN Courses c \n      ON cd.CourseId = c.Id\n    Left JOIN Teachers t \n      ON cd.TeacherId = t.Id\n    Left JOIN CourseMember cm \n      ON cd.Id = cm.CourseDetailsId\n    Left JOIN Students s \n      ON cm.StudentId = s.Id \n    Left JOIN Rooms r \n      ON cd.RoomId = r.Id\n  ) d\n  cross apply\n  (\n    values ('roomname', roomname),('student',student)\n  ) c (value, col)\n) d\npivot\n(\n  max(flag)\n  for col in (A3, E7, Koothrappali, Cooper, Penny, Amy)\n) piv\n",
    "label": 1
  },
  {
    "text_1": "Creating ORACLE PL/SQL store procedures with diffrent kind of AND conditions",
    "text_2": "create or replace function get_fix_emps\n   (i_empno in emp.empno%type\n    ,  i_ename in emp.ename%type\n    , i_deptno in emp.deptno%type)\n    return sys_refcursor\nis\n    rc sys_refcursor;\nbegin\n    open rc for \n        SELECT * FROM emp \n         WHERE empno = DECODE(NVL(i_empno,0), 0, empno, i_empno)\n           AND ename = DECODE(NVL(i_ename,'X'), 'X', ename, i_ename) \n           AND deptno = DECODE(NVL(i_deptno,0), 0, deptno, i_deptno);\n    return rc;\nend get_fix_emps;\n/\n",
    "label": 1
  },
  {
    "text_1": "Calculating from self-join",
    "text_2": "SELECT tq.sym                                AS sym,\n       (100*(adj_end - adj_begin)/adj_begin) AS quarterly_returns\nFROM\n  -- First, determine first traded days (\"ftd\") and last traded days\n  -- (\"ltd\") in this quarter per symbol\n  (SELECT symbol_header_id AS sym,\n          MIN(\"date\")      AS ftd,\n          MAX(\"date\")      AS ltd\n   FROM symbol_details\n   WHERE \"date\" BETWEEN @quarterstart AND @quarterend\n   GROUP BY 1) tq\n  JOIN\n  -- Second, determine adjusted NAV for \"ftd\" per symbol (see WHERE)\n  (SELECT symbol_header_id AS sym,\n          \"date\"           AS adate,\n          adj_nav          AS adj_begin\n   FROM symbol_details) afirst\n  ON afirst.sym = tq.sym\n  JOIN\n  -- Finally, determine adjusted NAV for \"ltd\" per symbol (see WHERE)\n  (SELECT symbol_header_id AS sym,\n          \"date\"           AS adate,\n          adj_nav          AS adj_end\n   FROM symbol_details) alast\n  ON alast.sym = tq.sym\nWHERE\n  afirst.adate = tq.ftd\n  AND\n  alast.adate  = tq.ltd;\n",
    "label": 1
  },
  {
    "text_1": "GROUP_CONCAT with join resulting in double records",
    "text_2": "ON `customer_tags_ids`.`customer_tags_id` = `customer_tags`.`customer_tags_id`\n",
    "label": 1
  },
  {
    "text_1": "How To Insert 2 Values in 2 columns and rest null values in rest columns without using Create Table Statement",
    "text_2": "SELECT @cl_val += Quotename(NAME) + ','\nFROM   sys.columns\nWHERE  Object_name(object_id) = 'Test'\n       AND is_identity <> 1\nORDER  BY NAME\n\nSELECT @cl_val = LEFT(@cl_val, Len(@cl_val)-1) + ') values (' -- Remove the trailing comma\n",
    "label": 1
  },
  {
    "text_1": "Make big query from 3 tables",
    "text_2": "select p.name\nfrom profiles p\nwhere p.id in (select profile_id\n               from profiles_categories);\n",
    "label": 1
  },
  {
    "text_1": "MS Access database query using SQL",
    "text_2": "ID Num  Surname  Firstname  Login     Logout  \n------  -------  ---------  --------  --------\n  1002  LName3   FName3     22:30:00  23:00:00\n  1000  LName1   FName1     12:00:00  12:30:00\n  1001  LName2   FName2     14:00:00  15:00:00\n  1001  LName2   FName2     16:00:00  17:00:00\n",
    "label": 1
  },
  {
    "text_1": "How to get the total number of tables in postgresql?",
    "text_2": "select count(*)\nfrom information_schema.tables\nwhere table_schema = 'public';\n",
    "label": 1
  },
  {
    "text_1": "Is there a way to effectively GRANT on either TRUNCATE or DROP TABLE in MySQL?",
    "text_2": "  TRUNCATE TABLE fee.fi ;\n",
    "label": 1
  },
  {
    "text_1": "How to use two forms to search in one and display the records to the other using Visual Basic 2010, SQL Server 2008",
    "text_2": "' Reference to the display form\nPrivate _displayForm As DisplayForm\n\n' Create the display form and open it\nPrivate Sub SearchForm_Load(ByVal sender As Object, ByVal e As EventArgs) Handles MyBase.Load\n    _displayForm = New DisplayForm()\n    _displayForm.Show()\nEnd Sub\n\n' Get the search parameters and tell the display form to set the filter\nPrivate Sub btnSearch_Click(ByVal sender As Object, ByVal e As EventArgs) Handles btnSearch.Click\n    Dim field As String, search As Object\n\n    Select Case cboField.SelectedIndex\n        Case 0\n            field = \"surname\"\n            search = txtSearch.Text\n        Case 1\n            Dim n As Integer\n\n            field = \"id\"\n            If Integer.TryParse(txtSearch.Text, n) Then\n                search = n\n            Else\n                MessageBox.Show(\"Please enter a number for id search\", MessageBoxButtons.OKCancel, MessageBoxIcon.Warning)\n                Return\n            End IF\n    End Select\n    _displayForm.SetFilter(field, search)\nEnd Sub\n",
    "label": 1
  },
  {
    "text_1": "What is Date? a string? or Double?",
    "text_2": "10/01/2013\n",
    "label": 1
  },
  {
    "text_1": "SQL: If no rows found, do another search?",
    "text_2": "select t.*\nfrom (select t.*, max(number) over () as maxnumber,\n             row_number() over (order by number desc) as seqnum\n      from table t\n     ) t\nwhere (maxnumber > 10 and number > 10) or seqnum = 1\n",
    "label": 1
  },
  {
    "text_1": "Querying a Parse database to get the data from one single column within a Parse data Class",
    "text_2": "ParseQuery<ParseObject> query = ParseQuery.getQuery(\"Posts\");\nquery.selectKeys(Arrays.asList(\"text\"));\n    query.findInBackground(new FindCallback<ParseObject>() {\n\n        @Override\n        public void done(List<ParseObject> posts, ParseException e) {\n\n            if (e == null) {\n                List<String> postTexts = new ArrayList<String>();\n                for(ParseObject post : posts){\n                   postTexts.add(post.getString(\"text\"));\n                }\n                Toast.makeText(MainActivity.this, postTexts.toString(), Toast.LENGTH_LONG).show();\n            }\n\n            else {\n                Toast.makeText(MainActivity.this, \"query error: \" + e, Toast.LENGTH_LONG).show();\n\n            }\n\n        }\n    });\n",
    "label": 1
  },
  {
    "text_1": "decoding a text string to use in a join",
    "text_2": "JOIN period p ON REGEXP_REPLACE(sect.expression, '^(\\d+)(.*)', '\\1') \n",
    "label": 1
  },
  {
    "text_1": "Database level user security in MS Jet Engine",
    "text_2": "? SystemDB \n",
    "label": 1
  },
  {
    "text_1": "How to get a fixed amount of results per row?",
    "text_2": "select group_concat(foo) from (\n  select s1.foo, (count(*) - 1) / 3 grp from sample s1\n  join sample s2 on s1.rowid >= s2.rowid\n  group by s1.rowid\n) final\ngroup by grp\n",
    "label": 1
  },
  {
    "text_1": "Copy and paste from one column to another in MS_Access",
    "text_2": "UPDATE ATable SET AField2 = Mid(AField,instr(AField,\"[\")) & AField2\n",
    "label": 1
  },
  {
    "text_1": "Getting history data for a specific date(YEAR AND MONTH) from a table",
    "text_2": "DECLARE @searchDate DATE = '2013-11-01'\nSELECT DATEADD(s,-1,DATEADD(mm, DATEDIFF(m,0,@searchDate)+1,0))\n",
    "label": 1
  },
  {
    "text_1": "SQL Postcode exist within range",
    "text_2": "+-------+------+\n| code  | city |\n+-------+------+\n| 1234  | AA   |\n+-------+------+\n",
    "label": 1
  },
  {
    "text_1": "loop select results as arguments for script",
    "text_2": "#!/usr/bin/perl\n\n#query code to get arguments\n$arguments =~ s/\\// /;\n\nsystem (\"perl /path/to/script.pl $arguments\") or die (\"Something went wrong: $?\\n\");\n",
    "label": 1
  },
  {
    "text_1": "Distinct records based on some columns in SQL",
    "text_2": "select t1.* \nfrom myTable t1\njoin\n(\n  SELECT col1, col2, col3, col4\n  FROM myTable     \n  group by col1, col2, col3, col4\n  having count(*) > 1\n) t2 on t1.col1 = t2.col1\n    and t1.col2 = t2.col2\n    and t1.col3 = t2.col3\n    and t1.col4 = t2.col4\n",
    "label": 1
  },
  {
    "text_1": "How to send the product data (from table) when \"Add to Cart\" is clicked to My cart page?",
    "text_2": "<input type=\"submit\" name=\"Getthis\" value=\"Add to Cart\"/>\n</form>\n",
    "label": 1
  },
  {
    "text_1": "How do I determine if I am getting record duplication in MYSQL?",
    "text_2": "SELECT STRAIGHT_JOIN\n      SmryByBatch.Operation_ID,\n      SmryByBatch.Date_Tracked,\n      SUM( SmryByBatch.Time_Elapsed ) Time_ElapsedByOpDate,\n      SUM( SmryByBatch.Time_Elapsed ) / OpMachines.Machine_Count Time_ElapsedPerMachine,\n      SUM( SmryByBatch.TaskEstByBatch ) TaskEstByOpDate,\n      o.Name Operation,\n      o.hours_open,\n      OpMachines.Machine_Count,\n      o.Hours_Open * OpMachines.Machine_Count as Total_Hours\n   FROM \n       ( SELECT  \n            b.Operation_ID,\n            PreQuery.Batch_ID,\n            PreQuery.Date_Tracked,\n            PreQuery.TotalTimeElapsed / 3600 as Time_Elapsed,\n            SUM( t.estimated_nonrecurring \n               + t.estimated_recurring ) / 3600 as TaskEstByBatch\n         FROM \n            ( SELECT\n                    bl.batch_id,\n                    DATE( bl.Start_Time ) date_tracked,\n                    SUM( bl.time_elapsed ) TotalTimeElapsed\n                 FROM\n                    batch_log bl\n                 WHERE\n                    bl.time_elapsed < \"8:00:00\"\n                 GROUP BY\n                    bl.batch_ID,\n                    DATE( bl.Start_Time ) ) PreQuery\n\n            JOIN batches b\n               ON PreQuery.Batch_ID = b.ID\n\n            JOIN Tasks t\n               ON PreQuery.Batch_ID = t.Batch_ID\n\n        GROUP BY\n           b.Operation_ID,\n           PreQuery.Batch_ID ) SmryByBatch\n\n      JOIN Operations o\n         ON SmryByBatch.Operation_ID = o.ID\n\n         JOIN ( select m.Operation_ID,\n                       COUNT(distinct m.id)  machine_count\n                   from\n                      machines m\n                   group by\n                      m.Operation_ID ) OpMachines\n            ON o.ID = OpMachines.Operation_ID\n\n   GROUP BY \n      SmryByBatch.Date_Tracked\n      SmryByBatch.Operation_ID,\n\n   ORDER BY\n      SmryByBatch.Date_Tracked,\n      SmryByBatch.Operation_ID\n",
    "label": 1
  },
  {
    "text_1": "ora-06502 on writing into LONG variable",
    "text_2": "declare\n  clob_var clob;\nbegin\n  select clob_column into clob_var from my_table_2 where id = 1;\nend;\n",
    "label": 1
  },
  {
    "text_1": "MySQL - updating table based on chronological order",
    "text_2": "UPDATE users, logs SET users.log_id=logs.log_id WHERE users.user=logs.user AND users.rank = logs.rank;\n",
    "label": 1
  },
  {
    "text_1": "Using max function without grouping",
    "text_2": "SELECT ProductID,\n       [date],\n       seller\nFROM   (SELECT Row_number()\n                 OVER(\n                   partition BY ProductID\n                   ORDER BY [date] desc) Rn,\n               *\n        FROM   tablename) a\nWHERE  rn = 1 \n",
    "label": 1
  },
  {
    "text_1": "sql server : create indexes on foreign keys where necessary",
    "text_2": "SELECT f.name AS ForeignKey, \n OBJECT_NAME(f.parent_object_id) AS TableName, \n COL_NAME(fc.parent_object_id, fc.parent_column_id) AS ColumnName, \n OBJECT_NAME (f.referenced_object_id) AS ReferenceTableName, \n COL_NAME(fc.referenced_object_id, fc.referenced_column_id) AS ReferenceColumnName \nFROM sys.foreign_keys AS f \nINNER JOIN sys.foreign_key_columns AS fc \nON f.OBJECT_ID = fc.constraint_object_id\n",
    "label": 1
  },
  {
    "text_1": "Is it possible to add a logic Constraint to a Foreign Key?",
    "text_2": "CREATE TABLE dbo.Animals\n(AnimalId INT NOT NULL IDENTITY PRIMARY KEY,\nAnimalType TINYINT NOT NULL, -- 1: Mammal, 2:Reptile, etc..\nName VARCHAR(30))\nGO\nALTER TABLE dbo.Animals\nADD CONSTRAINT UNQ_Animals UNIQUE(AnimalId, AnimalType)\nGO\nCREATE FUNCTION dbo.GetAnimalType(@AnimalId INT)\nRETURNS TINYINT\nAS\nBEGIN\nDECLARE @ret TINYINT;\nSELECT @ret = AnimalType FROM dbo.Animals\n  WHERE AnimalId = @AnimalId;\nRETURN @ret;\nEND\nGO\nCREATE TABLE dbo.Mammals\n(AnimalId INT NOT NULL PRIMARY KEY,\nSomeOtherStuff VARCHAR(10),\nCONSTRAINT Chk_AnimalType_Mammal CHECK(dbo.GetAnimalType(AnimalId)=1)\n);\nGO\n",
    "label": 1
  },
  {
    "text_1": "oracle euro character issue",
    "text_2": "select value from nls_database_parameters where parameter='NLS_CHARACTERSET';\n",
    "label": 1
  },
  {
    "text_1": "Update 'meta_value' from wp_usermeta table assigning value of another 'meta_value' of the same table",
    "text_2": "UPDATE wp_usermeta\nJOIN umeta_tmp ON umeta_tmp.meta_key = 'request_category' \n               AND umeta_tmp.umeta_id = wp_usermeta.umeta_id\nSET wp_usermeta.meta_value = umeta_tmp.meta_value\nWHERE wp_usermeta.meta_key = 'category' AND \n      wp_usermeta.meta_value = 'travel_agency'`\n",
    "label": 1
  },
  {
    "text_1": "How to find count and names of distinct characters in string in PL/SQL",
    "text_2": "heloxamp\n",
    "label": 1
  },
  {
    "text_1": "Joining two tables but removing rows already present in another",
    "text_2": "SELECT t.time, a.activity\nFROM   (days d CROSS JOIN  times t CROSS JOIN activities a)\nLEFT   JOIN planner p ON (p.day, p.time, p.activity)\n                       = (d.day, t.time, a.activity)\nWHERE  p.activity IS NULL;\n",
    "label": 1
  },
  {
    "text_1": "sql select distinc where max date",
    "text_2": "SELECT m. * , u.username, c.Model, c.Make, c.License, c.Milage, COUNT( m.process_id ) AS count_nr\nFROM maintenances AS m LEFT JOIN\n     users AS u\n     ON u.id = m.user_id LEFT JOIN\n     cars AS c\n     ON c.id = m.car_id\nWHERE maintenance_date = (SELECT MAX(m2.maintenance_date) FROM maintenances m2 WHERE m2.car_id = m.car_id);\nGROUP BY c.id\n",
    "label": 1
  },
  {
    "text_1": "Display Rows that Have a 0 count",
    "text_2": "    ON PE.EventID = E.ID\n      AND E.Date BETWEEN ([Start of Year] AND Now)\n   WHERE E.IsIncident = 1\nGROUP BY ET.Name\n",
    "label": 1
  },
  {
    "text_1": "Calculate running total in SQLite table using triggers",
    "text_2": "CREATE TEMP TABLE \"AccountBalances\" (\n  \"Id\" INTEGER PRIMARY KEY, \n  \"Balance\" REAL);\n\nINSERT INTO \"AccountBalances\" values (1,0)\nINSERT INTO \"AccountBalances\" values (2,0);\nINSERT INTO \"AccountBalances\" values (3,0);\nINSERT INTO \"AccountBalances\" values (4,0);\nINSERT INTO \"AccountBalances\" values (5,0);\nINSERT INTO \"AccountBalances\" values (6,0);\n\nCREATE TRIGGER UpdateAccountBalance AFTER UPDATE ON AccountBalances\nBEGIN\n UPDATE AccountBalances \n    SET Balance = 1 + new.Balance \n  WHERE Id = new.Id + 1;\nEND;\n\nPRAGMA recursive_triggers = 'on';\n\nUPDATE AccountBalances \n   SET Balance = 1 \n WHERE Id = 1\n\nselect * from \"AccountBalances\";\n",
    "label": 1
  },
  {
    "text_1": "Reindexing Magento though SQL",
    "text_2": "app/code/core/Mage/Catalog/Model/Indexer/Url.php\n(alias of catalog/indexer_url, PHP class of Mage_Catalog_Model_Indexer_Url)\n",
    "label": 1
  },
  {
    "text_1": "ambiguous column name, my WHERE statement is already taken up for other purposes",
    "text_2": "SELECT *\nFROM ProductTBL p\nINNER JOIN ImageTBL img on p.ProductID = img.ProductID AND p.ProductID = @pid\n",
    "label": 1
  },
  {
    "text_1": "insert in database with column number",
    "text_2": "INSERT INTO TableName(Alpha, Bravo, Echo) VALUES (\"val1\", \"val2\", \"val3\");\n",
    "label": 1
  },
  {
    "text_1": "Selecting two rows using SQL where they have not been compared before",
    "text_2": "select a.itemId, a.name, b.itemId otherItemId, b.name othername\nfrom item a\ninner join item b on a.itemId < b.itemId\nwhere not exists (\n  select * from vote v\n  where ((v.betterItemId = a.itemId and v.worseItemId = b.itemId)\n     or  (v.betterItemId = b.itemId and v.worseItemId = a.itemId))\n    and v.userId = 1234)   # << enter the userId here\norder by rand()\nlimit 1;\n",
    "label": 1
  },
  {
    "text_1": "SQL not exists self-join",
    "text_2": "select t1.account_id \nfrom the_table t1\nwhere t1.letter_type = 'Letter_2' \n  and not exists (select *\n                  from the_table t2\n                  where t2.letter_type = 'Letter_1' and \n                    and t1.account_id = t2.account_id);\n",
    "label": 1
  },
  {
    "text_1": "Simultaneous result from single parameter SQL Server stored procedure",
    "text_2": ";WITH \nnumbers AS          -- added\n(\n    SELECT  n = 1\n    UNION ALL\n    SELECT  n = n + 1\n    FROM    numbers\n    WHERE   n < 999\n),\nctetest AS \n        (\n            SELECT      n AS Data,                   -- change\n            @startdate AS CDate, \n                        CAST (n as FLOAT) as Case2,   -- change\n                        0 as OLNo\n        FROM        numbers                           -- change\n        WHERE   n   <= @setpoint                 -- change\n\n            UNION ALL\n\n            SELECT      Data,\n            dateadd(day,1,CDate),\n                        CASE WHEN Case2 < @recoveredmw THEN @setpoint ELSE (1 - @declinerate) * Case2 END,\n                        OLNo + (CASE WHEN Case2 < @recoveredmw THEN 1 ELSE 0 END)\n            FROM        ctetest \n            WHERE       dateadd(day, 1, CDate) <= @finishdate\n        )\n        SELECT      * \n        FROM        ctetest \n    order by    Data DESC, CDate     -- change\n    OPTION (MAXRECURSION 0)\n",
    "label": 1
  },
  {
    "text_1": "A simple MySQL query taking forever (more than 20 minutes!)",
    "text_2": "CREATE TABLE `instruments` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `name` char(20) DEFAULT NULL,\n  `country` char(50) DEFAULT NULL,\n  `newsquery` char(100) DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB;\n\nCREATE TABLE `indicators` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `instrument_id` int(11) DEFAULT NULL,\n  `date` date DEFAULT NULL,\n  `sma_5` float(10,3) DEFAULT NULL,\n  `sma_14` float(10,3) DEFAULT NULL,\n  `ema_14` float(10,3) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `fk_instrument_indicators` (`instrument_id`),\n  CONSTRAINT `fk_instrument_indicators` FOREIGN KEY (`instrument_id`) REFERENCES `instruments` (`id`) ON DELETE CASCADE ON UPDATE CASCADE\n) ENGINE=InnoDB;\n\n CREATE TABLE `stockdata` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `instrument_id` int(11) NOT NULL,\n  `name` char(20) DEFAULT NULL,\n  `date` date DEFAULT NULL,\n  `open` float DEFAULT NULL,\n  `high` float DEFAULT NULL,\n  `low` float DEFAULT NULL,\n  `close` float DEFAULT NULL,\n  `volume` int(11) DEFAULT NULL,\n  `adjclose` float DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `fk_instrument_stockdata` (`instrument_id`),\n  CONSTRAINT `fk_instrument_stockdata` FOREIGN KEY (`instrument_id`) REFERENCES `instruments` (`id`) ON DELETE CASCADE ON UPDATE CASCADE\n) ENGINE=InnoDB;\n",
    "label": 1
  },
  {
    "text_1": "Optimal ORACLE function parsing",
    "text_2": "COMPANY_NAME                   STD_COMPANY_NAME                                 \n------------------------------ --------------------------------------------------\nOracle Co                      Oracle $COMPANY$                                   \nOracle Co Ltd Cmpy LMT         Oracle $COMPANY$ $LIMITED$ $COMPANY$ $LIMITED$     \nOracle Co Ltd.                 Oracle $COMPANY$ Ltd.                              \nOracle Ltd                     Oracle $LIMITED$                                   \nOracle Ltd.                    Oracle Ltd.                                        \n",
    "label": 1
  },
  {
    "text_1": "mysql select the first n rows per group",
    "text_2": "SELECT USERid, LEAST(7, COUNT(*))\nFROM table\nGROUP BY USERid\n",
    "label": 1
  },
  {
    "text_1": "Laravel how get array and not object of QueryBuilder select() statement?",
    "text_2": "$array = get_object_vars($result);\n",
    "label": 1
  },
  {
    "text_1": "Updating Table Records in a Batch and Auditing it",
    "text_2": " insert into order_audit \n select 'Order_Num: '||to_char(t.column_value)||' - Updated Succesfully'    \n from table ( l_nums ) t\n /\n\n insert into order_audit \n select 'Order_Num: '||to_char(col1)||' - Order Not Found'    \n from ext_table \n minus \n select * from table ( l_nums ) \n /\n",
    "label": 1
  },
  {
    "text_1": "SQL Server : getting year and month",
    "text_2": "SELECT  ID,\n        Year,\n        Month,\n        Trades,\n        RowNum = ROW_NUMBER() OVER(PARTITION BY ID ORDER BY Year DESC, Month DESC)\nFROM    ExampleTable\nWHERE   Trades > 0;\n",
    "label": 1
  },
  {
    "text_1": "Change value of column to a value from a foreign column",
    "text_2": "select * from my_eav \nleft join posts on my_eav.v_link = posts.id \n",
    "label": 1
  },
  {
    "text_1": "Android get sum of database column where value is like",
    "text_2": "select sum(dairyNumber) from yourtable where dairyId = 'x'\n\n  or, if you want another column than just the sum .\n\nselect diaryName, sum(dairyNumber) from yourtable where dairyId = 'x' \n",
    "label": 1
  },
  {
    "text_1": "how to retrieve records which occurred more than twice in oracle? ",
    "text_2": "select stu_id, name, subject\nfrom student\nwhere stu_id in (   select stu_id \n                    from student \n                    group by stu_id \n                    having count(stu_id) >2 );\n",
    "label": 1
  },
  {
    "text_1": "Failure to connect to derby database using ij from .bat file",
    "text_2": "C:\\Progra~1\\Sun\\JavaDB\\bin\\ij.bat commands.txt\n",
    "label": 1
  },
  {
    "text_1": "Like keyword issue in MySQL",
    "text_2": "$query=\"SELECT * FROM subcategories WHERE `name` LIKE '%\".$key[1].$key[2].\"%'\";\n",
    "label": 1
  },
  {
    "text_1": "How to keep data for existing records unchanged",
    "text_2": "Id        Cost        Valid From        ClauseId\n------------------------------------------------\n1          $60         01/01/2013          1\n2          $70         01/02/2013          1\n3          $80         01/03/2013          1\n",
    "label": 1
  },
  {
    "text_1": "Days Since Last Help Ticket was Filed",
    "text_2": "select Customer, datediff(day, date_closed, current_date) as days_since_last_tkt\nfrom \n(select *, rank() over (partition by Customer order by \"Date_Closed\" desc) as date_order\nfrom tickets) zd\njoin tickets t on zd.date_closed = t.date_closed\nwhere zd.date_order = 1\n",
    "label": 1
  },
  {
    "text_1": "Optimizing a recursive UDF with a temp table",
    "text_2": "with pp as (\n      select p.id\n      from person p\n      where p.id = @personid\n      union all\n      select p.id\n      from pp join\n           person p\n           on pp.parentid = p.id\n    )\nselect (case when count(*) > 0 then 1 else 0 end)\nfrom pp join\n     car c\n     on pp.id = c.owner_id and type = 2;\n",
    "label": 1
  },
  {
    "text_1": "SQL parse column string for numerical data and store in separate columns",
    "text_2": "select to_number(regexp_substr(field, 'height(\\d+\\.?\\d+)', 1, 1, 'i', 1)) height,\n       to_number(regexp_substr(field, 'weight(\\d+\\.?\\d+)', 1, 1, 'i', 1)) weight\n  from tbl;\n",
    "label": 1
  },
  {
    "text_1": "Calculate the Sum of duration in sql query",
    "text_2": "SQL> select numtodsinterval\n  2         ( sum\n  3           (  86400 * (trunc(end_time) - trunc(start_time))\n  4            + to_number(to_char(end_time,'sssss')) - to_number(to_char(start_time,'sssss'))\n  5           )\n  6         , 'second'\n  7         ) time_difference\n  8    from mytable\n  9  /\n\nTIME_DIFFERENCE\n------------------------------\n+000000000 13:48:49.000000000\n\n1 rij is geselecteerd.\n",
    "label": 1
  },
  {
    "text_1": "Fetching next and previous records from database",
    "text_2": "SELECT `photo_id`\n  FROM `photos`\n WHERE `photo_id` > 3 AND `user_id` = 1\n ORDER BY `photo_id` ASC\n LIMIT 1\n",
    "label": 1
  },
  {
    "text_1": "Problems with joining two tables in SQL",
    "text_2": "    SELECT username FROM user WHERE user_id IN (SELECT user_id FROM comments);\n",
    "label": 1
  },
  {
    "text_1": "Query to find record with the most matching columns, where non-matching columns have a space?",
    "text_2": "-- Temp table to play with\nSELECT 1 AS Id, 'Sony' AS A, 'Playstation' AS B, 'Unit' AS C, 'Black' AS D, \n    'Damaged' AS E\nINTO #Items\nUNION SELECT 2, 'Sony', 'Playstation', ' ', ' ', ' '\n\n-- The query\nDECLARE @a nvarchar(50), @b nvarchar(50), @c nvarchar(50), @d nvarchar(50), @e \n\nnvarchar(50)\nSET @a = 'Sony'\nSET @b = 'Playstation'\nSET @c = 'Controller'\nSET @d = 'Black'\nSET @e = 'Damaged'\n\nSELECT TOP 1 I.*\nFROM (\n    SELECT ID,\n        CASE WHEN @a = a THEN 1 WHEN a = ' ' THEN 0 ELSE NULL END AS AResult,\n        CASE WHEN @b = b THEN 1 WHEN b = ' ' THEN 0 ELSE NULL END AS BResult,\n        CASE WHEN @c = c THEN 1 WHEN c = ' ' THEN 0 ELSE NULL END AS CResult,\n        CASE WHEN @d = d THEN 1 WHEN d = ' ' THEN 0 ELSE NULL END AS DResult,\n        CASE WHEN @e = e THEN 1 WHEN e = ' ' THEN 0 ELSE NULL END AS EResult\n    FROM #Items\n) IW\nINNER JOIN #Items I ON I.ID = IW.ID\nWHERE AResult IS NOT NULL AND BResult IS NOT NULL AND CResult IS NOT NULL \n    AND DResult IS NOT NULL AND EResult IS NOT NULL\nORDER BY AResult + BResult + CResult + DResult + EResult DESC\n",
    "label": 1
  },
  {
    "text_1": "How to query a highscore list by most recent score in Sql?",
    "text_2": "player | game_date |score\n-------------------------\n 1     | 10/12/2013| 700\n 1     | 10/11/2013| 550\n 2     | 10/12/2013| 100\n 2     | 10/11/2013| 777\n 3     | 10/10/2013| 654\n 3     | 10/08/2013| 367\n",
    "label": 1
  },
  {
    "text_1": "Using CASE in PostgreSQL to affect multiple columns at once",
    "text_2": "SELECT x.combo[1], x.combo[2], x.combo[3]\nFROM  (\n   SELECT CASE WHEN rtp.team_id = rtp.sub_team_id\n            THEN '{test1,test2,test3}'::text[]\n            ELSE ARRAY[trim(r2.team_name)\n                     , trim(r2.normal_data)\n                     , trim(r2.normal_data_2)]\n          END AS combo\n   FROM   rtp\n   JOIN   rtd2 r2 ON <unknown condition>\n   ) x;\n",
    "label": 1
  },
  {
    "text_1": "I want to extract the available timing from a table, where the booked timing is stored in another",
    "text_2": "TIMING\n00:00.0\n00:00.0\n30:00.0\n30:00.0\n30:00.0\n30:00.0\n",
    "label": 1
  },
  {
    "text_1": "Show a sequence generated value in success message upon form submission for Oracle Apex",
    "text_2": "begin\n  apex_application.g_print_success_message := 'your message here';\nend;\n",
    "label": 1
  },
  {
    "text_1": "SQL GROUP BY return empty set",
    "text_2": "WHERE YEAR(booking_time) = 2012\n  AND MONTH(booking_time) = 2\n  AND `pickUpLocation` = 1\n\nGROUP BY DAY(booking_time)\n\nLIMIT 31\n",
    "label": 1
  },
  {
    "text_1": "How to insert a column in a specific position in oracle without dropping and recreating the table?",
    "text_2": "INSERT INTO TABLE_TO_CHANGE (COL1, COL2, COL3, COL4) \nSELECT COL1, 'Foo', 'Bar', COL4\nFROM MY_TEMP_TABLE;\n",
    "label": 1
  },
  {
    "text_1": "How do I query column names that contain square brackets?",
    "text_2": "Dim query As String = String.Format(\"SELECT {0}{1}{0}, {0}{2}{0} FROM dbo.myTable\", \"\"\"\", \"[name]\", \"[height]\")\nDim cmdSelect As New OleDbCommand(query)\n",
    "label": 1
  },
  {
    "text_1": "Finding the smallest sum of sequares (SS) for indoor positioning",
    "text_2": "SELECT tbl_rssi._id,\n       SUM((tbl_rssi.signal - ScanResults.signal) * \n           (tbl_rssi.signal - ScanResults.signal))\nFROM tbl_rssi JOIN ScanResults ON tbl_rssi.MAC = ScanResults.MAC\nGROUP BY tbl_rssi._id\n",
    "label": 1
  },
  {
    "text_1": "Return record with start IP and end IP as range that an IP address falls between?",
    "text_2": "select top 1 ip.*\nfrom t ip\nwhere ip.ipstart > dbo.IPAddressToInteger(@ip)\norder by ipstart asc;\n",
    "label": 1
  },
  {
    "text_1": "Query for finding same values of table",
    "text_2": "SELECT student FROM (SELECT DISTINCT student FROM coursetracker) c\nWHERE NOT EXISTS (\n    SELECT * FROM coursetracker c1\n        FULL JOIN coursetracker c2 ON c1.courseId = c2.courseId\n            AND c1.student = c.student AND c2.student = 'B'\n    WHERE c1.courseID IS NULL OR c2.courseID IS NULL\n)\n",
    "label": 1
  },
  {
    "text_1": "Query to get only one row from multiple rows having same values",
    "text_2": "SELECT sum(is_read = 1)\nFROM notification n\nWHERE user_receiver=$ses_user and\n      id   = (select max(id)\n              from notification n2\n              where n2.user_sender = n.user_sender and\n                    n2.action = n.action and\n                    n2.post_id = n.post_id\n             );\n",
    "label": 1
  },
  {
    "text_1": "Left Join Not Joining with a Single Record",
    "text_2": "On fm_stg.classByStudent_termData_assessmentData.class_code = termData.course\nand fm_stg.classByStudent_termData_assessmentData.termID = termData.termID\nand fm_stg.classByStudent_termData_assessmentData.studentID = fm_stg.classByStudent_termData_assessmentData.studentID\n",
    "label": 1
  },
  {
    "text_1": "SQL Add hours for employees",
    "text_2": "SELECT DISTINCT a.*, \n       SUM(DATEDIFF(mi, b.timein, b.timeout)) OVER(PARTITION BY a.id) AS total_mins \nFROM tbl_people a \nLEFT JOIN tbl_register b ON a.id=b.personid\n",
    "label": 1
  },
  {
    "text_1": "Oracle: DISTINCT or GROUP BY row consistency",
    "text_2": "| NAME | PARENT | STATUS |\n|------|--------|--------|\n|    A |     P2 |      1 |\n|    B |     PB |     -1 |\n|    A |     P1 |      0 |\n",
    "label": 1
  },
  {
    "text_1": "Is my following table in 3NF. How do I maintain 3NF even when I have repetition as follows?",
    "text_2": " CREATE TABLE agent_office\n ( agent_id INT UNSIGNED COMMENT 'composite PK, FK ref agent.id'\n , office_id INT UNSIGNED COMMENT 'composite PK, FK ref office.id'\n , PRIMARY KEY (agent_id, office_id)\n , CONSTRAINT FK_agent_office_agent FOREIGN KEY (agent_id) REFERENCES agent (id)\n , CONSTRAINT FK_agent_office_office FOREIGN KEY (office_id) REFERENCES office (id)\n )\n",
    "label": 1
  },
  {
    "text_1": "How to add attributes to an existing xml string stored as a field from the rest of the columns in the same row using SQL",
    "text_2": "<row EntryID=\"1\" TableName=\"Manufacturers\" AuditDate=\"2013-01-30T15:48:24.690\" ChangeType=\"U\">\n  <AuditValue>\n    <row ManufacturerID=\"6\" ManufacturerName=\"AMES999\" IsDeleted=\"0\" Concurrency=\"AAAAAAABTAk=\" />\n  </AuditValue>\n</row>\n",
    "label": 1
  },
  {
    "text_1": "Multi-Insert Shorthand with Primary Key & Identity",
    "text_2": "INSERT INTO `People` (`name`,`email`) VALUES ('George', 'George@test.com'),('Mary', 'LittleLamb@test.com');\n",
    "label": 1
  },
  {
    "text_1": "How do you use script variables in PostgreSQL?",
    "text_2": "\\set quoted_myvariable '\\'' :myvariable '\\''\n",
    "label": 1
  },
  {
    "text_1": "MySQL - accessing a table sum and compare to another table?",
    "text_2": "SELECT BranchName \nFROM Branch B, Inventory I \nWHERE B.BranchId = I.BranchId \nGROUP BY BranchName\nHAVING SUM(onHand) >= 4;\n",
    "label": 1
  },
  {
    "text_1": "SQL count nulls and non nulls",
    "text_2": "| A | B |   C | COUNT |\n-----------------------\n| 1 | 1 | 100 |     2 |\n| 1 | 1 | 200 |     2 |\n| 2 | 2 | 100 |     4 |\n",
    "label": 1
  },
  {
    "text_1": "Informix to SQL attribute constraint",
    "text_2": "CREATE TABLE blaBla\n(\n    var_name_1 INTEGER  NOT NULL,\n    var_name_2 CHAR(20) NOT NULL\n)\n",
    "label": 1
  },
  {
    "text_1": "PostgreSQL - insert rows based on select from another table, and update an FK in that table with the newly inserted rows",
    "text_2": "reminder\nid    start         dateset_id\n3     2015-01-01    NULL\n7     2015-01-01    NULL\n",
    "label": 1
  },
  {
    "text_1": "How to identify consecutive times with gap less than X seconds",
    "text_2": "with toupdate as (\n      select t.*,\n             (case when datediff(second,\n                                 lag(TimeStamp) over (partition by EntranceType Order by TimeStamp),\n                                 TimeStamp) < 120\n                   then 'InActive'\n              end) as NewColumnStatus\n      from timestamp_01 t\n     )\nupdate toupdate\n    set Status = NewColumnStatus;\n",
    "label": 1
  },
  {
    "text_1": "Return number of people of a certain age deduced from stored DOBs",
    "text_2": "; With Ages as (\n    Select\n        DateDiff(YEAR, dob, CURRENT_TIMESTAMP) - \n        CASE WHEN\n            DATEADD(year,DateDiff(YEAR, dob, CURRENT_TIMESTAMP),CURRENT_TIMESTAMP)\n            > CURRENT_TIMESTAMP\n        THEN 1\n        ELSE 0 END as ageYears\n\n    from [database].[dbo].[users]\n)\nSELECT ageYears,COUNT(*) as NumUsers\nFROM Ages\nGROUP BY ageYears\n",
    "label": 1
  },
  {
    "text_1": "SQL Server Date Selection in Recordset based on initial date and number of days in another recordset",
    "text_2": "create table Table2\n( StartDate datetime,\n  days int\n );\n\ninsert into Table2 values ('2014-10-03', 5);\ninsert into Table2 values ('2014-10-02', 5);\n",
    "label": 1
  },
  {
    "text_1": "SQL - using result from subquery",
    "text_2": "SELECT drinks.title, drinks.ingredients, drinks.directions\nFROM drinks\nWHERE drinks.ingredientsNum >= [number of input ingredients]\nAND [number of input ingredients] <= (\n    SELECT count(*)\n    FROM ingredients\n    WHERE (\n        ingredients.ingredient LIKE '%rum%'\n        OR ingredients.ingredient LIKE '%coke%'\n        OR ingredients.ingredient LIKE '%vodka%'\n        -- the same goes for each ingredient\n    )\n    AND ingredients.drink_id = drinks.drink_id\n)\n",
    "label": 1
  },
  {
    "text_1": "How to use SELECT DISTINCT and SELECT TOP n in T-SQL",
    "text_2": "SELECT TOP 8 [KeywordId] as ID, [Keyword] as label, [Keyword] as value\nFROM [dbo].[News_Keywords]\nWHERE CONTAINS ([Keyword], @Q)\nGROUP BY KeywordId, KeyWord\nORDER BY MAX(SortOrder), len([Keyword]);\n",
    "label": 1
  },
  {
    "text_1": "new and old trigger code",
    "text_2": "INSERT INTO foo( foo_id, bar, baz ) \n  VALUES( 1, 'Bar 1', 'Baz 1' );\n",
    "label": 1
  },
  {
    "text_1": "How to Aggregate Data from a Subquery that Requires a Filter?",
    "text_2": "DECLARE @Date DATETIME;\nDECLARE @FromDate VARCHAR(25);\nDECLARE @ToDate VARCHAR(25);\n\nSET     @Date = GETDATE();\nSET     @FromDate = CONVERT(VARCHAR(25), DATEADD(dd, -(DAY(@Date) - 1), @Date),101);\nSET     @ToDate = CONVERT(VARCHAR(25), DATEADD(dd, -(DAY(DATEADD(mm, 1, @Date))), DATEADD(mm,1,@Date)), 101);\n\nSELECT  DISTINCT    [A].[Name],\n                    COUNT([O].[Id]) AS [OpportunityCount],\n                    (CASE WHEN (SUM([O].[Amount]) IS NULL) THEN 0.00 ELSE SUM([O].[Amount]) END) AS [OpportunityTotalAmounts],\n                    SUM(CASE WHEN [O].[StageName] != 'Not Sold' THEN 1 ELSE 0 END) \nFROM                [Account] AS [A]\n                    JOIN [RecordType] AS [RT] ON ([A].[RecordTypeId] = [RT].[Id])\n                    JOIN [Contact] AS [C] ON ([A].[Id] = [C].[AccountId])\n                    JOIN [OpportunityContactRole] AS [OCR] ON ([C].[Id] = [OCR].[ContactId])\n                    LEFT OUTER JOIN [Opportunity] AS [O] ON ([OCR].[OpportunityId] = [O].[Id])\nWHERE               ([RT].[Name] = 'PHX')\n                    AND ([A].[TypeMS__c] != 'Customer')\n                    AND ([O].[CreatedDate] BETWEEN @FromDate AND @ToDate)\nGROUP BY            [A].[Name];\n",
    "label": 1
  },
  {
    "text_1": "SQL: Retrieve value from a column that occurred least number of times",
    "text_2": "SELECT TOP 1 COUNT(*), myField\nFROM myTable\nGROUP BY (myField)\nORDER BY COUNT(*) ASC\n",
    "label": 1
  },
  {
    "text_1": "Why does Microsoft Azure (or Swift in general) fail to update a variable to return after a table query?",
    "text_2": "about to call asyncFetchImage\nEntering asyncFetchImage(imageName:completion:)\nLeaving asyncFetchImage(imageName:completion:)\nAfter call to asyncFetchImage\nLoading image in background\nAbout to call completion handler\nBeginning completion block\nIn completion block, status = image loaded\n",
    "label": 1
  },
  {
    "text_1": "MySQL order by \"best match\"",
    "text_2": "SELECT word\nFROM words\nWHERE word LIKE '%searchstring%'\nORDER BY\n  CASE\n    WHEN word LIKE 'searchstring%' THEN 1\n    WHEN word LIKE '%searchstring' THEN 3\n    ELSE 2\n  END\n",
    "label": 1
  },
  {
    "text_1": "Using case add different values in sql",
    "text_2": "Select Name, Id, \n    Sum(Price) Over (partition by (case when id in (1,2,3) then 1 else id end)) NewPrice\nFrom Table1\n",
    "label": 1
  },
  {
    "text_1": "SQL Multiple Rows to one CSV",
    "text_2": "| PROJECT NUMBER |            Resources |\n|----------------|-----------------------|\n|          25254 | Jim Anders,Becky Smit |\n|          25679 | Jim Anders,James Wals |\n|          32564 | Amy Dicker,James Wals |\n",
    "label": 1
  },
  {
    "text_1": "SQL - Select first 10 rows only?",
    "text_2": "select ... order by num desc limit 10\n",
    "label": 1
  },
  {
    "text_1": "Postgresql Update using Inner Join set",
    "text_2": "Update Table2 fd\n   Set fd.field1 = \n      (select CASE WHEN os.afield is not null THEN (os.afield) Else os.anotherfield End \n         from Table1 os \n        where fd.myfield1= os.myfield1 \n          AND fd.myfield2 = os.myfield2);\n",
    "label": 1
  },
  {
    "text_1": "Sum case when one result bigger than the other",
    "text_2": " select name , sum(count) as total, CONCAT(sum(within_tat),' ' ,'(',sum(within_tat)*100 /sum(count),  '%',')' ) as percent\n\nfrom Table1\nGroup by name\n",
    "label": 1
  },
  {
    "text_1": "Data into multiple groups",
    "text_2": "SELECT\n    CASE (column1 + column2)\n        WHEN 'XY' THEN '1'\n        WHEN 'YZ' THEN '1'\n        WHEN 'XA' THEN '1'\n        WHEN 'AK' THEN '1'\n        WHEN 'OP' THEN '2'\n        WHEN 'WO' THEN '2'\n        WHEN 'NM' THEN '3'\n        WHEN 'EN' THEN '3'\n        ELSE '0'\n    END AS [Group Number],\n    column1,\n    column2\nFROM test\n--ORDER BY [Group Number]\n",
    "label": 1
  },
  {
    "text_1": "Index for finding an element in a JSON array",
    "text_2": "CREATE OR REPLACE FUNCTION json2arr(_j json, _key text)\n  RETURNS text[] LANGUAGE sql IMMUTABLE AS\n'SELECT ARRAY(SELECT elem->>_key FROM json_array_elements(_j) elem)';\n",
    "label": 1
  },
  {
    "text_1": "Mysql Return a row only if all its children are selected",
    "text_2": "SELECT a.`parent` FROM test a\nINNER JOIN (test b) ON a.`parent` = b.`id` AND b.`parent` = 'if'\nWHERE a.`true` IN ('case1', 'case2')\nGROUP BY a.`parent`\nHAVING COUNT(a.`parent`) = \n  (SELECT COUNT(*) FROM test t1 WHERE t1.`parent` = a.`parent`);\n",
    "label": 1
  },
  {
    "text_1": "SQL query for knowing the popular hashtag from a column, that has a list of hashtags stored as an array",
    "text_2": "╔═══════════╦═══════╗\n║   val     ║ count ║\n╠═══════════╬═══════╣\n║ hashtag1  ║     2 ║\n║ hashtag2  ║     2 ║\n║ hashtag4  ║     1 ║\n║ hashtag3  ║     1 ║\n╚═══════════╩═══════╝\n",
    "label": 1
  },
  {
    "text_1": "Using XML PATH to manipulate row data when grouping",
    "text_2": "DECLARE @refTab table\n(id int identity(1,1),EID int, Dt Date,[shift] varchar(3))\n\nINSERT INTO @refTab\n\nSELECT      Lu.EID,Lu.Dt,coalesce(LU1.[Flag],LU2.[Flag]) [shift]\nFROM        (SELECT *,100 EID FROM @Lu_Dt) Lu\nLEFT JOIN   (SELECT D.EID,D.In_Time,'D/N' [Flag]\n            FROM    (SELECT EID,CAST(In_Time AS DATE) In_Time FROM @tab Where Shift = 'D') D\n            JOIN    (SELECT EID,CAST(In_Time AS DATE) In_Time FROM @tab Where Shift = 'N') N \n            ON      D.In_Time = N.In_Time AND D.EID = N.EID) LU1 ON Lu.Dt = LU1.In_Time\nLEFT JOIN   (SELECT CAST(In_Time AS DATE) In_Time,'D' [Flag] FROM @tab Where Shift = 'D') LU2 ON Lu.Dt = LU2.In_Time\nLEFT JOIN   (SELECT CAST(In_Time AS DATE) In_Time,'N' [Flag] FROM @tab Where Shift = 'N') LU3 ON Lu.Dt = LU3.In_Time\n\nSELECT * FROM @refTab\n",
    "label": 1
  },
  {
    "text_1": "Where to see the logged sql statements in play2?",
    "text_2": "<configuration>\n\n    <appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\n        <encoder>\n            <pattern>%-5level - %msg%n</pattern>\n        </encoder>\n    </appender>\n\n    <logger name=\"com.jolbox.bonecp\" level=\"DEBUG\">\n        <appender-ref ref=\"STDOUT\" />\n    </logger>\n\n    <logger name=\"play\" level=\"DEBUG\">\n        <appender-ref ref=\"STDOUT\" />\n    </logger>\n\n    <logger name=\"application\" level=\"DEBUG\">\n        <appender-ref ref=\"STDOUT\" />\n    </logger>\n\n</configuration>\n",
    "label": 1
  },
  {
    "text_1": "MySQL - DATE_ADD month interval",
    "text_2": "SELECT * \nFROM mydb \nWHERE creationdate >= \"2011-01-01\" \nAND creationdate < DATE_ADD(\"2011-01-01\", INTERVAL 6 MONTH)\nGROUP BY MONTH(creationdate)\n",
    "label": 1
  },
  {
    "text_1": "T-SQL LIKE condition on comma-separated list",
    "text_2": "ALTER PROCEDURE dbo.StringSplitRowset\n  @String varchar(8000)\nAS\nSELECT Substring(@String, l.StartPos, l.Chars) Item\nFROM (\n   SELECT\n      S.StartPos,\n      IsNull(NullIf(CharIndex(',', @String, S.StartPos), 0) - S.StartPos, 8000)\n   FROM (\n      SELECT 1 UNION ALL\n      SELECT N.N + 1\n      FROM (\n         SELECT A.A * 4096 + B.B * 1024 + C.C * 256 + D.D * 64 + E.E * 16 + F.F * 4 + G.G N\n         FROM\n            (SELECT 0 UNION ALL SELECT 1) A (A),\n            (SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4) G (G),\n            (SELECT 0 UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3) F (F),\n            (SELECT 0 UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3) E (E),\n            (SELECT 0 UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3) D (D),\n            (SELECT 0 UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3) C (C),\n            (SELECT 0 UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3) B (B)\n      ) N (N)\n      WHERE Substring(@String, N.N, 1) = ','\n   ) S (StartPos)\n) L (StartPos, Chars)\n",
    "label": 1
  },
  {
    "text_1": "How to update record which is duplicated PL/SQL in procedure",
    "text_2": "update sales_staff_08 d\nset d.username = (\n  select un from (\n    select firstname ||surname || row_number() \n            over (partition by firstname, surname order by firstname) un \n     from sales_staff_08\n  ) s\n  where s.rowid = d.rowid\n)\n",
    "label": 1
  },
  {
    "text_1": "MySQl - SQL - Top 5 records per day",
    "text_2": "call proc_loop_test(`2015-01-01`,`2015-03-15`);\nselect * from daily_results;\n",
    "label": 1
  },
  {
    "text_1": "MS SQL column encryption without certificate",
    "text_2": "+----------------------------------------------------------------------------+-----------------+\n|                                 CypherText                                  |  DecryptedText  |\n+----------------------------------------------------------------------------+-----------------+\n| 0x01000000F1D813F399246484FDA8D7C7D22BFBCF748D3F6033D4E9980FCDC58A387A1A93 | Text to encrypt |\n+----------------------------------------------------------------------------+-----------------+\n",
    "label": 1
  },
  {
    "text_1": "Add a SQL XOR Constraint between two nullable FK's",
    "text_2": "CHECK (\n    1 = (\n        (CASE WHEN FK1 IS NULL THEN 0 ELSE 1 END)\n        + (CASE WHEN FK2 IS NULL THEN 0 ELSE 1 END)\n        + (CASE WHEN FK3 IS NULL THEN 0 ELSE 1 END)\n        + (CASE WHEN FK4 IS NULL THEN 0 ELSE 1 END)\n        ...\n    )\n)\n",
    "label": 1
  },
  {
    "text_1": "PostgreSQL incremental dates?",
    "text_2": "\"2013-05-01\"\n\"2013-05-02\"\n\"2013-05-03\"\n...\n\"2013-05-29\"\n\"2013-05-30\"\n\"2013-05-31\"\n",
    "label": 1
  },
  {
    "text_1": "SQL: Return Column names where column contains a given Value",
    "text_2": "CREATE TABLE dbo.floob\n(\n  a INT, \n  b VARCHAR(32), \n  c VARBINARY(22), \n  d DATE, \n  e DATETIME, \n  f ROWVERSION\n);\n\nINSERT dbo.floob(a,b,c,d,e) VALUES\n( 75, 'foo', 0x00, GETDATE(), GETDATE()),\n( 21, '75',  0x00, GETDATE(), GETDATE());\n",
    "label": 1
  },
  {
    "text_1": "Products with category and sub categories",
    "text_2": "CREATE TABLE ITEM(\nITEM_KEY VARCHAR(20) NOT NULL,\nNAME VARCHAR(255),\nTYPE_CODE VARCHAR(50) NOT NULL,\nCONSTRAINT ITEM_TYPECODE_CK CHECK(TYPE_CODE IN('ITEM','CATEGORY')),\nCONSTRAINT ITEM_ITEMKEY PRIMARY KEY(ITEM_KEY)\n);\n",
    "label": 1
  },
  {
    "text_1": "How to discover the underlying primary (or unique) key columns from an Oracle view",
    "text_2": "SQL> select c.constraint_name\n  2       , 'V_' || substr(c.table_name,3) || '.' || cc.column_name possible_view_column\n  3    from user_dependencies d\n  4       , all_constraints c\n  5       , all_cons_columns cc\n  6   where d.name = 'V_A'\n  7     and d.referenced_type = 'TABLE'\n  8     and d.referenced_link_name is null\n  9     and d.referenced_owner = c.owner\n 10     and d.referenced_name = c.table_name\n 11     and c.constraint_type = 'P'\n 12     and c.owner = cc.owner\n 13     and c.constraint_name = cc.constraint_name\n 14  /\n\nCONSTRAINT_NAME                POSSIBLE_VIEW_COLUMN\n------------------------------ -------------------------------------------------------------\nSYS_C0051561                   V_A.ID\n\n1 row selected.\n",
    "label": 1
  },
  {
    "text_1": "How to avoid duplicate values during joining of 2 table using SQL Server 2008",
    "text_2": "select distinct i.Item_Name, g.GrpName \nfrom ItemMaster i left outer join GrpDetail g\non i.Id = g.Id\norder by i.Item_Name, g.GrpName;\n",
    "label": 1
  },
  {
    "text_1": "Create automatic code",
    "text_2": "CREATE FUNCTION [dbo].[AUTO_CODE]()\n   RETURNS CHAR(4)\nAS\nBEGIN\n    DECLARE @KODE INT = (SELECT COUNT(KODE_BARANG)FROM BARANG);\n\n    RETURN FORMAT(@KODE, 'B00#');\nEND\n",
    "label": 1
  },
  {
    "text_1": "Oracle SQL Group By a String Aggregated Field",
    "text_2": "SELECT TRUNC(a.air_dt) AS air_dt\n     , TO_CHAR(TRUNC(a.dol_pref_start_time, 'HH'), 'HH:MI AM') AS dol_gap_time\n     , SUM(e.matl_size) AS matl_size\n  FROM order_implem_dtl_broadcast a INNER JOIN matl_mstr b\n    ON a.matl_id = b.matl_id\n INNER JOIN matl_size_mstr e \n    ON b.matl_size_id = e.matl_size_id\n WHERE a.air_dt >= date'2015-01-15'\n   AND a.air_dt < date'2015-01-16'\n GROUP BY TRUNC(a.air_dt), TO_CHAR(TRUNC(a.dol_pref_start_time, 'HH'), 'HH:MI AM')\n ORDER BY air_dt, TO_DATE(dol_gap_time, 'HH:MI AM'); -- using aliases in the ORDER BY, converting dol_gap_time to DATE for sorting\n",
    "label": 1
  },
  {
    "text_1": "SELECT from multiple criteria",
    "text_2": "  SELECT d.documentid\n    FROM DOCUMENT d\n    JOIN DOCUMENTKEYWORD dk ON dk.documentid = d.documentid\n                           AND dk.keywordid IN (1, 2, 3)\nGROUP BY d.documentid\n  HAVING COUNT(DISTINCT dk.keywordid) = 3\n",
    "label": 1
  },
  {
    "text_1": "Performance monitoring for standalone .NET desktop application with New Relic",
    "text_2": "var foo = new Foo();\nfoo.Bar1(); // Creates a transaction named Bars in category Background\nfoo.Bar2(); // Same here.\nfoo.Bar3(); // Won't create a new transaction.  See notes below.\n\npublic class Foo\n{\n    // this will result in a transaction with an External Service request segment in the transaction trace\n    public void Bar1()\n    {\n        new WebClient().DownloadString(\"http://www.google.com/);\n    }\n\n    // this will result in a transaction that has one segment with a category of \"Custom\" and a name of \"some custom metric name\"\n    public void Bar2()\n    {\n        // the segment for Bar3 will contain your SQL query inside of it and possibly an execution plan\n        Bar3();\n    }\n\n    // if Bar3 is called directly, it won't get a transaction made for it.\n    // However, if it is called inside of Bar1 or Bar2 then it will show up as a segment containing the SQL query\n    private void Bar3()\n    {\n        using (var connection = new SqlConnection(ConnectionStrings[\"MsSqlConnection\"].ConnectionString))\n        {\n            connection.Open();\n            using (var command = new SqlCommand(\"SELECT * FROM table\", connection))\n            using (var reader = command.ExecuteReader())\n            {\n                reader.Read();\n            }\n        }\n    }\n}\n",
    "label": 1
  },
  {
    "text_1": "Hard query with aggregation",
    "text_2": "GROUPID GROUPID_1   CLIENTID    AVG_BUDGET\nA   B   66  0.307692307692308\nA   C   77  0.307692307692308\nA   D   111 0.307692307692308\nA   D   333 0.307692307692308\nB   A   11  0.666666666666667\nB   B   66  0.666666666666667\nB   D   111 0.666666666666667\nB   D   222 0.666666666666667\nB   D   333 0.666666666666667\nC   A   33  1.33333333333333\nC   B   44  1.33333333333333\nC   C   88  1.33333333333333\nC   C   99  1.33333333333333\nD   A   11  1.33333333333333\nD   B   66  1.33333333333333\nD   D   111 1.33333333333333\nD   D   222 1.33333333333333\nD   D   333 1.33333333333333\n",
    "label": 1
  },
  {
    "text_1": "Query IsDeleted = 0 on all tables",
    "text_2": "CREATE VIEW vwTEST\nAS\nSELECT\n    Cus.CustomerId,\n    Cus.FirstName,\n    Cus.LastName,\n    Cty.CountyName,\n    Cry.CountryName\nFROM\n    Customers Cus\nLEFT JOIN\n(SELECT\n   County.CountyId,\n   County.CountyName\n   FROM County\n   WHERE County.IsDeleted = 0) AS Cty ON Cus.CountyId = Cty.CountyId\nLEFT JOIN\n(SELECT\n   Country.CountryId,\n   Country.CountryName\n   FROM Country\n   WHERE Country.IsDeleted = 0) AS Cry ON Cus.CountryId = Cry.CountryId\nWHERE Cus.IsDeleted = 0;\n",
    "label": 1
  },
  {
    "text_1": "Cursor? Loop? Aggregate up rows data along with row results",
    "text_2": "SELECT  Description, \n        COALESCE(Parition, 'Total') AS Partition,\n        SUM(Total) AS Total\nFROM    MyTable\nGROUP BY ROLLUP (Description, Partition);\n",
    "label": 1
  },
  {
    "text_1": "Change in dateformat while inserting from 1 table to another",
    "text_2": "01/07/2016 7:23:45 AM\n",
    "label": 1
  },
  {
    "text_1": "drop column or re-create table using required column : which is better?",
    "text_2": "create table sample_cpy \nas\nselect sno,name,dept from sample where rownum < 1;\n",
    "label": 1
  },
  {
    "text_1": "Running total of rows by ID",
    "text_2": "SELECT \n  t.id,\n  t.trxn_dt,\n  t.trxn_amt, \n  @cur:= IF(id=@id, @cur+1, 1) AS RowNumber, \n  @id := id \nFROM \n  StarningTable t \nCROSS JOIN \n    (SELECT @id:=(SELECT MIN(id) FROM StarningTable t), @cur:=0) AS init \nORDER BY \n  t.id\n",
    "label": 1
  },
  {
    "text_1": "Is the order of comparisant important in a join query?",
    "text_2": "Select 'field' \nfrom 'table' \njoin 'references' \non 'table'.'id' = 'references'.'reference'\n",
    "label": 1
  },
  {
    "text_1": "Bitwise calculations in oracle over a large result set",
    "text_2": "SQL> SELECT name, bitor_agg(permissions) from cats group by name;\n\nNAME            BITOR_AGG(PERMISSIONS)\n--------------- ----------------------\nCarl                                15\nSteve                               23\n",
    "label": 1
  },
  {
    "text_1": "SQL one-to-many match the one side by ALL in many side",
    "text_2": "SELECT\n    source.*\nFROM\n    source\n    INNER JOIN params ON params.source = source.id\nWHERE\n    params.value IN (1, 2, 3)\nGROUP BY\n    source.id,\n    source.name\nHAVING\n    COUNT(DISTINCT params.value) = 3\n",
    "label": 1
  },
  {
    "text_1": "Deleting multiple rows from multiple tables",
    "text_2": "WHERE m.`LAST_LOGGED_IN` < UNIX_TIMESTAMP()-864000\n",
    "label": 1
  },
  {
    "text_1": "How prepare statement with bindvalue and %?",
    "text_2": "$stmt->bindValue(':firstname', $firstname . '%');\n",
    "label": 1
  },
  {
    "text_1": "Use Check Constraints to determine if a bit column and be set to true based on another column value, possible?",
    "text_2": "insert usertable select\n1, 1, 1 union all select\n2, 1, 0 union all select\n3, 1, 0 union all select\n4, 1, 0 union all select\n5, 2, 1 union all select\n6, 2, 0 union all select\n7, 2, 0 union all select\n8, 2, 0\n",
    "label": 1
  },
  {
    "text_1": "How do I trace former ids using a recursive query?",
    "text_2": "with recursive current_ru (reporting_unit, predesessor, depth) as (\n    select reporting_unit, predesessor, 1\n    from providers\n    where predesessor is not null\nunion\n    select r.reporting_unit, p.predesessor, depth+ 1\n    from providers p\n    join current_ru r\n    on p.reporting_unit = r.predesessor\n    )\nselect distinct on(predesessor) \n    predesessor reporting_unit, \n    reporting_unit current_reporting_unit\nfrom current_ru\nwhere predesessor is not null\norder by predesessor, depth desc;\n\n reporting_unit | current_reporting_unit \n----------------+------------------------\n 99BX5          | 99BX7\n 99BX6          | 99BX7\n(2 rows)\n",
    "label": 1
  },
  {
    "text_1": "What does \"+=\" mean in T-SQL",
    "text_2": "set @x += 'test'\n",
    "label": 1
  },
  {
    "text_1": "Conditions in Where Clauses based on a flag",
    "text_2": "    WHERE\n    (@Status <> 1 AND t3.Id = @SId AND sh.StatusId = 3 AND k.StatusId = 1)\n    OR (t2.Id = @SID AND t2.StatusID = 12)\n",
    "label": 1
  },
  {
    "text_1": "Getting the number users belonging to a group",
    "text_2": " SELECT COUNT(1)\n   FROM tblLog l\n        INNER JOIN tblMembers m ON m.Member_Id = l.Member_Id\n        INNER JOIN tblAgeGroup ag ON ag.minAge <= m.Age and ag.maxAge > m.Age\n  WHERE AccessDate >= '2014-04-01'\n    AND AccessDate <= '2014-04-30'\n",
    "label": 1
  },
  {
    "text_1": "st_within as a condition of insert",
    "text_2": "SELECT * FROM public.data\nWHERE id NOT IN (\n    SELECT d.id \n    FROM public.data d, public.exclusion_zone e\n    WHERE ST_Within (d.the_geom, e.the_geom)\n);\n",
    "label": 1
  },
  {
    "text_1": "Calculating Variance from different data Sources Oracle SQL",
    "text_2": "with data as (\n  select abp_date dt, abp_source_uid id, abp_reference_1 ref, \n      abp_charge charge, abp_count cnt,\n      lag(abp_source_uid) over (partition by abp_date, abp_reference_1 \n                                order by abp_source_uid) lgid,\n      lead(abp_charge)    over (partition by abp_date, abp_reference_1 \n                                order by abp_source_uid) ldcharge,\n      lead( abp_count)    over (partition by abp_date, abp_reference_1 \n                                order by abp_source_uid) ldcnt\n    from abp_profile a)\nselect dt, ref, \n    case when id = 1 then nvl(ldcharge, 0) - charge else charge end chrg_diff,\n    case when id = 1 then nvl(ldcnt, 0) - cnt else cnt end cnt_diff\n  from data\n  where id = 1 or id = 2 and lgid is null;\n",
    "label": 1
  },
  {
    "text_1": "how to get current database and user name using a select in postgresql",
    "text_2": "      select user\n",
    "label": 1
  },
  {
    "text_1": "Sql_ How to insert ordered data",
    "text_2": "Select *\nFrom TableName\nOrder By Id\n",
    "label": 1
  },
  {
    "text_1": "Remove all but first character of a string in MySQL query",
    "text_2": "select col1,left(col2,1)\nfrom table\n",
    "label": 1
  },
  {
    "text_1": "How do you determine the size of an index in SQL Server?",
    "text_2": "EXEC sp_spaceused TableName;\n",
    "label": 1
  }
]
